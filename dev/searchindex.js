Search.setIndex({"docnames": ["CONTRIBUTING", "api/algorithm_functions/centrality", "api/algorithm_functions/coloring", "api/algorithm_functions/connectivity_and_cycles", "api/algorithm_functions/dag_algorithms", "api/algorithm_functions/dominance", "api/algorithm_functions/graph_operations", "api/algorithm_functions/index", "api/algorithm_functions/isomorphism", "api/algorithm_functions/link_analysis", "api/algorithm_functions/matching", "api/algorithm_functions/other", "api/algorithm_functions/shortest_paths", "api/algorithm_functions/traversal", "api/algorithm_functions/tree", "api/converters", "api/custom_return_types", "api/exceptions", "api/generators", "api/graph_classes", "api/index", "api/layout_functions", "api/pydigraph_api_functions", "api/pygraph_api_functions", "api/random_graph_generator_functions", "api/serialization", "apiref/rustworkx.AllPairsPathLengthMapping", "apiref/rustworkx.AllPairsPathLengthMapping.items", "apiref/rustworkx.AllPairsPathLengthMapping.keys", "apiref/rustworkx.AllPairsPathLengthMapping.values", "apiref/rustworkx.AllPairsPathMapping", "apiref/rustworkx.AllPairsPathMapping.items", "apiref/rustworkx.AllPairsPathMapping.keys", "apiref/rustworkx.AllPairsPathMapping.values", "apiref/rustworkx.BFSPredecessors", "apiref/rustworkx.BFSSuccessors", "apiref/rustworkx.BiconnectedComponents", "apiref/rustworkx.BiconnectedComponents.items", "apiref/rustworkx.BiconnectedComponents.keys", "apiref/rustworkx.BiconnectedComponents.values", "apiref/rustworkx.CentralityMapping", "apiref/rustworkx.CentralityMapping.items", "apiref/rustworkx.CentralityMapping.keys", "apiref/rustworkx.CentralityMapping.values", "apiref/rustworkx.Chains", "apiref/rustworkx.ColoringStrategy", "apiref/rustworkx.DAGHasCycle", "apiref/rustworkx.DAGWouldCycle", "apiref/rustworkx.EdgeCentralityMapping", "apiref/rustworkx.EdgeCentralityMapping.items", "apiref/rustworkx.EdgeCentralityMapping.keys", "apiref/rustworkx.EdgeCentralityMapping.values", "apiref/rustworkx.EdgeIndexMap", "apiref/rustworkx.EdgeIndexMap.items", "apiref/rustworkx.EdgeIndexMap.keys", "apiref/rustworkx.EdgeIndexMap.values", "apiref/rustworkx.EdgeIndices", "apiref/rustworkx.EdgeList", "apiref/rustworkx.GraphNotBipartite", "apiref/rustworkx.IndexPartitionBlock", "apiref/rustworkx.InvalidMapping", "apiref/rustworkx.InvalidNode", "apiref/rustworkx.JSONSerializationError", "apiref/rustworkx.NegativeCycle", "apiref/rustworkx.NoEdgeBetweenNodes", "apiref/rustworkx.NoPathFound", "apiref/rustworkx.NoSuitableNeighbors", "apiref/rustworkx.NodeIndices", "apiref/rustworkx.NodeMap", "apiref/rustworkx.NodeMap.items", "apiref/rustworkx.NodeMap.keys", "apiref/rustworkx.NodeMap.values", "apiref/rustworkx.NullGraph", "apiref/rustworkx.PathLengthMapping", "apiref/rustworkx.PathLengthMapping.items", "apiref/rustworkx.PathLengthMapping.keys", "apiref/rustworkx.PathLengthMapping.values", "apiref/rustworkx.PathMapping", "apiref/rustworkx.PathMapping.items", "apiref/rustworkx.PathMapping.keys", "apiref/rustworkx.PathMapping.values", "apiref/rustworkx.Pos2DMapping", "apiref/rustworkx.Pos2DMapping.items", "apiref/rustworkx.Pos2DMapping.keys", "apiref/rustworkx.Pos2DMapping.values", "apiref/rustworkx.ProductNodeMap", "apiref/rustworkx.ProductNodeMap.items", "apiref/rustworkx.ProductNodeMap.keys", "apiref/rustworkx.ProductNodeMap.values", "apiref/rustworkx.PyDAG", "apiref/rustworkx.PyDAG.add_child", "apiref/rustworkx.PyDAG.add_edge", "apiref/rustworkx.PyDAG.add_edges_from", "apiref/rustworkx.PyDAG.add_edges_from_no_data", "apiref/rustworkx.PyDAG.add_node", "apiref/rustworkx.PyDAG.add_nodes_from", "apiref/rustworkx.PyDAG.add_parent", "apiref/rustworkx.PyDAG.adj", "apiref/rustworkx.PyDAG.adj_direction", "apiref/rustworkx.PyDAG.clear", "apiref/rustworkx.PyDAG.clear_edges", "apiref/rustworkx.PyDAG.compose", "apiref/rustworkx.PyDAG.contract_nodes", "apiref/rustworkx.PyDAG.copy", "apiref/rustworkx.PyDAG.edge_index_map", "apiref/rustworkx.PyDAG.edge_indices", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints", "apiref/rustworkx.PyDAG.edge_list", "apiref/rustworkx.PyDAG.edge_subgraph", "apiref/rustworkx.PyDAG.edges", "apiref/rustworkx.PyDAG.extend_from_edge_list", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list", "apiref/rustworkx.PyDAG.filter_edges", "apiref/rustworkx.PyDAG.filter_nodes", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge", "apiref/rustworkx.PyDAG.find_node_by_weight", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge", "apiref/rustworkx.PyDAG.find_predecessors_by_edge", "apiref/rustworkx.PyDAG.find_successor_node_by_edge", "apiref/rustworkx.PyDAG.find_successors_by_edge", "apiref/rustworkx.PyDAG.from_adjacency_matrix", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix", "apiref/rustworkx.PyDAG.get_all_edge_data", "apiref/rustworkx.PyDAG.get_edge_data", "apiref/rustworkx.PyDAG.get_edge_data_by_index", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index", "apiref/rustworkx.PyDAG.get_node_data", "apiref/rustworkx.PyDAG.has_edge", "apiref/rustworkx.PyDAG.has_node", "apiref/rustworkx.PyDAG.has_parallel_edges", "apiref/rustworkx.PyDAG.in_degree", "apiref/rustworkx.PyDAG.in_edge_indices", "apiref/rustworkx.PyDAG.in_edges", "apiref/rustworkx.PyDAG.incident_edge_index_map", "apiref/rustworkx.PyDAG.incident_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDAG.insert_node_on_out_edges", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDAG.is_symmetric", "apiref/rustworkx.PyDAG.make_symmetric", "apiref/rustworkx.PyDAG.merge_nodes", "apiref/rustworkx.PyDAG.neighbors", "apiref/rustworkx.PyDAG.neighbors_undirected", "apiref/rustworkx.PyDAG.node_indexes", "apiref/rustworkx.PyDAG.node_indices", "apiref/rustworkx.PyDAG.nodes", "apiref/rustworkx.PyDAG.num_edges", "apiref/rustworkx.PyDAG.num_nodes", "apiref/rustworkx.PyDAG.out_degree", "apiref/rustworkx.PyDAG.out_edge_indices", "apiref/rustworkx.PyDAG.out_edges", "apiref/rustworkx.PyDAG.predecessor_indices", "apiref/rustworkx.PyDAG.predecessors", "apiref/rustworkx.PyDAG.read_edge_list", "apiref/rustworkx.PyDAG.remove_edge", "apiref/rustworkx.PyDAG.remove_edge_from_index", "apiref/rustworkx.PyDAG.remove_edges_from", "apiref/rustworkx.PyDAG.remove_node", "apiref/rustworkx.PyDAG.remove_node_retain_edges", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_id", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_key", "apiref/rustworkx.PyDAG.remove_nodes_from", "apiref/rustworkx.PyDAG.reverse", "apiref/rustworkx.PyDAG.subgraph", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph", "apiref/rustworkx.PyDAG.successor_indices", "apiref/rustworkx.PyDAG.successors", "apiref/rustworkx.PyDAG.to_dot", "apiref/rustworkx.PyDAG.to_undirected", "apiref/rustworkx.PyDAG.update_edge", "apiref/rustworkx.PyDAG.update_edge_by_index", "apiref/rustworkx.PyDAG.weighted_edge_list", "apiref/rustworkx.PyDAG.write_edge_list", "apiref/rustworkx.PyDiGraph", "apiref/rustworkx.PyDiGraph.add_child", "apiref/rustworkx.PyDiGraph.add_edge", "apiref/rustworkx.PyDiGraph.add_edges_from", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data", "apiref/rustworkx.PyDiGraph.add_node", "apiref/rustworkx.PyDiGraph.add_nodes_from", "apiref/rustworkx.PyDiGraph.add_parent", "apiref/rustworkx.PyDiGraph.adj", "apiref/rustworkx.PyDiGraph.adj_direction", "apiref/rustworkx.PyDiGraph.clear", "apiref/rustworkx.PyDiGraph.clear_edges", "apiref/rustworkx.PyDiGraph.compose", "apiref/rustworkx.PyDiGraph.contract_nodes", "apiref/rustworkx.PyDiGraph.copy", "apiref/rustworkx.PyDiGraph.edge_index_map", "apiref/rustworkx.PyDiGraph.edge_indices", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyDiGraph.edge_list", "apiref/rustworkx.PyDiGraph.edge_subgraph", "apiref/rustworkx.PyDiGraph.edges", "apiref/rustworkx.PyDiGraph.extend_from_edge_list", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyDiGraph.filter_edges", "apiref/rustworkx.PyDiGraph.filter_nodes", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge", "apiref/rustworkx.PyDiGraph.find_node_by_weight", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge", "apiref/rustworkx.PyDiGraph.find_successor_node_by_edge", "apiref/rustworkx.PyDiGraph.find_successors_by_edge", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyDiGraph.get_all_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyDiGraph.get_node_data", "apiref/rustworkx.PyDiGraph.has_edge", "apiref/rustworkx.PyDiGraph.has_node", "apiref/rustworkx.PyDiGraph.has_parallel_edges", "apiref/rustworkx.PyDiGraph.in_degree", "apiref/rustworkx.PyDiGraph.in_edge_indices", "apiref/rustworkx.PyDiGraph.in_edges", "apiref/rustworkx.PyDiGraph.incident_edge_index_map", "apiref/rustworkx.PyDiGraph.incident_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDiGraph.is_symmetric", "apiref/rustworkx.PyDiGraph.make_symmetric", "apiref/rustworkx.PyDiGraph.merge_nodes", "apiref/rustworkx.PyDiGraph.neighbors", "apiref/rustworkx.PyDiGraph.neighbors_undirected", "apiref/rustworkx.PyDiGraph.node_indexes", "apiref/rustworkx.PyDiGraph.node_indices", "apiref/rustworkx.PyDiGraph.nodes", "apiref/rustworkx.PyDiGraph.num_edges", "apiref/rustworkx.PyDiGraph.num_nodes", "apiref/rustworkx.PyDiGraph.out_degree", "apiref/rustworkx.PyDiGraph.out_edge_indices", "apiref/rustworkx.PyDiGraph.out_edges", "apiref/rustworkx.PyDiGraph.predecessor_indices", "apiref/rustworkx.PyDiGraph.predecessors", "apiref/rustworkx.PyDiGraph.read_edge_list", "apiref/rustworkx.PyDiGraph.remove_edge", "apiref/rustworkx.PyDiGraph.remove_edge_from_index", "apiref/rustworkx.PyDiGraph.remove_edges_from", "apiref/rustworkx.PyDiGraph.remove_node", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_id", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_key", "apiref/rustworkx.PyDiGraph.remove_nodes_from", "apiref/rustworkx.PyDiGraph.reverse", "apiref/rustworkx.PyDiGraph.subgraph", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyDiGraph.successor_indices", "apiref/rustworkx.PyDiGraph.successors", "apiref/rustworkx.PyDiGraph.to_dot", "apiref/rustworkx.PyDiGraph.to_undirected", "apiref/rustworkx.PyDiGraph.update_edge", "apiref/rustworkx.PyDiGraph.update_edge_by_index", "apiref/rustworkx.PyDiGraph.weighted_edge_list", "apiref/rustworkx.PyDiGraph.write_edge_list", "apiref/rustworkx.PyGraph", "apiref/rustworkx.PyGraph.add_edge", "apiref/rustworkx.PyGraph.add_edges_from", "apiref/rustworkx.PyGraph.add_edges_from_no_data", "apiref/rustworkx.PyGraph.add_node", "apiref/rustworkx.PyGraph.add_nodes_from", "apiref/rustworkx.PyGraph.adj", "apiref/rustworkx.PyGraph.clear", "apiref/rustworkx.PyGraph.clear_edges", "apiref/rustworkx.PyGraph.compose", "apiref/rustworkx.PyGraph.contract_nodes", "apiref/rustworkx.PyGraph.copy", "apiref/rustworkx.PyGraph.degree", "apiref/rustworkx.PyGraph.edge_index_map", "apiref/rustworkx.PyGraph.edge_indices", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyGraph.edge_list", "apiref/rustworkx.PyGraph.edge_subgraph", "apiref/rustworkx.PyGraph.edges", "apiref/rustworkx.PyGraph.extend_from_edge_list", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyGraph.filter_edges", "apiref/rustworkx.PyGraph.filter_nodes", "apiref/rustworkx.PyGraph.find_node_by_weight", "apiref/rustworkx.PyGraph.from_adjacency_matrix", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyGraph.get_all_edge_data", "apiref/rustworkx.PyGraph.get_edge_data", "apiref/rustworkx.PyGraph.get_edge_data_by_index", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyGraph.get_node_data", "apiref/rustworkx.PyGraph.has_edge", "apiref/rustworkx.PyGraph.has_node", "apiref/rustworkx.PyGraph.has_parallel_edges", "apiref/rustworkx.PyGraph.in_edge_indices", "apiref/rustworkx.PyGraph.in_edges", "apiref/rustworkx.PyGraph.incident_edge_index_map", "apiref/rustworkx.PyGraph.incident_edges", "apiref/rustworkx.PyGraph.neighbors", "apiref/rustworkx.PyGraph.node_indexes", "apiref/rustworkx.PyGraph.node_indices", "apiref/rustworkx.PyGraph.nodes", "apiref/rustworkx.PyGraph.num_edges", "apiref/rustworkx.PyGraph.num_nodes", "apiref/rustworkx.PyGraph.out_edge_indices", "apiref/rustworkx.PyGraph.out_edges", "apiref/rustworkx.PyGraph.read_edge_list", "apiref/rustworkx.PyGraph.remove_edge", "apiref/rustworkx.PyGraph.remove_edge_from_index", "apiref/rustworkx.PyGraph.remove_edges_from", "apiref/rustworkx.PyGraph.remove_node", "apiref/rustworkx.PyGraph.remove_nodes_from", "apiref/rustworkx.PyGraph.subgraph", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyGraph.to_directed", "apiref/rustworkx.PyGraph.to_dot", "apiref/rustworkx.PyGraph.update_edge", "apiref/rustworkx.PyGraph.update_edge_by_index", "apiref/rustworkx.PyGraph.weighted_edge_list", "apiref/rustworkx.PyGraph.write_edge_list", "apiref/rustworkx.RelationalCoarsestPartition", "apiref/rustworkx.TopologicalSorter", "apiref/rustworkx.TopologicalSorter.done", "apiref/rustworkx.TopologicalSorter.get_ready", "apiref/rustworkx.TopologicalSorter.is_active", "apiref/rustworkx.WeightedEdgeList", "apiref/rustworkx.adjacency_matrix", "apiref/rustworkx.all_pairs_all_simple_paths", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.all_pairs_dijkstra_path_lengths", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.all_shortest_paths", "apiref/rustworkx.all_simple_paths", "apiref/rustworkx.ancestors", "apiref/rustworkx.articulation_points", "apiref/rustworkx.astar_shortest_path", "apiref/rustworkx.barabasi_albert_graph", "apiref/rustworkx.bellman_ford_shortest_path_lengths", "apiref/rustworkx.bellman_ford_shortest_paths", "apiref/rustworkx.betweenness_centrality", "apiref/rustworkx.bfs_predecessors", "apiref/rustworkx.bfs_search", "apiref/rustworkx.bfs_successors", "apiref/rustworkx.biconnected_components", "apiref/rustworkx.bipartite_layout", "apiref/rustworkx.bridges", "apiref/rustworkx.cartesian_product", "apiref/rustworkx.chain_decomposition", "apiref/rustworkx.circular_layout", "apiref/rustworkx.closeness_centrality", "apiref/rustworkx.collect_bicolor_runs", "apiref/rustworkx.collect_runs", "apiref/rustworkx.complement", "apiref/rustworkx.connected_components", "apiref/rustworkx.connected_subgraphs", "apiref/rustworkx.core_number", "apiref/rustworkx.cycle_basis", "apiref/rustworkx.dag_longest_path", "apiref/rustworkx.dag_longest_path_length", "apiref/rustworkx.dag_weighted_longest_path", "apiref/rustworkx.dag_weighted_longest_path_length", "apiref/rustworkx.degree_centrality", "apiref/rustworkx.descendants", "apiref/rustworkx.dfs_edges", "apiref/rustworkx.dfs_search", "apiref/rustworkx.digraph_adjacency_matrix", "apiref/rustworkx.digraph_all_pairs_all_simple_paths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.digraph_all_shortest_paths", "apiref/rustworkx.digraph_all_simple_paths", "apiref/rustworkx.digraph_astar_shortest_path", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.digraph_betweenness_centrality", "apiref/rustworkx.digraph_bfs_search", "apiref/rustworkx.digraph_bipartite_layout", "apiref/rustworkx.digraph_cartesian_product", "apiref/rustworkx.digraph_circular_layout", "apiref/rustworkx.digraph_closeness_centrality", "apiref/rustworkx.digraph_complement", "apiref/rustworkx.digraph_core_number", "apiref/rustworkx.digraph_dfs_edges", "apiref/rustworkx.digraph_dfs_search", "apiref/rustworkx.digraph_dijkstra_search", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths", "apiref/rustworkx.digraph_dijkstra_shortest_paths", "apiref/rustworkx.digraph_distance_matrix", "apiref/rustworkx.digraph_edge_betweenness_centrality", "apiref/rustworkx.digraph_eigenvector_centrality", "apiref/rustworkx.digraph_find_cycle", "apiref/rustworkx.digraph_floyd_warshall", "apiref/rustworkx.digraph_floyd_warshall_numpy", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance", "apiref/rustworkx.digraph_is_isomorphic", "apiref/rustworkx.digraph_is_subgraph_isomorphic", "apiref/rustworkx.digraph_k_shortest_path_lengths", "apiref/rustworkx.digraph_katz_centrality", "apiref/rustworkx.digraph_longest_simple_path", "apiref/rustworkx.digraph_maximum_bisimulation", "apiref/rustworkx.digraph_newman_weighted_closeness_centrality", "apiref/rustworkx.digraph_node_link_json", "apiref/rustworkx.digraph_num_shortest_paths_unweighted", "apiref/rustworkx.digraph_random_layout", "apiref/rustworkx.digraph_shell_layout", "apiref/rustworkx.digraph_spiral_layout", "apiref/rustworkx.digraph_spring_layout", "apiref/rustworkx.digraph_tensor_product", "apiref/rustworkx.digraph_transitivity", "apiref/rustworkx.digraph_union", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length", "apiref/rustworkx.digraph_vf2_mapping", "apiref/rustworkx.dijkstra_search", "apiref/rustworkx.dijkstra_shortest_path_lengths", "apiref/rustworkx.dijkstra_shortest_paths", "apiref/rustworkx.directed_barabasi_albert_graph", "apiref/rustworkx.directed_gnm_random_graph", "apiref/rustworkx.directed_gnp_random_graph", "apiref/rustworkx.directed_random_bipartite_graph", "apiref/rustworkx.directed_sbm_random_graph", "apiref/rustworkx.distance_matrix", "apiref/rustworkx.dominance_frontiers", "apiref/rustworkx.edge_betweenness_centrality", "apiref/rustworkx.eigenvector_centrality", "apiref/rustworkx.find_negative_cycle", "apiref/rustworkx.floyd_warshall", "apiref/rustworkx.floyd_warshall_numpy", "apiref/rustworkx.floyd_warshall_successor_and_distance", "apiref/rustworkx.from_node_link_json_file", "apiref/rustworkx.generators.barbell_graph", "apiref/rustworkx.generators.binomial_tree_graph", "apiref/rustworkx.generators.complete_graph", "apiref/rustworkx.generators.cycle_graph", "apiref/rustworkx.generators.directed_binomial_tree_graph", "apiref/rustworkx.generators.directed_complete_graph", "apiref/rustworkx.generators.directed_cycle_graph", "apiref/rustworkx.generators.directed_empty_graph", "apiref/rustworkx.generators.directed_grid_graph", "apiref/rustworkx.generators.directed_heavy_hex_graph", "apiref/rustworkx.generators.directed_heavy_square_graph", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph", "apiref/rustworkx.generators.directed_mesh_graph", "apiref/rustworkx.generators.directed_path_graph", "apiref/rustworkx.generators.directed_star_graph", "apiref/rustworkx.generators.dorogovtsev_goltsev_mendes_graph", "apiref/rustworkx.generators.empty_graph", "apiref/rustworkx.generators.full_rary_tree", "apiref/rustworkx.generators.generalized_petersen_graph", "apiref/rustworkx.generators.grid_graph", "apiref/rustworkx.generators.heavy_hex_graph", "apiref/rustworkx.generators.heavy_square_graph", "apiref/rustworkx.generators.hexagonal_lattice_graph", "apiref/rustworkx.generators.karate_club_graph", "apiref/rustworkx.generators.lollipop_graph", "apiref/rustworkx.generators.mesh_graph", "apiref/rustworkx.generators.path_graph", "apiref/rustworkx.generators.star_graph", "apiref/rustworkx.graph_adjacency_matrix", "apiref/rustworkx.graph_all_pairs_all_simple_paths", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.graph_all_shortest_paths", "apiref/rustworkx.graph_all_simple_paths", "apiref/rustworkx.graph_astar_shortest_path", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.graph_betweenness_centrality", "apiref/rustworkx.graph_bfs_search", "apiref/rustworkx.graph_bipartite_edge_color", "apiref/rustworkx.graph_bipartite_layout", "apiref/rustworkx.graph_cartesian_product", "apiref/rustworkx.graph_circular_layout", "apiref/rustworkx.graph_closeness_centrality", "apiref/rustworkx.graph_complement", "apiref/rustworkx.graph_core_number", "apiref/rustworkx.graph_dfs_edges", "apiref/rustworkx.graph_dfs_search", "apiref/rustworkx.graph_dijkstra_search", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths", "apiref/rustworkx.graph_dijkstra_shortest_paths", "apiref/rustworkx.graph_distance_matrix", "apiref/rustworkx.graph_edge_betweenness_centrality", "apiref/rustworkx.graph_eigenvector_centrality", "apiref/rustworkx.graph_floyd_warshall", "apiref/rustworkx.graph_floyd_warshall_numpy", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance", "apiref/rustworkx.graph_greedy_color", "apiref/rustworkx.graph_greedy_edge_color", "apiref/rustworkx.graph_is_isomorphic", "apiref/rustworkx.graph_is_subgraph_isomorphic", "apiref/rustworkx.graph_k_shortest_path_lengths", "apiref/rustworkx.graph_katz_centrality", "apiref/rustworkx.graph_line_graph", "apiref/rustworkx.graph_longest_simple_path", "apiref/rustworkx.graph_misra_gries_edge_color", "apiref/rustworkx.graph_newman_weighted_closeness_centrality", "apiref/rustworkx.graph_node_link_json", "apiref/rustworkx.graph_num_shortest_paths_unweighted", "apiref/rustworkx.graph_random_layout", "apiref/rustworkx.graph_shell_layout", "apiref/rustworkx.graph_spiral_layout", "apiref/rustworkx.graph_spring_layout", "apiref/rustworkx.graph_tensor_product", "apiref/rustworkx.graph_token_swapper", "apiref/rustworkx.graph_transitivity", "apiref/rustworkx.graph_union", "apiref/rustworkx.graph_unweighted_average_shortest_path_length", "apiref/rustworkx.graph_vf2_mapping", "apiref/rustworkx.has_path", "apiref/rustworkx.hits", "apiref/rustworkx.hyperbolic_random_graph", "apiref/rustworkx.immediate_dominators", "apiref/rustworkx.in_degree_centrality", "apiref/rustworkx.is_bipartite", "apiref/rustworkx.is_connected", "apiref/rustworkx.is_directed_acyclic_graph", "apiref/rustworkx.is_isomorphic", "apiref/rustworkx.is_isomorphic_node_match", "apiref/rustworkx.is_matching", "apiref/rustworkx.is_maximal_matching", "apiref/rustworkx.is_planar", "apiref/rustworkx.is_strongly_connected", "apiref/rustworkx.is_subgraph_isomorphic", "apiref/rustworkx.is_weakly_connected", "apiref/rustworkx.isolates", "apiref/rustworkx.k_shortest_path_lengths", "apiref/rustworkx.katz_centrality", "apiref/rustworkx.layers", "apiref/rustworkx.lexicographical_topological_sort", "apiref/rustworkx.local_complement", "apiref/rustworkx.longest_simple_path", "apiref/rustworkx.max_weight_matching", "apiref/rustworkx.metric_closure", "apiref/rustworkx.minimum_spanning_edges", "apiref/rustworkx.minimum_spanning_tree", "apiref/rustworkx.negative_edge_cycle", "apiref/rustworkx.networkx_converter", "apiref/rustworkx.newman_weighted_closeness_centrality", "apiref/rustworkx.node_connected_component", "apiref/rustworkx.node_link_json", "apiref/rustworkx.num_shortest_paths_unweighted", "apiref/rustworkx.number_connected_components", "apiref/rustworkx.number_strongly_connected_components", "apiref/rustworkx.number_weakly_connected_components", "apiref/rustworkx.out_degree_centrality", "apiref/rustworkx.pagerank", "apiref/rustworkx.parse_node_link_json", "apiref/rustworkx.random_geometric_graph", "apiref/rustworkx.random_layout", "apiref/rustworkx.read_graphml", "apiref/rustworkx.shell_layout", "apiref/rustworkx.simple_cycles", "apiref/rustworkx.spiral_layout", "apiref/rustworkx.spring_layout", "apiref/rustworkx.steiner_tree", "apiref/rustworkx.stoer_wagner_min_cut", "apiref/rustworkx.strongly_connected_components", "apiref/rustworkx.topological_generations", "apiref/rustworkx.topological_sort", "apiref/rustworkx.transitive_reduction", "apiref/rustworkx.transitivity", "apiref/rustworkx.two_color", "apiref/rustworkx.undirected_gnm_random_graph", "apiref/rustworkx.undirected_gnp_random_graph", "apiref/rustworkx.undirected_random_bipartite_graph", "apiref/rustworkx.undirected_sbm_random_graph", "apiref/rustworkx.union", "apiref/rustworkx.unweighted_average_shortest_path_length", "apiref/rustworkx.vf2_mapping", "apiref/rustworkx.visit.BFSVisitor", "apiref/rustworkx.visit.BFSVisitor.black_target_edge", "apiref/rustworkx.visit.BFSVisitor.discover_vertex", "apiref/rustworkx.visit.BFSVisitor.finish_vertex", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge", "apiref/rustworkx.visit.BFSVisitor.tree_edge", "apiref/rustworkx.visit.DFSVisitor", "apiref/rustworkx.visit.DFSVisitor.back_edge", "apiref/rustworkx.visit.DFSVisitor.discover_vertex", "apiref/rustworkx.visit.DFSVisitor.finish_vertex", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge", "apiref/rustworkx.visit.DFSVisitor.tree_edge", "apiref/rustworkx.visit.DijkstraVisitor", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex", "apiref/rustworkx.visit.PruneSearch", "apiref/rustworkx.visit.StopSearch", "apiref/rustworkx.visualization.graphviz_draw", "apiref/rustworkx.visualization.mpl_draw", "apiref/rustworkx.weakly_connected_components", "benchmarks", "index", "install", "networkx", "release_notes", "tutorial/betweenness_centrality", "tutorial/dags", "tutorial/index", "tutorial/introduction", "visualization"], "filenames": ["CONTRIBUTING.md", "api/algorithm_functions/centrality.rst", "api/algorithm_functions/coloring.rst", "api/algorithm_functions/connectivity_and_cycles.rst", "api/algorithm_functions/dag_algorithms.rst", "api/algorithm_functions/dominance.rst", "api/algorithm_functions/graph_operations.rst", "api/algorithm_functions/index.rst", "api/algorithm_functions/isomorphism.rst", "api/algorithm_functions/link_analysis.rst", "api/algorithm_functions/matching.rst", "api/algorithm_functions/other.rst", "api/algorithm_functions/shortest_paths.rst", "api/algorithm_functions/traversal.rst", "api/algorithm_functions/tree.rst", "api/converters.rst", "api/custom_return_types.rst", "api/exceptions.rst", "api/generators.rst", "api/graph_classes.rst", "api/index.rst", "api/layout_functions.rst", "api/pydigraph_api_functions.rst", "api/pygraph_api_functions.rst", "api/random_graph_generator_functions.rst", "api/serialization.rst", "apiref/rustworkx.AllPairsPathLengthMapping.rst", "apiref/rustworkx.AllPairsPathLengthMapping.items.rst", "apiref/rustworkx.AllPairsPathLengthMapping.keys.rst", "apiref/rustworkx.AllPairsPathLengthMapping.values.rst", "apiref/rustworkx.AllPairsPathMapping.rst", "apiref/rustworkx.AllPairsPathMapping.items.rst", "apiref/rustworkx.AllPairsPathMapping.keys.rst", "apiref/rustworkx.AllPairsPathMapping.values.rst", "apiref/rustworkx.BFSPredecessors.rst", "apiref/rustworkx.BFSSuccessors.rst", "apiref/rustworkx.BiconnectedComponents.rst", "apiref/rustworkx.BiconnectedComponents.items.rst", "apiref/rustworkx.BiconnectedComponents.keys.rst", "apiref/rustworkx.BiconnectedComponents.values.rst", "apiref/rustworkx.CentralityMapping.rst", "apiref/rustworkx.CentralityMapping.items.rst", "apiref/rustworkx.CentralityMapping.keys.rst", "apiref/rustworkx.CentralityMapping.values.rst", "apiref/rustworkx.Chains.rst", "apiref/rustworkx.ColoringStrategy.rst", "apiref/rustworkx.DAGHasCycle.rst", "apiref/rustworkx.DAGWouldCycle.rst", "apiref/rustworkx.EdgeCentralityMapping.rst", "apiref/rustworkx.EdgeCentralityMapping.items.rst", "apiref/rustworkx.EdgeCentralityMapping.keys.rst", "apiref/rustworkx.EdgeCentralityMapping.values.rst", "apiref/rustworkx.EdgeIndexMap.rst", "apiref/rustworkx.EdgeIndexMap.items.rst", "apiref/rustworkx.EdgeIndexMap.keys.rst", "apiref/rustworkx.EdgeIndexMap.values.rst", "apiref/rustworkx.EdgeIndices.rst", "apiref/rustworkx.EdgeList.rst", "apiref/rustworkx.GraphNotBipartite.rst", "apiref/rustworkx.IndexPartitionBlock.rst", "apiref/rustworkx.InvalidMapping.rst", "apiref/rustworkx.InvalidNode.rst", "apiref/rustworkx.JSONSerializationError.rst", "apiref/rustworkx.NegativeCycle.rst", "apiref/rustworkx.NoEdgeBetweenNodes.rst", "apiref/rustworkx.NoPathFound.rst", "apiref/rustworkx.NoSuitableNeighbors.rst", "apiref/rustworkx.NodeIndices.rst", "apiref/rustworkx.NodeMap.rst", "apiref/rustworkx.NodeMap.items.rst", "apiref/rustworkx.NodeMap.keys.rst", "apiref/rustworkx.NodeMap.values.rst", "apiref/rustworkx.NullGraph.rst", "apiref/rustworkx.PathLengthMapping.rst", "apiref/rustworkx.PathLengthMapping.items.rst", "apiref/rustworkx.PathLengthMapping.keys.rst", "apiref/rustworkx.PathLengthMapping.values.rst", "apiref/rustworkx.PathMapping.rst", "apiref/rustworkx.PathMapping.items.rst", "apiref/rustworkx.PathMapping.keys.rst", "apiref/rustworkx.PathMapping.values.rst", "apiref/rustworkx.Pos2DMapping.rst", "apiref/rustworkx.Pos2DMapping.items.rst", "apiref/rustworkx.Pos2DMapping.keys.rst", "apiref/rustworkx.Pos2DMapping.values.rst", "apiref/rustworkx.ProductNodeMap.rst", "apiref/rustworkx.ProductNodeMap.items.rst", "apiref/rustworkx.ProductNodeMap.keys.rst", "apiref/rustworkx.ProductNodeMap.values.rst", "apiref/rustworkx.PyDAG.rst", "apiref/rustworkx.PyDAG.add_child.rst", "apiref/rustworkx.PyDAG.add_edge.rst", "apiref/rustworkx.PyDAG.add_edges_from.rst", "apiref/rustworkx.PyDAG.add_edges_from_no_data.rst", "apiref/rustworkx.PyDAG.add_node.rst", "apiref/rustworkx.PyDAG.add_nodes_from.rst", "apiref/rustworkx.PyDAG.add_parent.rst", "apiref/rustworkx.PyDAG.adj.rst", "apiref/rustworkx.PyDAG.adj_direction.rst", "apiref/rustworkx.PyDAG.clear.rst", "apiref/rustworkx.PyDAG.clear_edges.rst", "apiref/rustworkx.PyDAG.compose.rst", "apiref/rustworkx.PyDAG.contract_nodes.rst", "apiref/rustworkx.PyDAG.copy.rst", "apiref/rustworkx.PyDAG.edge_index_map.rst", "apiref/rustworkx.PyDAG.edge_indices.rst", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDAG.edge_list.rst", "apiref/rustworkx.PyDAG.edge_subgraph.rst", "apiref/rustworkx.PyDAG.edges.rst", "apiref/rustworkx.PyDAG.extend_from_edge_list.rst", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDAG.filter_edges.rst", "apiref/rustworkx.PyDAG.filter_nodes.rst", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_node_by_weight.rst", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDAG.find_successor_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_successors_by_edge.rst", "apiref/rustworkx.PyDAG.from_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.get_all_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data_by_index.rst", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDAG.get_node_data.rst", "apiref/rustworkx.PyDAG.has_edge.rst", "apiref/rustworkx.PyDAG.has_node.rst", "apiref/rustworkx.PyDAG.has_parallel_edges.rst", "apiref/rustworkx.PyDAG.in_degree.rst", "apiref/rustworkx.PyDAG.in_edge_indices.rst", "apiref/rustworkx.PyDAG.in_edges.rst", "apiref/rustworkx.PyDAG.incident_edge_index_map.rst", "apiref/rustworkx.PyDAG.incident_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDAG.is_symmetric.rst", "apiref/rustworkx.PyDAG.make_symmetric.rst", "apiref/rustworkx.PyDAG.merge_nodes.rst", "apiref/rustworkx.PyDAG.neighbors.rst", "apiref/rustworkx.PyDAG.neighbors_undirected.rst", "apiref/rustworkx.PyDAG.node_indexes.rst", "apiref/rustworkx.PyDAG.node_indices.rst", "apiref/rustworkx.PyDAG.nodes.rst", "apiref/rustworkx.PyDAG.num_edges.rst", "apiref/rustworkx.PyDAG.num_nodes.rst", "apiref/rustworkx.PyDAG.out_degree.rst", "apiref/rustworkx.PyDAG.out_edge_indices.rst", "apiref/rustworkx.PyDAG.out_edges.rst", "apiref/rustworkx.PyDAG.predecessor_indices.rst", "apiref/rustworkx.PyDAG.predecessors.rst", "apiref/rustworkx.PyDAG.read_edge_list.rst", "apiref/rustworkx.PyDAG.remove_edge.rst", "apiref/rustworkx.PyDAG.remove_edge_from_index.rst", "apiref/rustworkx.PyDAG.remove_edges_from.rst", "apiref/rustworkx.PyDAG.remove_node.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_id.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_key.rst", "apiref/rustworkx.PyDAG.remove_nodes_from.rst", "apiref/rustworkx.PyDAG.reverse.rst", "apiref/rustworkx.PyDAG.subgraph.rst", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDAG.successor_indices.rst", "apiref/rustworkx.PyDAG.successors.rst", "apiref/rustworkx.PyDAG.to_dot.rst", "apiref/rustworkx.PyDAG.to_undirected.rst", "apiref/rustworkx.PyDAG.update_edge.rst", "apiref/rustworkx.PyDAG.update_edge_by_index.rst", "apiref/rustworkx.PyDAG.weighted_edge_list.rst", "apiref/rustworkx.PyDAG.write_edge_list.rst", "apiref/rustworkx.PyDiGraph.rst", "apiref/rustworkx.PyDiGraph.add_child.rst", "apiref/rustworkx.PyDiGraph.add_edge.rst", "apiref/rustworkx.PyDiGraph.add_edges_from.rst", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyDiGraph.add_node.rst", "apiref/rustworkx.PyDiGraph.add_nodes_from.rst", "apiref/rustworkx.PyDiGraph.add_parent.rst", "apiref/rustworkx.PyDiGraph.adj.rst", "apiref/rustworkx.PyDiGraph.adj_direction.rst", "apiref/rustworkx.PyDiGraph.clear.rst", "apiref/rustworkx.PyDiGraph.clear_edges.rst", "apiref/rustworkx.PyDiGraph.compose.rst", "apiref/rustworkx.PyDiGraph.contract_nodes.rst", "apiref/rustworkx.PyDiGraph.copy.rst", "apiref/rustworkx.PyDiGraph.edge_index_map.rst", "apiref/rustworkx.PyDiGraph.edge_indices.rst", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDiGraph.edge_list.rst", "apiref/rustworkx.PyDiGraph.edge_subgraph.rst", "apiref/rustworkx.PyDiGraph.edges.rst", "apiref/rustworkx.PyDiGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.filter_edges.rst", "apiref/rustworkx.PyDiGraph.filter_nodes.rst", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_node_by_weight.rst", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_successor_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_successors_by_edge.rst", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.get_all_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDiGraph.get_node_data.rst", "apiref/rustworkx.PyDiGraph.has_edge.rst", "apiref/rustworkx.PyDiGraph.has_node.rst", "apiref/rustworkx.PyDiGraph.has_parallel_edges.rst", "apiref/rustworkx.PyDiGraph.in_degree.rst", "apiref/rustworkx.PyDiGraph.in_edge_indices.rst", "apiref/rustworkx.PyDiGraph.in_edges.rst", "apiref/rustworkx.PyDiGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyDiGraph.incident_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.is_symmetric.rst", "apiref/rustworkx.PyDiGraph.make_symmetric.rst", "apiref/rustworkx.PyDiGraph.merge_nodes.rst", "apiref/rustworkx.PyDiGraph.neighbors.rst", "apiref/rustworkx.PyDiGraph.neighbors_undirected.rst", "apiref/rustworkx.PyDiGraph.node_indexes.rst", "apiref/rustworkx.PyDiGraph.node_indices.rst", "apiref/rustworkx.PyDiGraph.nodes.rst", "apiref/rustworkx.PyDiGraph.num_edges.rst", "apiref/rustworkx.PyDiGraph.num_nodes.rst", "apiref/rustworkx.PyDiGraph.out_degree.rst", "apiref/rustworkx.PyDiGraph.out_edge_indices.rst", "apiref/rustworkx.PyDiGraph.out_edges.rst", "apiref/rustworkx.PyDiGraph.predecessor_indices.rst", "apiref/rustworkx.PyDiGraph.predecessors.rst", "apiref/rustworkx.PyDiGraph.read_edge_list.rst", "apiref/rustworkx.PyDiGraph.remove_edge.rst", "apiref/rustworkx.PyDiGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyDiGraph.remove_edges_from.rst", "apiref/rustworkx.PyDiGraph.remove_node.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_id.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_key.rst", "apiref/rustworkx.PyDiGraph.remove_nodes_from.rst", "apiref/rustworkx.PyDiGraph.reverse.rst", "apiref/rustworkx.PyDiGraph.subgraph.rst", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDiGraph.successor_indices.rst", "apiref/rustworkx.PyDiGraph.successors.rst", "apiref/rustworkx.PyDiGraph.to_dot.rst", "apiref/rustworkx.PyDiGraph.to_undirected.rst", "apiref/rustworkx.PyDiGraph.update_edge.rst", "apiref/rustworkx.PyDiGraph.update_edge_by_index.rst", "apiref/rustworkx.PyDiGraph.weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.write_edge_list.rst", "apiref/rustworkx.PyGraph.rst", "apiref/rustworkx.PyGraph.add_edge.rst", "apiref/rustworkx.PyGraph.add_edges_from.rst", "apiref/rustworkx.PyGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyGraph.add_node.rst", "apiref/rustworkx.PyGraph.add_nodes_from.rst", "apiref/rustworkx.PyGraph.adj.rst", "apiref/rustworkx.PyGraph.clear.rst", "apiref/rustworkx.PyGraph.clear_edges.rst", "apiref/rustworkx.PyGraph.compose.rst", "apiref/rustworkx.PyGraph.contract_nodes.rst", "apiref/rustworkx.PyGraph.copy.rst", "apiref/rustworkx.PyGraph.degree.rst", "apiref/rustworkx.PyGraph.edge_index_map.rst", "apiref/rustworkx.PyGraph.edge_indices.rst", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyGraph.edge_list.rst", "apiref/rustworkx.PyGraph.edge_subgraph.rst", "apiref/rustworkx.PyGraph.edges.rst", "apiref/rustworkx.PyGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyGraph.filter_edges.rst", "apiref/rustworkx.PyGraph.filter_nodes.rst", "apiref/rustworkx.PyGraph.find_node_by_weight.rst", "apiref/rustworkx.PyGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.get_all_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyGraph.get_node_data.rst", "apiref/rustworkx.PyGraph.has_edge.rst", "apiref/rustworkx.PyGraph.has_node.rst", "apiref/rustworkx.PyGraph.has_parallel_edges.rst", "apiref/rustworkx.PyGraph.in_edge_indices.rst", "apiref/rustworkx.PyGraph.in_edges.rst", "apiref/rustworkx.PyGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyGraph.incident_edges.rst", "apiref/rustworkx.PyGraph.neighbors.rst", "apiref/rustworkx.PyGraph.node_indexes.rst", "apiref/rustworkx.PyGraph.node_indices.rst", "apiref/rustworkx.PyGraph.nodes.rst", "apiref/rustworkx.PyGraph.num_edges.rst", "apiref/rustworkx.PyGraph.num_nodes.rst", "apiref/rustworkx.PyGraph.out_edge_indices.rst", "apiref/rustworkx.PyGraph.out_edges.rst", "apiref/rustworkx.PyGraph.read_edge_list.rst", "apiref/rustworkx.PyGraph.remove_edge.rst", "apiref/rustworkx.PyGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyGraph.remove_edges_from.rst", "apiref/rustworkx.PyGraph.remove_node.rst", "apiref/rustworkx.PyGraph.remove_nodes_from.rst", "apiref/rustworkx.PyGraph.subgraph.rst", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyGraph.to_directed.rst", "apiref/rustworkx.PyGraph.to_dot.rst", "apiref/rustworkx.PyGraph.update_edge.rst", "apiref/rustworkx.PyGraph.update_edge_by_index.rst", "apiref/rustworkx.PyGraph.weighted_edge_list.rst", "apiref/rustworkx.PyGraph.write_edge_list.rst", "apiref/rustworkx.RelationalCoarsestPartition.rst", "apiref/rustworkx.TopologicalSorter.rst", "apiref/rustworkx.TopologicalSorter.done.rst", "apiref/rustworkx.TopologicalSorter.get_ready.rst", "apiref/rustworkx.TopologicalSorter.is_active.rst", "apiref/rustworkx.WeightedEdgeList.rst", "apiref/rustworkx.adjacency_matrix.rst", "apiref/rustworkx.all_pairs_all_simple_paths.rst", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.all_shortest_paths.rst", "apiref/rustworkx.all_simple_paths.rst", "apiref/rustworkx.ancestors.rst", "apiref/rustworkx.articulation_points.rst", "apiref/rustworkx.astar_shortest_path.rst", "apiref/rustworkx.barabasi_albert_graph.rst", "apiref/rustworkx.bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.bellman_ford_shortest_paths.rst", "apiref/rustworkx.betweenness_centrality.rst", "apiref/rustworkx.bfs_predecessors.rst", "apiref/rustworkx.bfs_search.rst", "apiref/rustworkx.bfs_successors.rst", "apiref/rustworkx.biconnected_components.rst", "apiref/rustworkx.bipartite_layout.rst", "apiref/rustworkx.bridges.rst", "apiref/rustworkx.cartesian_product.rst", "apiref/rustworkx.chain_decomposition.rst", "apiref/rustworkx.circular_layout.rst", "apiref/rustworkx.closeness_centrality.rst", "apiref/rustworkx.collect_bicolor_runs.rst", "apiref/rustworkx.collect_runs.rst", "apiref/rustworkx.complement.rst", "apiref/rustworkx.connected_components.rst", "apiref/rustworkx.connected_subgraphs.rst", "apiref/rustworkx.core_number.rst", "apiref/rustworkx.cycle_basis.rst", "apiref/rustworkx.dag_longest_path.rst", "apiref/rustworkx.dag_longest_path_length.rst", "apiref/rustworkx.dag_weighted_longest_path.rst", "apiref/rustworkx.dag_weighted_longest_path_length.rst", "apiref/rustworkx.degree_centrality.rst", "apiref/rustworkx.descendants.rst", "apiref/rustworkx.dfs_edges.rst", "apiref/rustworkx.dfs_search.rst", "apiref/rustworkx.digraph_adjacency_matrix.rst", "apiref/rustworkx.digraph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_all_shortest_paths.rst", "apiref/rustworkx.digraph_all_simple_paths.rst", "apiref/rustworkx.digraph_astar_shortest_path.rst", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.digraph_betweenness_centrality.rst", "apiref/rustworkx.digraph_bfs_search.rst", "apiref/rustworkx.digraph_bipartite_layout.rst", "apiref/rustworkx.digraph_cartesian_product.rst", "apiref/rustworkx.digraph_circular_layout.rst", "apiref/rustworkx.digraph_closeness_centrality.rst", "apiref/rustworkx.digraph_complement.rst", "apiref/rustworkx.digraph_core_number.rst", "apiref/rustworkx.digraph_dfs_edges.rst", "apiref/rustworkx.digraph_dfs_search.rst", "apiref/rustworkx.digraph_dijkstra_search.rst", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.digraph_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_distance_matrix.rst", "apiref/rustworkx.digraph_edge_betweenness_centrality.rst", "apiref/rustworkx.digraph_eigenvector_centrality.rst", "apiref/rustworkx.digraph_find_cycle.rst", "apiref/rustworkx.digraph_floyd_warshall.rst", "apiref/rustworkx.digraph_floyd_warshall_numpy.rst", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.digraph_is_isomorphic.rst", "apiref/rustworkx.digraph_is_subgraph_isomorphic.rst", "apiref/rustworkx.digraph_k_shortest_path_lengths.rst", "apiref/rustworkx.digraph_katz_centrality.rst", "apiref/rustworkx.digraph_longest_simple_path.rst", "apiref/rustworkx.digraph_maximum_bisimulation.rst", "apiref/rustworkx.digraph_newman_weighted_closeness_centrality.rst", "apiref/rustworkx.digraph_node_link_json.rst", "apiref/rustworkx.digraph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.digraph_random_layout.rst", "apiref/rustworkx.digraph_shell_layout.rst", "apiref/rustworkx.digraph_spiral_layout.rst", "apiref/rustworkx.digraph_spring_layout.rst", "apiref/rustworkx.digraph_tensor_product.rst", "apiref/rustworkx.digraph_transitivity.rst", "apiref/rustworkx.digraph_union.rst", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.digraph_vf2_mapping.rst", "apiref/rustworkx.dijkstra_search.rst", "apiref/rustworkx.dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.dijkstra_shortest_paths.rst", "apiref/rustworkx.directed_barabasi_albert_graph.rst", "apiref/rustworkx.directed_gnm_random_graph.rst", "apiref/rustworkx.directed_gnp_random_graph.rst", "apiref/rustworkx.directed_random_bipartite_graph.rst", "apiref/rustworkx.directed_sbm_random_graph.rst", "apiref/rustworkx.distance_matrix.rst", "apiref/rustworkx.dominance_frontiers.rst", "apiref/rustworkx.edge_betweenness_centrality.rst", "apiref/rustworkx.eigenvector_centrality.rst", "apiref/rustworkx.find_negative_cycle.rst", "apiref/rustworkx.floyd_warshall.rst", "apiref/rustworkx.floyd_warshall_numpy.rst", "apiref/rustworkx.floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.from_node_link_json_file.rst", "apiref/rustworkx.generators.barbell_graph.rst", "apiref/rustworkx.generators.binomial_tree_graph.rst", "apiref/rustworkx.generators.complete_graph.rst", "apiref/rustworkx.generators.cycle_graph.rst", "apiref/rustworkx.generators.directed_binomial_tree_graph.rst", "apiref/rustworkx.generators.directed_complete_graph.rst", "apiref/rustworkx.generators.directed_cycle_graph.rst", "apiref/rustworkx.generators.directed_empty_graph.rst", "apiref/rustworkx.generators.directed_grid_graph.rst", "apiref/rustworkx.generators.directed_heavy_hex_graph.rst", "apiref/rustworkx.generators.directed_heavy_square_graph.rst", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.directed_mesh_graph.rst", "apiref/rustworkx.generators.directed_path_graph.rst", "apiref/rustworkx.generators.directed_star_graph.rst", "apiref/rustworkx.generators.dorogovtsev_goltsev_mendes_graph.rst", "apiref/rustworkx.generators.empty_graph.rst", "apiref/rustworkx.generators.full_rary_tree.rst", "apiref/rustworkx.generators.generalized_petersen_graph.rst", "apiref/rustworkx.generators.grid_graph.rst", "apiref/rustworkx.generators.heavy_hex_graph.rst", "apiref/rustworkx.generators.heavy_square_graph.rst", "apiref/rustworkx.generators.hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.karate_club_graph.rst", "apiref/rustworkx.generators.lollipop_graph.rst", "apiref/rustworkx.generators.mesh_graph.rst", "apiref/rustworkx.generators.path_graph.rst", "apiref/rustworkx.generators.star_graph.rst", "apiref/rustworkx.graph_adjacency_matrix.rst", "apiref/rustworkx.graph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_all_shortest_paths.rst", "apiref/rustworkx.graph_all_simple_paths.rst", "apiref/rustworkx.graph_astar_shortest_path.rst", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.graph_betweenness_centrality.rst", "apiref/rustworkx.graph_bfs_search.rst", "apiref/rustworkx.graph_bipartite_edge_color.rst", "apiref/rustworkx.graph_bipartite_layout.rst", "apiref/rustworkx.graph_cartesian_product.rst", "apiref/rustworkx.graph_circular_layout.rst", "apiref/rustworkx.graph_closeness_centrality.rst", "apiref/rustworkx.graph_complement.rst", "apiref/rustworkx.graph_core_number.rst", "apiref/rustworkx.graph_dfs_edges.rst", "apiref/rustworkx.graph_dfs_search.rst", "apiref/rustworkx.graph_dijkstra_search.rst", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.graph_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_distance_matrix.rst", "apiref/rustworkx.graph_edge_betweenness_centrality.rst", "apiref/rustworkx.graph_eigenvector_centrality.rst", "apiref/rustworkx.graph_floyd_warshall.rst", "apiref/rustworkx.graph_floyd_warshall_numpy.rst", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.graph_greedy_color.rst", "apiref/rustworkx.graph_greedy_edge_color.rst", "apiref/rustworkx.graph_is_isomorphic.rst", "apiref/rustworkx.graph_is_subgraph_isomorphic.rst", "apiref/rustworkx.graph_k_shortest_path_lengths.rst", "apiref/rustworkx.graph_katz_centrality.rst", "apiref/rustworkx.graph_line_graph.rst", "apiref/rustworkx.graph_longest_simple_path.rst", "apiref/rustworkx.graph_misra_gries_edge_color.rst", "apiref/rustworkx.graph_newman_weighted_closeness_centrality.rst", "apiref/rustworkx.graph_node_link_json.rst", "apiref/rustworkx.graph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.graph_random_layout.rst", "apiref/rustworkx.graph_shell_layout.rst", "apiref/rustworkx.graph_spiral_layout.rst", "apiref/rustworkx.graph_spring_layout.rst", "apiref/rustworkx.graph_tensor_product.rst", "apiref/rustworkx.graph_token_swapper.rst", "apiref/rustworkx.graph_transitivity.rst", "apiref/rustworkx.graph_union.rst", "apiref/rustworkx.graph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.graph_vf2_mapping.rst", "apiref/rustworkx.has_path.rst", "apiref/rustworkx.hits.rst", "apiref/rustworkx.hyperbolic_random_graph.rst", "apiref/rustworkx.immediate_dominators.rst", "apiref/rustworkx.in_degree_centrality.rst", "apiref/rustworkx.is_bipartite.rst", "apiref/rustworkx.is_connected.rst", "apiref/rustworkx.is_directed_acyclic_graph.rst", "apiref/rustworkx.is_isomorphic.rst", "apiref/rustworkx.is_isomorphic_node_match.rst", "apiref/rustworkx.is_matching.rst", "apiref/rustworkx.is_maximal_matching.rst", "apiref/rustworkx.is_planar.rst", "apiref/rustworkx.is_strongly_connected.rst", "apiref/rustworkx.is_subgraph_isomorphic.rst", "apiref/rustworkx.is_weakly_connected.rst", "apiref/rustworkx.isolates.rst", "apiref/rustworkx.k_shortest_path_lengths.rst", "apiref/rustworkx.katz_centrality.rst", "apiref/rustworkx.layers.rst", "apiref/rustworkx.lexicographical_topological_sort.rst", "apiref/rustworkx.local_complement.rst", "apiref/rustworkx.longest_simple_path.rst", "apiref/rustworkx.max_weight_matching.rst", "apiref/rustworkx.metric_closure.rst", "apiref/rustworkx.minimum_spanning_edges.rst", "apiref/rustworkx.minimum_spanning_tree.rst", "apiref/rustworkx.negative_edge_cycle.rst", "apiref/rustworkx.networkx_converter.rst", "apiref/rustworkx.newman_weighted_closeness_centrality.rst", "apiref/rustworkx.node_connected_component.rst", "apiref/rustworkx.node_link_json.rst", "apiref/rustworkx.num_shortest_paths_unweighted.rst", "apiref/rustworkx.number_connected_components.rst", "apiref/rustworkx.number_strongly_connected_components.rst", "apiref/rustworkx.number_weakly_connected_components.rst", "apiref/rustworkx.out_degree_centrality.rst", "apiref/rustworkx.pagerank.rst", "apiref/rustworkx.parse_node_link_json.rst", "apiref/rustworkx.random_geometric_graph.rst", "apiref/rustworkx.random_layout.rst", "apiref/rustworkx.read_graphml.rst", "apiref/rustworkx.shell_layout.rst", "apiref/rustworkx.simple_cycles.rst", "apiref/rustworkx.spiral_layout.rst", "apiref/rustworkx.spring_layout.rst", "apiref/rustworkx.steiner_tree.rst", "apiref/rustworkx.stoer_wagner_min_cut.rst", "apiref/rustworkx.strongly_connected_components.rst", "apiref/rustworkx.topological_generations.rst", "apiref/rustworkx.topological_sort.rst", "apiref/rustworkx.transitive_reduction.rst", "apiref/rustworkx.transitivity.rst", "apiref/rustworkx.two_color.rst", "apiref/rustworkx.undirected_gnm_random_graph.rst", "apiref/rustworkx.undirected_gnp_random_graph.rst", "apiref/rustworkx.undirected_random_bipartite_graph.rst", "apiref/rustworkx.undirected_sbm_random_graph.rst", "apiref/rustworkx.union.rst", "apiref/rustworkx.unweighted_average_shortest_path_length.rst", "apiref/rustworkx.vf2_mapping.rst", "apiref/rustworkx.visit.BFSVisitor.rst", "apiref/rustworkx.visit.BFSVisitor.black_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge.rst", "apiref/rustworkx.visit.BFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DFSVisitor.rst", "apiref/rustworkx.visit.DFSVisitor.back_edge.rst", "apiref/rustworkx.visit.DFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge.rst", "apiref/rustworkx.visit.DFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.rst", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex.rst", "apiref/rustworkx.visit.PruneSearch.rst", "apiref/rustworkx.visit.StopSearch.rst", "apiref/rustworkx.visualization.graphviz_draw.rst", "apiref/rustworkx.visualization.mpl_draw.rst", "apiref/rustworkx.weakly_connected_components.rst", "benchmarks.rst", "index.rst", "install.rst", "networkx.rst", "release_notes.rst", "tutorial/betweenness_centrality.rst", "tutorial/dags.rst", "tutorial/index.rst", "tutorial/introduction.rst", "visualization.rst"], "titles": ["Contributing", "Centrality", "Coloring", "Connectivity and Cycles", "DAG Algorithms", "Dominance", "Graph Operations", "Algorithm Functions", "Isomorphism", "Link Analysis", "Matching", "Other Algorithm Functions", "Shortest Paths", "Traversal", "Tree", "Converters", "Custom Return Types", "Exceptions", "Generators", "Graph Classes", "Rustworkx API Reference", "Layout Functions", "API functions for PyDigraph", "API functions for PyGraph", "Random Graph Generator Functions", "Serialization", "AllPairsPathLengthMapping", "rustworkx.AllPairsPathLengthMapping.items", "rustworkx.AllPairsPathLengthMapping.keys", "rustworkx.AllPairsPathLengthMapping.values", "AllPairsPathMapping", "rustworkx.AllPairsPathMapping.items", "rustworkx.AllPairsPathMapping.keys", "rustworkx.AllPairsPathMapping.values", "BFSPredecessors", "BFSSuccessors", "BiconnectedComponents", "rustworkx.BiconnectedComponents.items", "rustworkx.BiconnectedComponents.keys", "rustworkx.BiconnectedComponents.values", "CentralityMapping", "rustworkx.CentralityMapping.items", "rustworkx.CentralityMapping.keys", "rustworkx.CentralityMapping.values", "Chains", "ColoringStrategy", "rustworkx.DAGHasCycle", "rustworkx.DAGWouldCycle", "EdgeCentralityMapping", "rustworkx.EdgeCentralityMapping.items", "rustworkx.EdgeCentralityMapping.keys", "rustworkx.EdgeCentralityMapping.values", "EdgeIndexMap", "rustworkx.EdgeIndexMap.items", "rustworkx.EdgeIndexMap.keys", "rustworkx.EdgeIndexMap.values", "EdgeIndices", "EdgeList", "rustworkx.GraphNotBipartite", "IndexPartitionBlock", "rustworkx.InvalidMapping", "rustworkx.InvalidNode", "rustworkx.JSONSerializationError", "rustworkx.NegativeCycle", "rustworkx.NoEdgeBetweenNodes", "rustworkx.NoPathFound", "rustworkx.NoSuitableNeighbors", "NodeIndices", "NodeMap", "rustworkx.NodeMap.items", "rustworkx.NodeMap.keys", "rustworkx.NodeMap.values", "rustworkx.NullGraph", "PathLengthMapping", "rustworkx.PathLengthMapping.items", "rustworkx.PathLengthMapping.keys", "rustworkx.PathLengthMapping.values", "PathMapping", "rustworkx.PathMapping.items", "rustworkx.PathMapping.keys", "rustworkx.PathMapping.values", "Pos2DMapping", "rustworkx.Pos2DMapping.items", "rustworkx.Pos2DMapping.keys", "rustworkx.Pos2DMapping.values", "ProductNodeMap", "rustworkx.ProductNodeMap.items", "rustworkx.ProductNodeMap.keys", "rustworkx.ProductNodeMap.values", "PyDAG", "rustworkx.PyDAG.add_child", "rustworkx.PyDAG.add_edge", "rustworkx.PyDAG.add_edges_from", "rustworkx.PyDAG.add_edges_from_no_data", "rustworkx.PyDAG.add_node", "rustworkx.PyDAG.add_nodes_from", "rustworkx.PyDAG.add_parent", "rustworkx.PyDAG.adj", "rustworkx.PyDAG.adj_direction", "rustworkx.PyDAG.clear", "rustworkx.PyDAG.clear_edges", "rustworkx.PyDAG.compose", "rustworkx.PyDAG.contract_nodes", "rustworkx.PyDAG.copy", "rustworkx.PyDAG.edge_index_map", "rustworkx.PyDAG.edge_indices", "rustworkx.PyDAG.edge_indices_from_endpoints", "rustworkx.PyDAG.edge_list", "rustworkx.PyDAG.edge_subgraph", "rustworkx.PyDAG.edges", "rustworkx.PyDAG.extend_from_edge_list", "rustworkx.PyDAG.extend_from_weighted_edge_list", "rustworkx.PyDAG.filter_edges", "rustworkx.PyDAG.filter_nodes", "rustworkx.PyDAG.find_adjacent_node_by_edge", "rustworkx.PyDAG.find_node_by_weight", "rustworkx.PyDAG.find_predecessor_node_by_edge", "rustworkx.PyDAG.find_predecessors_by_edge", "rustworkx.PyDAG.find_successor_node_by_edge", "rustworkx.PyDAG.find_successors_by_edge", "rustworkx.PyDAG.from_adjacency_matrix", "rustworkx.PyDAG.from_complex_adjacency_matrix", "rustworkx.PyDAG.get_all_edge_data", "rustworkx.PyDAG.get_edge_data", "rustworkx.PyDAG.get_edge_data_by_index", "rustworkx.PyDAG.get_edge_endpoints_by_index", "rustworkx.PyDAG.get_node_data", "rustworkx.PyDAG.has_edge", "rustworkx.PyDAG.has_node", "rustworkx.PyDAG.has_parallel_edges", "rustworkx.PyDAG.in_degree", "rustworkx.PyDAG.in_edge_indices", "rustworkx.PyDAG.in_edges", "rustworkx.PyDAG.incident_edge_index_map", "rustworkx.PyDAG.incident_edges", "rustworkx.PyDAG.insert_node_on_in_edges", "rustworkx.PyDAG.insert_node_on_in_edges_multiple", "rustworkx.PyDAG.insert_node_on_out_edges", "rustworkx.PyDAG.insert_node_on_out_edges_multiple", "rustworkx.PyDAG.is_symmetric", "rustworkx.PyDAG.make_symmetric", "rustworkx.PyDAG.merge_nodes", "rustworkx.PyDAG.neighbors", "rustworkx.PyDAG.neighbors_undirected", "rustworkx.PyDAG.node_indexes", "rustworkx.PyDAG.node_indices", "rustworkx.PyDAG.nodes", "rustworkx.PyDAG.num_edges", "rustworkx.PyDAG.num_nodes", "rustworkx.PyDAG.out_degree", "rustworkx.PyDAG.out_edge_indices", "rustworkx.PyDAG.out_edges", "rustworkx.PyDAG.predecessor_indices", "rustworkx.PyDAG.predecessors", "rustworkx.PyDAG.read_edge_list", "rustworkx.PyDAG.remove_edge", "rustworkx.PyDAG.remove_edge_from_index", "rustworkx.PyDAG.remove_edges_from", "rustworkx.PyDAG.remove_node", "rustworkx.PyDAG.remove_node_retain_edges", "rustworkx.PyDAG.remove_node_retain_edges_by_id", "rustworkx.PyDAG.remove_node_retain_edges_by_key", "rustworkx.PyDAG.remove_nodes_from", "rustworkx.PyDAG.reverse", "rustworkx.PyDAG.subgraph", "rustworkx.PyDAG.substitute_node_with_subgraph", "rustworkx.PyDAG.successor_indices", "rustworkx.PyDAG.successors", "rustworkx.PyDAG.to_dot", "rustworkx.PyDAG.to_undirected", "rustworkx.PyDAG.update_edge", "rustworkx.PyDAG.update_edge_by_index", "rustworkx.PyDAG.weighted_edge_list", "rustworkx.PyDAG.write_edge_list", "PyDiGraph", "rustworkx.PyDiGraph.add_child", "rustworkx.PyDiGraph.add_edge", "rustworkx.PyDiGraph.add_edges_from", "rustworkx.PyDiGraph.add_edges_from_no_data", "rustworkx.PyDiGraph.add_node", "rustworkx.PyDiGraph.add_nodes_from", "rustworkx.PyDiGraph.add_parent", "rustworkx.PyDiGraph.adj", "rustworkx.PyDiGraph.adj_direction", "rustworkx.PyDiGraph.clear", "rustworkx.PyDiGraph.clear_edges", "rustworkx.PyDiGraph.compose", "rustworkx.PyDiGraph.contract_nodes", "rustworkx.PyDiGraph.copy", "rustworkx.PyDiGraph.edge_index_map", "rustworkx.PyDiGraph.edge_indices", "rustworkx.PyDiGraph.edge_indices_from_endpoints", "rustworkx.PyDiGraph.edge_list", "rustworkx.PyDiGraph.edge_subgraph", "rustworkx.PyDiGraph.edges", "rustworkx.PyDiGraph.extend_from_edge_list", "rustworkx.PyDiGraph.extend_from_weighted_edge_list", "rustworkx.PyDiGraph.filter_edges", "rustworkx.PyDiGraph.filter_nodes", "rustworkx.PyDiGraph.find_adjacent_node_by_edge", "rustworkx.PyDiGraph.find_node_by_weight", "rustworkx.PyDiGraph.find_predecessor_node_by_edge", "rustworkx.PyDiGraph.find_predecessors_by_edge", "rustworkx.PyDiGraph.find_successor_node_by_edge", "rustworkx.PyDiGraph.find_successors_by_edge", "rustworkx.PyDiGraph.from_adjacency_matrix", "rustworkx.PyDiGraph.from_complex_adjacency_matrix", "rustworkx.PyDiGraph.get_all_edge_data", "rustworkx.PyDiGraph.get_edge_data", "rustworkx.PyDiGraph.get_edge_data_by_index", "rustworkx.PyDiGraph.get_edge_endpoints_by_index", "rustworkx.PyDiGraph.get_node_data", "rustworkx.PyDiGraph.has_edge", "rustworkx.PyDiGraph.has_node", "rustworkx.PyDiGraph.has_parallel_edges", "rustworkx.PyDiGraph.in_degree", "rustworkx.PyDiGraph.in_edge_indices", "rustworkx.PyDiGraph.in_edges", "rustworkx.PyDiGraph.incident_edge_index_map", "rustworkx.PyDiGraph.incident_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "rustworkx.PyDiGraph.insert_node_on_out_edges", "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "rustworkx.PyDiGraph.is_symmetric", "rustworkx.PyDiGraph.make_symmetric", "rustworkx.PyDiGraph.merge_nodes", "rustworkx.PyDiGraph.neighbors", "rustworkx.PyDiGraph.neighbors_undirected", "rustworkx.PyDiGraph.node_indexes", "rustworkx.PyDiGraph.node_indices", "rustworkx.PyDiGraph.nodes", "rustworkx.PyDiGraph.num_edges", "rustworkx.PyDiGraph.num_nodes", "rustworkx.PyDiGraph.out_degree", "rustworkx.PyDiGraph.out_edge_indices", "rustworkx.PyDiGraph.out_edges", "rustworkx.PyDiGraph.predecessor_indices", "rustworkx.PyDiGraph.predecessors", "rustworkx.PyDiGraph.read_edge_list", "rustworkx.PyDiGraph.remove_edge", "rustworkx.PyDiGraph.remove_edge_from_index", "rustworkx.PyDiGraph.remove_edges_from", "rustworkx.PyDiGraph.remove_node", "rustworkx.PyDiGraph.remove_node_retain_edges", "rustworkx.PyDiGraph.remove_node_retain_edges_by_id", "rustworkx.PyDiGraph.remove_node_retain_edges_by_key", "rustworkx.PyDiGraph.remove_nodes_from", "rustworkx.PyDiGraph.reverse", "rustworkx.PyDiGraph.subgraph", "rustworkx.PyDiGraph.substitute_node_with_subgraph", "rustworkx.PyDiGraph.successor_indices", "rustworkx.PyDiGraph.successors", "rustworkx.PyDiGraph.to_dot", "rustworkx.PyDiGraph.to_undirected", "rustworkx.PyDiGraph.update_edge", "rustworkx.PyDiGraph.update_edge_by_index", "rustworkx.PyDiGraph.weighted_edge_list", "rustworkx.PyDiGraph.write_edge_list", "PyGraph", "rustworkx.PyGraph.add_edge", "rustworkx.PyGraph.add_edges_from", "rustworkx.PyGraph.add_edges_from_no_data", "rustworkx.PyGraph.add_node", "rustworkx.PyGraph.add_nodes_from", "rustworkx.PyGraph.adj", "rustworkx.PyGraph.clear", "rustworkx.PyGraph.clear_edges", "rustworkx.PyGraph.compose", "rustworkx.PyGraph.contract_nodes", "rustworkx.PyGraph.copy", "rustworkx.PyGraph.degree", "rustworkx.PyGraph.edge_index_map", "rustworkx.PyGraph.edge_indices", "rustworkx.PyGraph.edge_indices_from_endpoints", "rustworkx.PyGraph.edge_list", "rustworkx.PyGraph.edge_subgraph", "rustworkx.PyGraph.edges", "rustworkx.PyGraph.extend_from_edge_list", "rustworkx.PyGraph.extend_from_weighted_edge_list", "rustworkx.PyGraph.filter_edges", "rustworkx.PyGraph.filter_nodes", "rustworkx.PyGraph.find_node_by_weight", "rustworkx.PyGraph.from_adjacency_matrix", "rustworkx.PyGraph.from_complex_adjacency_matrix", "rustworkx.PyGraph.get_all_edge_data", "rustworkx.PyGraph.get_edge_data", "rustworkx.PyGraph.get_edge_data_by_index", "rustworkx.PyGraph.get_edge_endpoints_by_index", "rustworkx.PyGraph.get_node_data", "rustworkx.PyGraph.has_edge", "rustworkx.PyGraph.has_node", "rustworkx.PyGraph.has_parallel_edges", "rustworkx.PyGraph.in_edge_indices", "rustworkx.PyGraph.in_edges", "rustworkx.PyGraph.incident_edge_index_map", "rustworkx.PyGraph.incident_edges", "rustworkx.PyGraph.neighbors", "rustworkx.PyGraph.node_indexes", "rustworkx.PyGraph.node_indices", "rustworkx.PyGraph.nodes", "rustworkx.PyGraph.num_edges", "rustworkx.PyGraph.num_nodes", "rustworkx.PyGraph.out_edge_indices", "rustworkx.PyGraph.out_edges", "rustworkx.PyGraph.read_edge_list", "rustworkx.PyGraph.remove_edge", "rustworkx.PyGraph.remove_edge_from_index", "rustworkx.PyGraph.remove_edges_from", "rustworkx.PyGraph.remove_node", "rustworkx.PyGraph.remove_nodes_from", "rustworkx.PyGraph.subgraph", "rustworkx.PyGraph.substitute_node_with_subgraph", "rustworkx.PyGraph.to_directed", "rustworkx.PyGraph.to_dot", "rustworkx.PyGraph.update_edge", "rustworkx.PyGraph.update_edge_by_index", "rustworkx.PyGraph.weighted_edge_list", "rustworkx.PyGraph.write_edge_list", "RelationalCoarsestPartition", "TopologicalSorter", "rustworkx.TopologicalSorter.done", "rustworkx.TopologicalSorter.get_ready", "rustworkx.TopologicalSorter.is_active", "WeightedEdgeList", "rustworkx.adjacency_matrix", "rustworkx.all_pairs_all_simple_paths", "rustworkx.all_pairs_bellman_ford_path_lengths", "rustworkx.all_pairs_bellman_ford_shortest_paths", "rustworkx.all_pairs_dijkstra_path_lengths", "rustworkx.all_pairs_dijkstra_shortest_paths", "rustworkx.all_shortest_paths", "rustworkx.all_simple_paths", "rustworkx.ancestors", "rustworkx.articulation_points", "rustworkx.astar_shortest_path", "rustworkx.barabasi_albert_graph", "rustworkx.bellman_ford_shortest_path_lengths", "rustworkx.bellman_ford_shortest_paths", "rustworkx.betweenness_centrality", "rustworkx.bfs_predecessors", "rustworkx.bfs_search", "rustworkx.bfs_successors", "rustworkx.biconnected_components", "rustworkx.bipartite_layout", "rustworkx.bridges", "rustworkx.cartesian_product", "rustworkx.chain_decomposition", "rustworkx.circular_layout", "rustworkx.closeness_centrality", "rustworkx.collect_bicolor_runs", "rustworkx.collect_runs", "rustworkx.complement", "rustworkx.connected_components", "rustworkx.connected_subgraphs", "rustworkx.core_number", "rustworkx.cycle_basis", "rustworkx.dag_longest_path", "rustworkx.dag_longest_path_length", "rustworkx.dag_weighted_longest_path", "rustworkx.dag_weighted_longest_path_length", "rustworkx.degree_centrality", "rustworkx.descendants", "rustworkx.dfs_edges", "rustworkx.dfs_search", "rustworkx.digraph_adjacency_matrix", "rustworkx.digraph_all_pairs_all_simple_paths", "rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "rustworkx.digraph_all_pairs_dijkstra_path_lengths", "rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "rustworkx.digraph_all_shortest_paths", "rustworkx.digraph_all_simple_paths", "rustworkx.digraph_astar_shortest_path", "rustworkx.digraph_bellman_ford_shortest_path_lengths", "rustworkx.digraph_betweenness_centrality", "rustworkx.digraph_bfs_search", "rustworkx.digraph_bipartite_layout", "rustworkx.digraph_cartesian_product", "rustworkx.digraph_circular_layout", "rustworkx.digraph_closeness_centrality", "rustworkx.digraph_complement", "rustworkx.digraph_core_number", "rustworkx.digraph_dfs_edges", "rustworkx.digraph_dfs_search", "rustworkx.digraph_dijkstra_search", "rustworkx.digraph_dijkstra_shortest_path_lengths", "rustworkx.digraph_dijkstra_shortest_paths", "rustworkx.digraph_distance_matrix", "rustworkx.digraph_edge_betweenness_centrality", "rustworkx.digraph_eigenvector_centrality", "rustworkx.digraph_find_cycle", "rustworkx.digraph_floyd_warshall", "rustworkx.digraph_floyd_warshall_numpy", "rustworkx.digraph_floyd_warshall_successor_and_distance", "rustworkx.digraph_is_isomorphic", "rustworkx.digraph_is_subgraph_isomorphic", "rustworkx.digraph_k_shortest_path_lengths", "rustworkx.digraph_katz_centrality", "rustworkx.digraph_longest_simple_path", "rustworkx.digraph_maximum_bisimulation", "rustworkx.digraph_newman_weighted_closeness_centrality", "rustworkx.digraph_node_link_json", "rustworkx.digraph_num_shortest_paths_unweighted", "rustworkx.digraph_random_layout", "rustworkx.digraph_shell_layout", "rustworkx.digraph_spiral_layout", "rustworkx.digraph_spring_layout", "rustworkx.digraph_tensor_product", "rustworkx.digraph_transitivity", "rustworkx.digraph_union", "rustworkx.digraph_unweighted_average_shortest_path_length", "rustworkx.digraph_vf2_mapping", "rustworkx.dijkstra_search", "rustworkx.dijkstra_shortest_path_lengths", "rustworkx.dijkstra_shortest_paths", "rustworkx.directed_barabasi_albert_graph", "rustworkx.directed_gnm_random_graph", "rustworkx.directed_gnp_random_graph", "rustworkx.directed_random_bipartite_graph", "rustworkx.directed_sbm_random_graph", "rustworkx.distance_matrix", "rustworkx.dominance_frontiers", "rustworkx.edge_betweenness_centrality", "rustworkx.eigenvector_centrality", "rustworkx.find_negative_cycle", "rustworkx.floyd_warshall", "rustworkx.floyd_warshall_numpy", "rustworkx.floyd_warshall_successor_and_distance", "rustworkx.from_node_link_json_file", "rustworkx.generators.barbell_graph", "rustworkx.generators.binomial_tree_graph", "rustworkx.generators.complete_graph", "rustworkx.generators.cycle_graph", "rustworkx.generators.directed_binomial_tree_graph", "rustworkx.generators.directed_complete_graph", "rustworkx.generators.directed_cycle_graph", "rustworkx.generators.directed_empty_graph", "rustworkx.generators.directed_grid_graph", "rustworkx.generators.directed_heavy_hex_graph", "rustworkx.generators.directed_heavy_square_graph", "rustworkx.generators.directed_hexagonal_lattice_graph", "rustworkx.generators.directed_mesh_graph", "rustworkx.generators.directed_path_graph", "rustworkx.generators.directed_star_graph", "rustworkx.generators.dorogovtsev_goltsev_mendes_graph", "rustworkx.generators.empty_graph", "rustworkx.generators.full_rary_tree", "rustworkx.generators.generalized_petersen_graph", "rustworkx.generators.grid_graph", "rustworkx.generators.heavy_hex_graph", "rustworkx.generators.heavy_square_graph", "rustworkx.generators.hexagonal_lattice_graph", "rustworkx.generators.karate_club_graph", "rustworkx.generators.lollipop_graph", "rustworkx.generators.mesh_graph", "rustworkx.generators.path_graph", "rustworkx.generators.star_graph", "rustworkx.graph_adjacency_matrix", "rustworkx.graph_all_pairs_all_simple_paths", "rustworkx.graph_all_pairs_bellman_ford_path_lengths", "rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "rustworkx.graph_all_pairs_dijkstra_path_lengths", "rustworkx.graph_all_pairs_dijkstra_shortest_paths", "rustworkx.graph_all_shortest_paths", "rustworkx.graph_all_simple_paths", "rustworkx.graph_astar_shortest_path", "rustworkx.graph_bellman_ford_shortest_path_lengths", "rustworkx.graph_betweenness_centrality", "rustworkx.graph_bfs_search", "rustworkx.graph_bipartite_edge_color", "rustworkx.graph_bipartite_layout", "rustworkx.graph_cartesian_product", "rustworkx.graph_circular_layout", "rustworkx.graph_closeness_centrality", "rustworkx.graph_complement", "rustworkx.graph_core_number", "rustworkx.graph_dfs_edges", "rustworkx.graph_dfs_search", "rustworkx.graph_dijkstra_search", "rustworkx.graph_dijkstra_shortest_path_lengths", "rustworkx.graph_dijkstra_shortest_paths", "rustworkx.graph_distance_matrix", "rustworkx.graph_edge_betweenness_centrality", "rustworkx.graph_eigenvector_centrality", "rustworkx.graph_floyd_warshall", "rustworkx.graph_floyd_warshall_numpy", "rustworkx.graph_floyd_warshall_successor_and_distance", "rustworkx.graph_greedy_color", "rustworkx.graph_greedy_edge_color", "rustworkx.graph_is_isomorphic", "rustworkx.graph_is_subgraph_isomorphic", "rustworkx.graph_k_shortest_path_lengths", "rustworkx.graph_katz_centrality", "rustworkx.graph_line_graph", "rustworkx.graph_longest_simple_path", "rustworkx.graph_misra_gries_edge_color", "rustworkx.graph_newman_weighted_closeness_centrality", "rustworkx.graph_node_link_json", "rustworkx.graph_num_shortest_paths_unweighted", "rustworkx.graph_random_layout", "rustworkx.graph_shell_layout", "rustworkx.graph_spiral_layout", "rustworkx.graph_spring_layout", "rustworkx.graph_tensor_product", "rustworkx.graph_token_swapper", "rustworkx.graph_transitivity", "rustworkx.graph_union", "rustworkx.graph_unweighted_average_shortest_path_length", "rustworkx.graph_vf2_mapping", "rustworkx.has_path", "rustworkx.hits", "rustworkx.hyperbolic_random_graph", "rustworkx.immediate_dominators", "rustworkx.in_degree_centrality", "rustworkx.is_bipartite", "rustworkx.is_connected", "rustworkx.is_directed_acyclic_graph", "rustworkx.is_isomorphic", "rustworkx.is_isomorphic_node_match", "rustworkx.is_matching", "rustworkx.is_maximal_matching", "rustworkx.is_planar", "rustworkx.is_strongly_connected", "rustworkx.is_subgraph_isomorphic", "rustworkx.is_weakly_connected", "rustworkx.isolates", "rustworkx.k_shortest_path_lengths", "rustworkx.katz_centrality", "rustworkx.layers", "rustworkx.lexicographical_topological_sort", "rustworkx.local_complement", "rustworkx.longest_simple_path", "rustworkx.max_weight_matching", "rustworkx.metric_closure", "rustworkx.minimum_spanning_edges", "rustworkx.minimum_spanning_tree", "rustworkx.negative_edge_cycle", "rustworkx.networkx_converter", "rustworkx.newman_weighted_closeness_centrality", "rustworkx.node_connected_component", "rustworkx.node_link_json", "rustworkx.num_shortest_paths_unweighted", "rustworkx.number_connected_components", "rustworkx.number_strongly_connected_components", "rustworkx.number_weakly_connected_components", "rustworkx.out_degree_centrality", "rustworkx.pagerank", "rustworkx.parse_node_link_json", "rustworkx.random_geometric_graph", "rustworkx.random_layout", "rustworkx.read_graphml", "rustworkx.shell_layout", "rustworkx.simple_cycles", "rustworkx.spiral_layout", "rustworkx.spring_layout", "rustworkx.steiner_tree", "rustworkx.stoer_wagner_min_cut", "rustworkx.strongly_connected_components", "rustworkx.topological_generations", "rustworkx.topological_sort", "rustworkx.transitive_reduction", "rustworkx.transitivity", "rustworkx.two_color", "rustworkx.undirected_gnm_random_graph", "rustworkx.undirected_gnp_random_graph", "rustworkx.undirected_random_bipartite_graph", "rustworkx.undirected_sbm_random_graph", "rustworkx.union", "rustworkx.unweighted_average_shortest_path_length", "rustworkx.vf2_mapping", "BFSVisitor", "rustworkx.visit.BFSVisitor.black_target_edge", "rustworkx.visit.BFSVisitor.discover_vertex", "rustworkx.visit.BFSVisitor.finish_vertex", "rustworkx.visit.BFSVisitor.gray_target_edge", "rustworkx.visit.BFSVisitor.non_tree_edge", "rustworkx.visit.BFSVisitor.tree_edge", "DFSVisitor", "rustworkx.visit.DFSVisitor.back_edge", "rustworkx.visit.DFSVisitor.discover_vertex", "rustworkx.visit.DFSVisitor.finish_vertex", "rustworkx.visit.DFSVisitor.forward_or_cross_edge", "rustworkx.visit.DFSVisitor.tree_edge", "DijkstraVisitor", "rustworkx.visit.DijkstraVisitor.discover_vertex", "rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "rustworkx.visit.DijkstraVisitor.edge_relaxed", "rustworkx.visit.DijkstraVisitor.examine_edge", "rustworkx.visit.DijkstraVisitor.finish_vertex", "rustworkx.visit.PruneSearch", "rustworkx.visit.StopSearch", "rustworkx.visualization.graphviz_draw", "rustworkx.visualization.mpl_draw", "rustworkx.weakly_connected_components", "Rustworkx Comparison Benchmarks With Other Libraries", "rustworkx Documentation", "Getting Started", "rustworkx for NetworkX users", "Release Notes", "Working with Betweenness Centrality", "Directed Acyclic Graphs", "rustworkx Tutorials and Guides", "Introduction to rustworkx", "Visualization"], "terms": {"first": [0, 45, 101, 106, 115, 122, 123, 154, 170, 186, 191, 200, 207, 208, 239, 255, 268, 274, 282, 285, 286, 290, 304, 305, 315, 320, 340, 341, 342, 346, 347, 363, 364, 376, 378, 383, 384, 391, 394, 395, 396, 408, 410, 412, 428, 444, 457, 469, 472, 477, 478, 487, 488, 489, 490, 491, 504, 507, 509, 511, 518, 519, 524, 529, 568, 570, 573, 580, 585, 595, 599, 600, 601, 603], "read": [0, 26, 30, 34, 35, 36, 40, 44, 48, 52, 56, 57, 59, 67, 73, 77, 85, 104, 154, 173, 189, 239, 258, 272, 305, 318, 319, 324, 327, 328, 329, 330, 337, 338, 346, 361, 367, 368, 369, 370, 374, 375, 378, 389, 390, 392, 398, 408, 423, 424, 426, 460, 461, 462, 463, 467, 468, 472, 483, 484, 485, 493, 504, 511, 514, 528, 546, 547, 551, 598, 599, 603], "overal": 0, "qiskit": [0, 596, 598, 599], "project": [0, 547, 598, 599], "guidelin": 0, "These": [0, 22, 23, 89, 174, 259, 597, 598, 599, 603], "ar": [0, 22, 23, 34, 35, 57, 77, 89, 92, 93, 97, 98, 102, 107, 110, 111, 114, 116, 118, 120, 121, 135, 136, 137, 138, 140, 154, 155, 157, 159, 160, 161, 164, 170, 172, 174, 177, 178, 182, 183, 187, 192, 195, 196, 199, 201, 203, 205, 206, 220, 221, 222, 223, 225, 239, 240, 242, 244, 245, 246, 249, 255, 257, 259, 261, 262, 265, 269, 275, 278, 279, 283, 284, 286, 293, 303, 305, 306, 308, 311, 313, 315, 317, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 336, 338, 341, 343, 345, 346, 347, 349, 352, 355, 356, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 378, 380, 381, 382, 383, 384, 385, 387, 389, 390, 392, 393, 394, 395, 396, 398, 399, 401, 407, 408, 409, 410, 412, 413, 415, 416, 417, 420, 423, 424, 426, 427, 428, 430, 432, 433, 435, 436, 438, 441, 442, 443, 444, 448, 449, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 503, 504, 505, 506, 507, 509, 511, 512, 514, 517, 518, 519, 524, 525, 526, 528, 529, 530, 531, 532, 533, 535, 536, 539, 545, 546, 547, 549, 551, 555, 559, 562, 564, 567, 568, 570, 579, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603], "all": [0, 26, 30, 97, 98, 99, 100, 103, 105, 106, 108, 109, 116, 117, 118, 119, 122, 132, 135, 136, 137, 138, 140, 141, 144, 145, 146, 151, 152, 153, 159, 160, 161, 163, 166, 167, 169, 170, 182, 183, 184, 185, 188, 190, 191, 193, 194, 201, 202, 203, 204, 207, 217, 220, 221, 222, 223, 225, 226, 229, 230, 231, 236, 237, 238, 244, 245, 246, 248, 251, 252, 254, 255, 265, 266, 267, 270, 273, 274, 276, 277, 285, 286, 293, 294, 298, 299, 300, 303, 304, 313, 315, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 341, 343, 347, 349, 350, 351, 354, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 380, 383, 384, 385, 389, 390, 392, 393, 394, 398, 399, 401, 409, 410, 411, 412, 413, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 438, 449, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 474, 477, 478, 479, 483, 484, 485, 486, 487, 493, 495, 497, 507, 508, 509, 512, 513, 525, 528, 530, 532, 533, 535, 536, 539, 545, 553, 556, 557, 561, 564, 565, 566, 568, 569, 570, 574, 581, 589, 592, 593, 594, 596, 597, 599, 601, 603], "includ": [0, 117, 119, 164, 165, 202, 204, 249, 250, 311, 312, 326, 332, 339, 366, 372, 375, 402, 411, 459, 465, 468, 498, 508, 541, 569, 596, 597, 598, 599, 601, 603], "http": [0, 347, 390, 398, 418, 422, 424, 439, 440, 445, 448, 450, 451, 453, 470, 484, 493, 496, 505, 511, 513, 522, 528, 547, 551, 553, 556, 565, 596, 598, 599], "github": [0, 418, 553, 565, 595, 596, 598, 599], "com": [0, 398, 418, 493, 528, 553, 556, 565, 596, 598, 599], "blob": [0, 418, 553, 565], "main": [0, 599], "md": 0, "while": [0, 120, 121, 205, 206, 283, 284, 320, 333, 341, 362, 363, 364, 376, 383, 384, 385, 394, 395, 396, 407, 411, 412, 413, 428, 469, 477, 478, 479, 487, 490, 491, 503, 509, 518, 524, 551, 555, 559, 560, 569, 570, 590, 592, 596, 598, 599, 601], "": [0, 89, 90, 94, 95, 102, 112, 113, 114, 116, 117, 118, 119, 123, 126, 146, 152, 153, 165, 166, 167, 170, 171, 173, 174, 175, 179, 180, 187, 197, 198, 199, 201, 202, 203, 204, 208, 211, 231, 237, 238, 250, 251, 252, 255, 256, 258, 259, 263, 264, 269, 280, 281, 286, 289, 300, 312, 315, 316, 318, 320, 327, 328, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 346, 349, 357, 358, 359, 360, 363, 364, 367, 368, 369, 370, 371, 373, 374, 375, 376, 378, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 396, 398, 401, 407, 410, 411, 413, 414, 415, 423, 424, 425, 426, 427, 428, 431, 434, 439, 440, 445, 450, 451, 453, 460, 461, 462, 463, 464, 466, 467, 468, 469, 472, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 491, 493, 496, 497, 503, 505, 507, 508, 511, 515, 524, 528, 530, 534, 535, 536, 537, 539, 547, 553, 555, 556, 557, 558, 568, 569, 585, 592, 593, 596, 597, 598, 599, 600, 603], "directli": [0, 161, 246, 341, 376, 469, 598, 599, 603], "applic": [0, 349, 448, 551, 596, 597, 599], "sinc": [0, 115, 200, 282, 396, 491, 524, 579, 596, 598, 599, 601, 603], "most": [0, 496, 549, 598, 599, 603], "about": [0, 595, 596, 597, 599], "itself": [0, 132, 151, 217, 236, 448, 598], "an": [0, 34, 35, 44, 52, 56, 57, 59, 67, 73, 77, 89, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 104, 107, 108, 110, 111, 112, 113, 114, 116, 118, 120, 121, 123, 126, 131, 133, 134, 140, 143, 150, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 186, 187, 189, 192, 193, 195, 196, 197, 198, 199, 201, 203, 205, 206, 208, 211, 216, 218, 219, 225, 228, 235, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 268, 269, 272, 275, 276, 278, 279, 280, 281, 283, 284, 289, 293, 295, 296, 303, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 324, 325, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 341, 343, 344, 345, 347, 348, 349, 353, 356, 357, 358, 359, 360, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 376, 377, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 429, 430, 431, 432, 433, 434, 439, 440, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 469, 471, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 497, 498, 500, 501, 502, 503, 505, 506, 509, 511, 512, 514, 516, 518, 522, 523, 524, 525, 526, 527, 528, 530, 531, 533, 534, 537, 539, 540, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 561, 563, 564, 565, 566, 567, 570, 579, 582, 592, 593, 594, 595, 596, 597, 598, 599, 601, 603], "independ": [0, 418, 419, 488, 489, 538, 565, 566, 596, 599], "librari": [0, 547, 592, 596, 597, 598, 599, 603], "develop": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "tandem": 0, "advic": 0, "still": [0, 323, 417, 533, 564, 596, 597, 598, 599], "appli": [0, 117, 119, 202, 204, 341, 364, 376, 384, 385, 413, 469, 478, 479, 505, 531, 599, 603], "here": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "In": [0, 108, 142, 152, 153, 166, 167, 193, 227, 237, 238, 251, 252, 276, 293, 303, 325, 341, 349, 350, 364, 365, 376, 380, 384, 385, 390, 398, 399, 401, 413, 418, 424, 458, 469, 474, 478, 479, 484, 493, 495, 497, 511, 514, 528, 532, 539, 547, 565, 582, 596, 598, 599, 601, 603], "addit": [0, 89, 174, 259, 350, 353, 543, 596, 597, 598, 599, 603], "detail": [0, 161, 246, 390, 398, 424, 448, 484, 493, 511, 528, 547, 592, 593, 596, 597, 598, 599, 603], "below": [0, 341, 363, 364, 376, 383, 384, 385, 407, 413, 430, 454, 469, 477, 478, 479, 503, 555, 598], "implement": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 161, 174, 246, 259, 319, 324, 340, 342, 390, 398, 418, 424, 440, 451, 470, 484, 493, 505, 528, 547, 551, 553, 556, 558, 565, 595, 596, 598, 599, 603], "primarili": [0, 598, 599], "thin": 0, "layer": [0, 7, 599], "becaus": [0, 168, 253, 314, 530, 598, 599, 600, 603], "your": [0, 159, 244, 431, 434, 597, 598, 599, 603], "involv": [0, 603], "modif": [0, 320], "src": 0, "To": [0, 116, 117, 118, 119, 142, 152, 153, 166, 167, 201, 202, 203, 204, 227, 237, 238, 251, 252, 286, 353, 394, 401, 428, 487, 497, 539, 543, 544, 545, 594, 597, 599, 600, 601, 603], "understand": 0, "which": [0, 89, 102, 112, 113, 114, 116, 118, 140, 144, 160, 161, 165, 174, 187, 197, 198, 199, 201, 203, 225, 229, 245, 246, 250, 259, 269, 298, 312, 320, 321, 325, 327, 328, 329, 330, 331, 335, 338, 341, 347, 353, 356, 364, 365, 367, 368, 369, 370, 371, 373, 376, 384, 385, 387, 391, 392, 393, 394, 399, 400, 405, 407, 413, 415, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 469, 478, 479, 481, 485, 486, 487, 488, 495, 501, 503, 505, 512, 520, 521, 530, 532, 533, 534, 535, 536, 543, 549, 552, 555, 556, 557, 559, 596, 597, 598, 599, 600, 601, 603], "you": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 68, 73, 77, 85, 89, 133, 134, 164, 168, 169, 170, 174, 218, 219, 249, 253, 254, 255, 259, 295, 296, 311, 314, 315, 319, 324, 326, 327, 328, 329, 330, 341, 364, 366, 367, 368, 369, 370, 376, 384, 385, 392, 393, 394, 399, 401, 409, 413, 426, 427, 428, 459, 469, 478, 479, 485, 486, 487, 488, 489, 495, 497, 505, 506, 525, 532, 533, 534, 538, 539, 545, 556, 562, 592, 593, 594, 596, 597, 598, 599, 600, 601, 603], "need": [0, 170, 174, 255, 259, 315, 438, 449, 592, 596, 597, 598, 599, 600, 601, 603], "we": [0, 320, 341, 364, 376, 384, 385, 396, 413, 469, 478, 479, 491, 524, 580, 581, 585, 595, 598, 599, 600, 601, 603], "invit": 0, "overview": 0, "our": [0, 599, 601, 603], "simplifi": [0, 599, 601], "sourc": [0, 89, 102, 107, 108, 110, 111, 114, 116, 118, 127, 133, 141, 165, 170, 172, 187, 192, 193, 195, 196, 199, 201, 203, 212, 218, 226, 250, 255, 257, 275, 276, 278, 279, 295, 312, 315, 317, 325, 326, 327, 328, 329, 330, 331, 332, 335, 337, 338, 339, 340, 341, 342, 344, 346, 347, 348, 349, 352, 355, 357, 358, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 371, 374, 376, 383, 384, 385, 386, 387, 391, 392, 394, 403, 413, 414, 415, 421, 423, 424, 426, 427, 428, 459, 460, 461, 462, 463, 464, 467, 469, 477, 478, 479, 480, 481, 485, 487, 499, 510, 511, 515, 518, 519, 524, 526, 527, 528, 532, 538, 539, 541, 542, 550, 552, 554, 555, 556, 562, 563, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 599, 601], "tree": [0, 7, 20, 341, 347, 363, 364, 376, 383, 384, 385, 413, 431, 434, 447, 469, 477, 478, 479, 535, 536, 556, 572, 575, 577, 579, 581, 583, 590, 599], "tini": [0, 599], "larg": [0, 395, 396, 418, 490, 491, 518, 519, 565, 595, 598, 599, 601], "mod": 0, "pure_rust_cod": 0, "more_pure_rust_cod": 0, "add": [0, 89, 90, 91, 92, 93, 94, 95, 96, 101, 110, 111, 135, 136, 137, 138, 159, 160, 161, 174, 175, 176, 177, 178, 179, 180, 181, 186, 195, 196, 220, 221, 222, 223, 244, 245, 246, 259, 260, 261, 262, 263, 264, 268, 278, 279, 410, 436, 443, 444, 507, 533, 538, 551, 568, 597, 598, 599, 601, 603], "them": [0, 169, 254, 320, 395, 396, 401, 490, 491, 497, 518, 519, 524, 539, 599, 603], "import": [0, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 101, 112, 113, 154, 163, 168, 173, 174, 186, 197, 198, 239, 248, 253, 258, 259, 268, 280, 281, 305, 314, 318, 319, 320, 324, 341, 364, 376, 378, 384, 385, 399, 408, 413, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 469, 472, 478, 479, 488, 489, 494, 495, 496, 504, 514, 532, 546, 592, 593, 597, 598, 599, 600, 601], "defin": [0, 116, 117, 118, 119, 142, 152, 153, 166, 167, 201, 202, 203, 204, 227, 237, 238, 251, 252, 327, 328, 337, 338, 349, 356, 367, 368, 374, 380, 409, 438, 449, 460, 461, 467, 474, 506, 557, 599, 600, 601], "see": [0, 97, 98, 116, 117, 118, 119, 142, 143, 152, 153, 166, 167, 182, 183, 201, 202, 203, 204, 227, 228, 237, 238, 251, 252, 341, 347, 353, 376, 420, 448, 469, 516, 523, 525, 543, 544, 545, 551, 558, 567, 593, 594, 595, 596, 599, 603], "next": [0, 34, 35, 44, 56, 57, 59, 67, 73, 77, 319, 324, 335, 363, 373, 383, 394, 412, 428, 466, 477, 487, 505, 509, 570, 599], "section": [0, 45, 602, 603], "us": [0, 34, 35, 44, 52, 56, 57, 59, 67, 73, 77, 81, 89, 91, 93, 97, 98, 101, 102, 114, 116, 118, 120, 121, 132, 140, 151, 154, 159, 161, 164, 165, 168, 169, 170, 173, 174, 176, 178, 182, 183, 186, 187, 199, 201, 203, 205, 206, 217, 225, 236, 239, 244, 246, 249, 250, 253, 254, 255, 258, 259, 261, 262, 268, 269, 279, 283, 284, 286, 294, 304, 305, 311, 312, 314, 315, 318, 319, 320, 324, 325, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 347, 349, 350, 351, 352, 357, 358, 359, 360, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 442, 443, 444, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 498, 503, 505, 506, 508, 509, 510, 511, 512, 513, 518, 519, 522, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 547, 548, 549, 551, 555, 556, 557, 558, 562, 564, 565, 566, 567, 569, 570, 571, 578, 584, 592, 593, 595, 596, 598, 599, 600, 601, 602], "m": [0, 336, 347, 416, 417, 418, 419, 447, 470, 564, 565, 566, 595, 599, 601], "add_wrap": 0, "wrap_pyfunct": 0, "your_new_funct": 0, "modifi": [0, 102, 163, 174, 187, 248, 259, 336, 416, 599], "contain": [0, 26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 89, 108, 174, 193, 259, 276, 319, 320, 324, 340, 342, 347, 355, 363, 382, 383, 398, 420, 438, 449, 453, 476, 477, 493, 494, 511, 528, 530, 538, 540, 557, 561, 567, 598, 599, 601, 602, 603], "pyfunct": 0, "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "either": [0, 98, 165, 169, 183, 250, 254, 312, 323, 325, 327, 328, 329, 330, 332, 335, 337, 338, 344, 348, 349, 352, 355, 361, 363, 365, 380, 401, 402, 412, 414, 415, 421, 424, 426, 427, 441, 448, 452, 458, 474, 488, 489, 497, 498, 509, 510, 518, 519, 524, 527, 528, 538, 539, 541, 552, 554, 555, 562, 569, 570, 593, 598, 599, 601], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "give": [0, 320, 350, 530, 599, 601], "power": [0, 390, 398, 424, 484, 493, 511, 528, 547, 603], "interact": [0, 453, 593, 596, 598, 599], "both": [0, 22, 23, 133, 134, 218, 219, 395, 396, 430, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 444, 450, 454, 455, 456, 457, 490, 491, 518, 519, 524, 526, 533, 538, 579, 598, 599, 601, 603], "interpret": [0, 599], "pure": [0, 596], "exist": [0, 89, 90, 96, 108, 127, 128, 144, 174, 175, 181, 193, 212, 213, 229, 259, 260, 261, 262, 276, 278, 279, 290, 291, 298, 336, 396, 412, 416, 425, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 491, 509, 510, 524, 537, 570, 598, 599, 603], "search": [0, 114, 115, 116, 118, 199, 200, 201, 203, 282, 320, 340, 341, 342, 347, 363, 364, 376, 383, 384, 385, 395, 396, 399, 412, 413, 469, 477, 478, 479, 490, 491, 495, 509, 518, 524, 532, 570, 577, 583, 590, 599], "its": [0, 124, 125, 134, 135, 137, 209, 210, 219, 220, 222, 287, 288, 296, 334, 339, 349, 380, 401, 453, 474, 488, 489, 497, 533, 539, 561, 574, 589, 595, 598, 599, 600, 601, 603], "name": [0, 154, 239, 305, 596, 598, 599, 603], "edit": 0, "alreadi": [0, 140, 225, 260, 261, 262, 278, 279, 320, 321, 322, 488, 489, 579, 598, 599, 603], "If": [0, 34, 35, 44, 56, 57, 59, 67, 68, 73, 77, 89, 102, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 131, 133, 134, 140, 141, 150, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 168, 169, 170, 173, 174, 187, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 216, 218, 219, 225, 226, 235, 239, 240, 242, 243, 244, 245, 246, 247, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 269, 278, 279, 282, 283, 284, 293, 295, 296, 303, 305, 306, 308, 309, 310, 311, 312, 314, 315, 318, 319, 320, 321, 324, 325, 331, 336, 338, 339, 341, 347, 349, 350, 351, 354, 357, 358, 359, 360, 363, 364, 365, 366, 371, 375, 376, 380, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 401, 402, 403, 406, 407, 410, 411, 412, 413, 415, 416, 417, 418, 421, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 464, 468, 469, 470, 474, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 495, 497, 498, 499, 502, 503, 505, 507, 508, 509, 510, 511, 512, 516, 518, 519, 523, 524, 525, 528, 529, 530, 532, 533, 535, 536, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 554, 555, 557, 563, 564, 565, 568, 569, 570, 581, 592, 593, 597, 598, 599, 600, 601, 603], "want": [0, 34, 35, 44, 56, 57, 59, 67, 73, 77, 319, 324, 599, 603], "find": [0, 98, 114, 115, 116, 118, 130, 149, 183, 199, 200, 201, 203, 215, 234, 271, 282, 326, 328, 330, 331, 332, 335, 337, 338, 341, 350, 351, 353, 354, 356, 357, 358, 359, 360, 366, 368, 370, 371, 372, 373, 374, 376, 385, 386, 387, 391, 392, 393, 394, 397, 399, 400, 403, 411, 412, 413, 414, 415, 425, 426, 427, 428, 459, 461, 463, 464, 465, 466, 467, 469, 470, 479, 480, 481, 485, 486, 487, 488, 489, 492, 495, 499, 509, 510, 526, 527, 532, 533, 534, 535, 536, 542, 543, 544, 545, 553, 558, 563, 569, 570, 594, 596, 599, 601, 603], "d": [0, 97, 98, 101, 114, 116, 117, 118, 119, 142, 152, 153, 166, 167, 182, 183, 186, 199, 201, 202, 203, 204, 227, 237, 238, 251, 252, 268, 349, 380, 411, 439, 440, 450, 451, 474, 494, 496, 508, 512, 569, 593, 595, 599, 601], "like": [0, 102, 133, 134, 187, 218, 219, 269, 326, 332, 361, 366, 372, 375, 388, 389, 390, 398, 399, 421, 423, 424, 459, 465, 468, 482, 483, 484, 493, 495, 511, 514, 528, 532, 546, 547, 593, 597, 598, 599, 601, 603], "insert": [0, 135, 136, 137, 138, 140, 220, 221, 222, 223, 225, 599], "creat": [0, 89, 90, 91, 92, 93, 94, 95, 96, 102, 120, 121, 135, 136, 137, 138, 140, 154, 160, 161, 165, 169, 174, 175, 176, 177, 178, 179, 180, 181, 187, 205, 206, 220, 221, 222, 223, 225, 239, 245, 246, 250, 254, 259, 260, 261, 262, 263, 264, 269, 283, 284, 305, 312, 313, 320, 336, 352, 381, 416, 417, 418, 419, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 475, 549, 564, 565, 566, 593, 595, 596, 598, 599, 601], "one": [0, 97, 98, 101, 102, 114, 115, 116, 117, 118, 119, 135, 136, 137, 138, 140, 155, 157, 159, 161, 170, 182, 183, 186, 187, 199, 200, 201, 202, 203, 204, 220, 221, 222, 223, 225, 240, 242, 244, 246, 255, 268, 269, 282, 286, 306, 308, 315, 321, 343, 349, 350, 351, 380, 394, 395, 396, 399, 401, 412, 428, 445, 474, 487, 488, 489, 490, 491, 495, 497, 509, 518, 519, 524, 525, 532, 539, 545, 547, 557, 570, 593, 594, 596, 598, 599, 601, 603], "your_modul": 0, "Then": [0, 101, 186, 268, 599], "start": [0, 101, 106, 186, 191, 268, 274, 320, 321, 331, 336, 341, 356, 363, 364, 371, 376, 383, 384, 385, 397, 405, 413, 416, 422, 445, 464, 469, 477, 478, 479, 492, 501, 511, 513, 527, 530, 547, 552, 596, 599, 600, 601, 603], "boilerpl": 0, "bellow": 0, "docstr": [0, 598], "descript": 0, "pyo3": [0, 168, 253, 314, 599], "text_signatur": 0, "graph": [0, 7, 20, 22, 23, 26, 30, 34, 35, 44, 45, 52, 56, 57, 59, 67, 73, 77, 81, 89, 90, 92, 93, 94, 95, 96, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 115, 120, 121, 128, 129, 131, 133, 134, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 177, 178, 179, 180, 181, 186, 187, 188, 190, 193, 194, 195, 196, 197, 198, 200, 205, 206, 213, 214, 216, 218, 219, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 237, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262, 263, 264, 268, 269, 270, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 576, 579, 582, 590, 591, 592, 593, 594, 596, 597, 599, 602], "pub": [0, 547], "fn": 0, "py": [0, 418, 553, 565], "pygraph": [0, 20, 89, 112, 164, 169, 174, 197, 249, 254, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 341, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 355, 356, 361, 363, 364, 380, 389, 397, 401, 407, 408, 413, 414, 415, 421, 423, 424, 426, 427, 429, 430, 431, 432, 433, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 516, 518, 519, 522, 523, 524, 525, 527, 528, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 543, 548, 549, 550, 551, 552, 554, 555, 556, 557, 561, 562, 564, 565, 566, 567, 568, 569, 592, 593, 596, 597, 598, 599, 603], "pyresult": 0, "goe": [0, 418, 565], "rememb": 0, "declar": [0, 599], "sometim": [0, 407, 447, 503, 555], "hard": [0, 488, 505, 599], "organ": 0, "those": [0, 108, 112, 113, 117, 119, 135, 136, 137, 138, 193, 197, 198, 202, 204, 220, 221, 222, 223, 276, 280, 281, 322, 339, 343, 346, 375, 378, 389, 408, 423, 468, 472, 483, 504, 556, 598, 599, 600, 601, 603], "case": [0, 97, 98, 108, 115, 160, 161, 182, 183, 193, 200, 245, 246, 260, 265, 276, 282, 325, 341, 349, 365, 376, 380, 385, 390, 398, 399, 401, 413, 424, 458, 469, 474, 479, 484, 488, 489, 493, 495, 497, 511, 528, 532, 539, 547, 598, 599, 601, 603], "suggest": 0, "move": [0, 407, 503, 555, 599], "split": 0, "follow": [0, 89, 174, 259, 320, 341, 347, 364, 376, 384, 385, 401, 413, 445, 469, 470, 478, 479, 497, 539, 559, 599, 601, 603], "structur": [0, 349, 395, 396, 490, 491, 518, 519, 524, 551, 596, 598, 599, 603], "have": [0, 52, 68, 81, 89, 102, 103, 140, 141, 158, 159, 160, 161, 165, 169, 174, 187, 188, 225, 226, 243, 244, 245, 246, 250, 254, 259, 270, 309, 312, 313, 320, 322, 323, 333, 336, 337, 362, 374, 386, 396, 401, 414, 416, 417, 420, 467, 480, 491, 494, 497, 517, 524, 530, 533, 539, 547, 557, 564, 567, 574, 581, 589, 597, 598, 599, 601, 603], "deleg": 0, "logic": [0, 320, 401, 497, 539], "call": [0, 22, 23, 89, 132, 143, 151, 161, 174, 217, 228, 236, 246, 259, 294, 304, 320, 321, 322, 341, 347, 364, 376, 384, 385, 401, 407, 413, 419, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 469, 470, 478, 479, 497, 503, 512, 539, 553, 555, 566, 581, 582, 596, 597, 598, 599, 601, 603], "from": [0, 22, 23, 26, 30, 34, 35, 89, 90, 96, 101, 102, 104, 108, 110, 111, 112, 113, 117, 118, 120, 121, 127, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 150, 154, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 173, 174, 175, 181, 186, 187, 189, 193, 195, 196, 197, 198, 202, 203, 205, 206, 212, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 235, 239, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 258, 259, 261, 268, 269, 272, 276, 278, 279, 280, 281, 283, 284, 293, 295, 296, 303, 305, 308, 309, 310, 311, 312, 313, 314, 318, 320, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 346, 347, 356, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 383, 384, 385, 386, 387, 388, 391, 397, 398, 399, 403, 406, 408, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 472, 477, 478, 479, 480, 481, 482, 488, 492, 493, 495, 499, 502, 504, 507, 508, 509, 510, 512, 523, 525, 527, 528, 529, 530, 532, 534, 538, 542, 544, 545, 546, 551, 554, 558, 559, 560, 561, 567, 568, 569, 570, 572, 585, 592, 593, 594, 595, 596, 597, 599, 600, 601], "do": [0, 89, 169, 174, 254, 320, 341, 364, 376, 384, 385, 396, 413, 469, 478, 479, 488, 489, 491, 524, 598, 599, 603], "question": 0, "contact": 0, "u": [0, 141, 226, 341, 349, 364, 376, 380, 384, 385, 413, 420, 469, 474, 478, 479, 495, 512, 530, 567, 579, 597, 599, 601], "channel": 0, "slack": 0, "re": [0, 89, 168, 174, 253, 314, 395, 396, 407, 490, 491, 503, 518, 519, 524, 555, 598, 599, 603], "work": [0, 22, 23, 338, 415, 489, 510, 538, 592, 596, 598, 599, 601, 602, 603], "write": [0, 154, 168, 173, 239, 253, 258, 305, 314, 318, 402, 498, 541, 592, 598, 599, 603], "made": [0, 89, 141, 174, 226, 259, 322, 323, 599, 601, 603], "ani": [0, 89, 102, 108, 114, 116, 117, 118, 119, 120, 121, 154, 160, 161, 168, 174, 187, 193, 199, 201, 202, 203, 204, 205, 206, 239, 245, 246, 253, 259, 269, 276, 283, 284, 290, 305, 314, 320, 321, 334, 345, 347, 353, 356, 390, 398, 411, 418, 424, 430, 431, 432, 433, 434, 435, 436, 438, 442, 443, 444, 447, 449, 454, 455, 456, 457, 484, 488, 489, 493, 508, 511, 521, 522, 526, 528, 530, 543, 545, 547, 559, 565, 569, 592, 594, 596, 597, 598, 599, 601, 603], "petgraph": [0, 599], "ha": [0, 89, 115, 116, 117, 118, 119, 129, 142, 152, 153, 159, 160, 161, 166, 167, 174, 200, 201, 202, 203, 204, 214, 227, 237, 238, 244, 245, 246, 251, 252, 259, 282, 292, 320, 321, 334, 343, 345, 347, 355, 356, 357, 358, 359, 360, 376, 382, 384, 385, 409, 417, 418, 420, 469, 476, 478, 479, 488, 489, 506, 512, 526, 529, 530, 549, 556, 562, 564, 565, 567, 572, 581, 596, 598, 599], "depend": [0, 160, 161, 245, 246, 420, 538, 567, 593, 597, 598, 599, 601], "probabl": [0, 418, 419, 420, 512, 565, 566, 567, 597, 599], "sens": 0, "standalon": [0, 596, 599], "provid": [0, 97, 98, 102, 114, 116, 117, 118, 119, 124, 125, 126, 131, 133, 134, 150, 156, 165, 169, 171, 182, 183, 187, 199, 201, 202, 203, 204, 209, 210, 211, 216, 218, 219, 235, 241, 250, 254, 256, 265, 286, 287, 288, 289, 293, 295, 296, 303, 307, 312, 316, 320, 331, 333, 337, 340, 342, 362, 369, 370, 371, 373, 374, 386, 387, 395, 396, 397, 398, 399, 414, 417, 425, 462, 463, 464, 466, 467, 470, 480, 481, 490, 491, 492, 493, 495, 518, 519, 520, 521, 522, 524, 528, 530, 531, 532, 534, 538, 540, 549, 556, 560, 564, 596, 597, 598, 599, 603], "api": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603], "other": [0, 7, 20, 101, 135, 136, 137, 138, 159, 161, 164, 165, 186, 220, 221, 222, 223, 244, 246, 249, 250, 268, 311, 312, 327, 328, 329, 330, 339, 367, 368, 369, 370, 375, 402, 406, 418, 442, 455, 460, 461, 462, 463, 468, 498, 502, 506, 512, 523, 530, 541, 544, 554, 558, 565, 597, 598, 600, 601, 603], "unlik": [0, 68, 93, 178, 262, 598], "design": [0, 597, 598, 599], "top": [0, 344, 377, 471, 599], "algorithm": [0, 20, 22, 23, 115, 200, 282, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 341, 343, 356, 363, 364, 367, 368, 369, 370, 371, 373, 374, 375, 376, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 398, 400, 401, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 496, 497, 503, 505, 507, 509, 511, 512, 513, 518, 522, 524, 528, 529, 533, 535, 536, 537, 539, 547, 553, 555, 556, 557, 558, 564, 565, 566, 567, 568, 570, 571, 578, 584, 595, 596, 598, 599, 603], "kei": [0, 97, 98, 101, 161, 168, 182, 183, 186, 246, 253, 265, 268, 314, 327, 328, 329, 330, 337, 338, 343, 346, 355, 361, 367, 368, 369, 370, 374, 375, 378, 382, 385, 386, 387, 389, 390, 392, 397, 398, 399, 402, 407, 408, 413, 414, 415, 423, 424, 426, 429, 460, 461, 462, 463, 467, 468, 470, 472, 476, 479, 480, 481, 483, 484, 485, 488, 489, 492, 493, 494, 495, 496, 498, 503, 504, 511, 514, 527, 528, 530, 532, 538, 541, 546, 547, 548, 555, 592, 593, 596, 599], "differ": [0, 68, 110, 111, 120, 121, 169, 195, 196, 205, 206, 254, 278, 279, 283, 284, 313, 333, 359, 360, 362, 388, 409, 420, 421, 482, 488, 489, 530, 536, 567, 592, 596, 597, 599, 601, 603], "keep": [0, 341, 364, 376, 384, 407, 469, 478, 503, 536, 555, 598, 599, 603], "mind": [0, 598], "public": [0, 598, 599], "interfac": [0, 596, 598, 599, 603], "treat": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 120, 121, 154, 205, 206, 239, 283, 284, 305, 319, 324, 325, 338, 365, 387, 388, 392, 393, 394, 407, 411, 415, 416, 421, 428, 458, 481, 482, 503, 510, 525, 530, 545, 555, 569, 594, 598, 599], "where": [0, 34, 35, 57, 77, 92, 93, 97, 98, 107, 110, 111, 114, 116, 117, 118, 119, 142, 152, 153, 159, 160, 161, 166, 167, 172, 177, 178, 182, 183, 192, 195, 196, 199, 201, 202, 203, 204, 227, 237, 238, 244, 245, 246, 251, 252, 257, 261, 262, 265, 275, 278, 279, 317, 320, 324, 325, 332, 337, 339, 346, 347, 349, 350, 351, 353, 365, 372, 374, 375, 378, 380, 386, 389, 392, 393, 394, 397, 401, 407, 408, 411, 414, 418, 420, 423, 426, 427, 428, 430, 442, 454, 455, 458, 465, 467, 468, 470, 472, 474, 480, 483, 485, 486, 487, 488, 489, 492, 494, 496, 497, 503, 504, 508, 512, 527, 530, 533, 535, 538, 539, 543, 553, 555, 556, 565, 567, 569, 596, 598, 599, 600, 601, 603], "compat": [0, 89, 144, 229, 298, 376, 384, 385, 469, 478, 479, 597, 599], "doesn": [0, 108, 173, 193, 258, 276, 318, 440, 451, 517, 598, 599, 601, 603], "t": [0, 91, 92, 97, 98, 101, 108, 109, 111, 115, 122, 124, 141, 171, 173, 176, 177, 182, 183, 186, 193, 194, 196, 200, 207, 209, 226, 256, 258, 260, 261, 265, 268, 276, 277, 279, 282, 285, 287, 316, 318, 323, 331, 338, 339, 357, 358, 359, 360, 371, 375, 387, 389, 407, 411, 415, 416, 423, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 464, 468, 481, 483, 503, 508, 517, 535, 536, 547, 555, 556, 569, 580, 581, 598, 599, 600, 601, 603], "matter": 0, "onli": [0, 26, 30, 34, 35, 36, 40, 44, 48, 52, 56, 57, 59, 67, 73, 77, 85, 89, 97, 98, 104, 115, 117, 119, 133, 134, 142, 152, 153, 155, 157, 159, 160, 161, 166, 167, 170, 174, 182, 183, 189, 200, 202, 204, 218, 219, 227, 237, 238, 240, 242, 244, 245, 246, 251, 252, 255, 259, 265, 272, 282, 286, 306, 308, 315, 319, 320, 321, 324, 327, 328, 329, 330, 333, 337, 338, 346, 347, 350, 351, 357, 358, 359, 360, 361, 362, 363, 367, 368, 369, 370, 374, 375, 378, 383, 385, 386, 389, 390, 392, 398, 399, 408, 411, 413, 414, 415, 423, 424, 426, 460, 461, 462, 463, 467, 468, 472, 477, 479, 480, 483, 484, 485, 493, 495, 504, 508, 510, 511, 514, 528, 530, 532, 533, 546, 547, 561, 569, 593, 597, 598, 599, 601, 603], "addition": [0, 89, 174, 259, 598, 599, 603], "should": [0, 68, 92, 93, 159, 161, 165, 170, 177, 178, 244, 246, 250, 255, 261, 262, 312, 315, 335, 341, 364, 373, 376, 384, 385, 401, 413, 434, 438, 440, 441, 450, 466, 469, 478, 479, 497, 511, 518, 519, 524, 539, 571, 578, 584, 597, 598, 599], "done": [0, 320, 322, 323, 598, 599, 601], "via": [0, 592, 598, 599, 603], "cargo": [0, 597, 599], "doc": [0, 547, 596], "It": [0, 26, 30, 34, 35, 40, 44, 48, 52, 56, 57, 59, 67, 73, 77, 81, 89, 117, 119, 120, 121, 161, 163, 164, 174, 202, 204, 205, 206, 246, 248, 249, 259, 283, 284, 311, 319, 320, 324, 327, 328, 329, 330, 331, 334, 335, 337, 338, 343, 345, 346, 347, 350, 351, 355, 356, 357, 358, 359, 360, 367, 368, 369, 370, 371, 373, 374, 378, 382, 385, 386, 387, 388, 392, 393, 394, 399, 407, 409, 410, 411, 413, 414, 415, 421, 426, 427, 428, 460, 461, 462, 463, 464, 466, 467, 472, 476, 479, 480, 481, 482, 485, 486, 487, 495, 503, 505, 506, 507, 508, 518, 519, 524, 530, 532, 533, 547, 551, 555, 556, 562, 568, 569, 592, 596, 597, 598, 599, 601, 603], "expect": [0, 154, 165, 173, 239, 250, 258, 305, 312, 318, 325, 357, 358, 359, 360, 365, 390, 392, 393, 394, 398, 401, 402, 418, 424, 426, 427, 428, 429, 458, 484, 485, 486, 487, 488, 489, 493, 497, 498, 511, 528, 530, 533, 534, 535, 536, 539, 541, 547, 548, 556, 557, 565, 592, 597, 598, 599], "also": [0, 89, 119, 142, 152, 153, 164, 166, 167, 174, 204, 227, 237, 238, 249, 251, 252, 259, 311, 313, 325, 341, 346, 357, 358, 359, 360, 364, 365, 376, 378, 384, 385, 388, 392, 393, 394, 395, 396, 408, 411, 413, 417, 418, 421, 426, 427, 428, 438, 449, 458, 469, 472, 478, 479, 482, 485, 486, 487, 490, 491, 504, 508, 512, 518, 519, 523, 524, 525, 535, 536, 553, 558, 564, 565, 569, 594, 595, 596, 597, 598, 599, 601, 603], "being": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "so": [0, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 163, 164, 165, 174, 248, 249, 250, 259, 261, 279, 311, 312, 319, 324, 341, 364, 376, 384, 385, 401, 413, 419, 441, 452, 469, 470, 478, 479, 497, 539, 566, 597, 598, 599, 600, 601, 603], "coverag": 0, "onc": [0, 142, 152, 153, 161, 166, 167, 227, 237, 238, 246, 251, 252, 322, 533, 553, 597, 598, 599, 603], "ve": [0, 101, 186, 268, 600, 601], "verifi": 0, "doe": [0, 89, 163, 165, 174, 248, 250, 259, 269, 312, 530, 551, 596, 598, 599, 601], "break": [0, 364, 384, 478, 599], "successfulli": 0, "befor": [0, 102, 174, 187, 259, 399, 401, 495, 497, 530, 532, 539, 599, 601], "open": [0, 154, 168, 173, 239, 253, 258, 314, 318, 598, 599], "ll": [0, 597, 599, 600, 601], "suit": 0, "easiest": 0, "wai": [0, 341, 376, 469, 579, 598, 603], "nox": [0, 599], "instal": [0, 538, 592, 593, 596, 598, 599], "pip": [0, 592, 593, 597, 599, 603], "sever": [0, 341, 364, 376, 384, 385, 413, 469, 478, 479, 488, 489, 598, 599, 603], "advantag": [0, 596, 597, 599], "biggest": [0, 598, 599], "isol": [0, 7, 599], "virtualenv": 0, "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "mean": [0, 89, 98, 174, 183, 259, 335, 373, 396, 416, 466, 491, 506, 524, 525, 526, 545, 563, 594, 596, 598, 599, 603], "pollut": 0, "system": [0, 431, 434, 596, 597, 599], "howev": [0, 89, 174, 259, 592, 596, 597, 598, 599, 603], "default": [0, 89, 120, 121, 133, 134, 140, 154, 159, 161, 164, 169, 174, 205, 206, 218, 219, 225, 239, 244, 246, 249, 254, 259, 283, 284, 305, 311, 320, 325, 326, 327, 328, 329, 330, 332, 339, 349, 365, 366, 367, 368, 369, 370, 372, 375, 376, 380, 384, 385, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 401, 407, 409, 410, 411, 412, 413, 421, 423, 424, 426, 427, 428, 434, 436, 438, 440, 441, 443, 444, 450, 458, 459, 465, 468, 469, 474, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 497, 503, 505, 506, 507, 508, 509, 511, 518, 519, 524, 528, 530, 532, 533, 539, 547, 549, 555, 557, 562, 568, 569, 570, 571, 578, 584, 592, 593, 598, 599, 603], "recompil": [0, 599], "everi": [0, 169, 254, 320, 390, 397, 398, 401, 419, 424, 442, 455, 484, 492, 493, 494, 497, 511, 516, 523, 525, 527, 528, 530, 534, 539, 544, 547, 556, 558, 566, 588, 592, 599, 600], "time": [0, 89, 91, 159, 160, 161, 165, 174, 176, 244, 245, 246, 250, 312, 364, 384, 397, 409, 417, 418, 420, 445, 470, 478, 492, 506, 512, 513, 527, 533, 564, 565, 567, 572, 573, 575, 580, 581, 585, 595, 597, 598, 599, 601, 603], "even": [0, 320, 321, 352, 381, 439, 440, 441, 450, 451, 452, 475, 530, 598, 599], "avoid": [0, 89, 174, 556, 601], "packag": [0, 596, 597, 599], "rerun": 0, "without": [0, 93, 107, 168, 178, 192, 253, 262, 275, 314, 334, 341, 357, 358, 359, 360, 376, 385, 413, 469, 479, 522, 526, 547, 599, 601, 603], "flag": [0, 364, 384, 478, 533, 598, 603], "recent": 0, "ran": [0, 603], "repo": 0, "otherwis": [0, 127, 128, 129, 212, 213, 214, 290, 291, 292, 323, 395, 396, 400, 412, 490, 491, 509, 518, 519, 524, 537, 570, 599], "out": [0, 137, 138, 141, 222, 223, 226, 362, 417, 526, 546, 564, 574, 581, 588, 589, 599], "date": [0, 599], "miss": [0, 505, 598, 599], "outsid": [0, 597, 599, 601], "root": [0, 347, 356, 581, 597], "shim": 0, "conflict": [0, 453], "compil": [0, 596, 597, 599], "extens": [0, 401, 416, 497, 539, 551, 598, 599], "test_with_vers": 0, "target": [0, 26, 30, 40, 48, 73, 77, 102, 107, 108, 110, 111, 114, 133, 141, 165, 170, 172, 187, 192, 193, 195, 196, 199, 218, 226, 250, 255, 257, 275, 276, 278, 279, 295, 312, 315, 317, 326, 327, 328, 329, 330, 331, 338, 341, 357, 358, 359, 360, 363, 364, 366, 367, 368, 369, 370, 371, 376, 383, 384, 385, 387, 392, 394, 403, 413, 415, 426, 428, 459, 460, 461, 462, 463, 464, 469, 477, 478, 479, 481, 485, 487, 499, 510, 542, 572, 575, 587, 599, 601, 603], "For": [0, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 97, 98, 101, 112, 113, 142, 143, 152, 153, 154, 159, 163, 166, 167, 168, 169, 173, 174, 182, 183, 186, 197, 198, 227, 228, 237, 238, 239, 244, 248, 251, 252, 253, 254, 258, 259, 268, 280, 281, 305, 314, 318, 319, 320, 324, 326, 327, 328, 329, 330, 335, 341, 346, 347, 353, 357, 358, 359, 360, 364, 366, 367, 368, 369, 370, 373, 376, 378, 382, 384, 385, 390, 392, 393, 394, 395, 396, 398, 399, 408, 409, 413, 416, 417, 418, 419, 424, 426, 427, 428, 459, 460, 461, 462, 463, 466, 469, 472, 478, 479, 484, 485, 486, 487, 490, 491, 493, 495, 504, 505, 506, 511, 516, 518, 519, 523, 525, 526, 528, 532, 533, 534, 543, 544, 545, 547, 551, 556, 557, 558, 562, 564, 565, 566, 579, 593, 594, 597, 598, 599, 600, 601, 603], "exampl": [0, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 101, 112, 113, 154, 159, 163, 168, 173, 174, 186, 197, 198, 239, 244, 248, 253, 258, 259, 268, 280, 281, 305, 314, 318, 319, 320, 324, 325, 326, 327, 328, 329, 330, 341, 346, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 376, 378, 384, 385, 392, 393, 394, 395, 396, 399, 408, 409, 412, 413, 426, 427, 428, 458, 459, 460, 461, 462, 463, 469, 472, 478, 479, 485, 486, 487, 490, 491, 495, 504, 505, 506, 509, 518, 519, 524, 532, 533, 534, 535, 536, 556, 562, 570, 593, 597, 598, 599, 601, 603], "launch": [0, 326, 327, 328, 329, 330, 366, 367, 368, 369, 370, 392, 393, 394, 399, 409, 426, 427, 428, 459, 485, 486, 487, 495, 505, 506, 532, 562], "3": [0, 30, 52, 68, 81, 89, 97, 98, 104, 112, 113, 114, 116, 117, 118, 119, 142, 143, 152, 153, 154, 163, 165, 166, 167, 173, 174, 182, 183, 189, 197, 198, 199, 201, 202, 203, 204, 227, 228, 237, 238, 239, 248, 250, 251, 252, 258, 259, 272, 280, 281, 305, 312, 318, 320, 341, 353, 357, 358, 359, 360, 364, 376, 378, 384, 385, 408, 409, 412, 413, 438, 439, 440, 441, 445, 448, 449, 450, 451, 469, 472, 478, 479, 488, 489, 494, 496, 504, 506, 509, 516, 523, 525, 533, 543, 544, 545, 553, 558, 570, 594, 595, 598, 599, 600, 601, 603], "11": [0, 448, 596, 597], "command": [0, 592], "e": [0, 97, 98, 101, 114, 116, 117, 118, 119, 130, 142, 143, 149, 152, 153, 166, 167, 182, 183, 186, 199, 201, 202, 203, 204, 215, 227, 228, 234, 237, 238, 251, 252, 268, 269, 389, 397, 401, 409, 418, 423, 445, 448, 483, 492, 497, 505, 512, 527, 529, 539, 547, 557, 561, 565, 572, 575, 576, 577, 579, 582, 583, 599, 601, 603], "just": [0, 89, 347, 353, 357, 358, 359, 360, 395, 396, 490, 491, 518, 519, 524, 593, 594, 596, 597, 598, 599, 603], "pass": [0, 112, 113, 140, 159, 161, 164, 169, 173, 197, 198, 225, 244, 246, 249, 254, 258, 280, 281, 311, 318, 325, 339, 346, 357, 358, 359, 360, 365, 375, 378, 389, 390, 392, 393, 394, 395, 396, 398, 401, 402, 410, 412, 417, 422, 423, 424, 426, 427, 428, 429, 458, 468, 472, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 497, 498, 507, 509, 511, 513, 516, 518, 519, 523, 524, 525, 528, 530, 533, 534, 535, 536, 539, 541, 547, 548, 556, 557, 564, 568, 570, 592, 593, 598, 599, 600, 601], "select": [0, 391, 505, 547, 603], "regex": 0, "runner": [0, 599], "dag": [0, 7, 20, 89, 168, 174, 253, 314, 320, 325, 340, 342, 357, 358, 359, 360, 365, 529, 530, 559, 560, 561, 599], "id": [0, 89, 154, 174, 239, 259, 305, 356, 391, 395, 396, 407, 412, 490, 491, 503, 509, 518, 519, 524, 529, 555, 570, 599], "argument": [0, 112, 113, 117, 119, 140, 161, 174, 197, 198, 202, 204, 225, 246, 259, 280, 281, 320, 327, 328, 329, 330, 331, 338, 349, 350, 351, 357, 358, 359, 360, 365, 367, 368, 369, 370, 371, 376, 380, 384, 385, 387, 396, 407, 412, 413, 415, 420, 458, 460, 461, 462, 463, 464, 469, 474, 478, 479, 481, 491, 503, 509, 524, 530, 533, 549, 555, 567, 570, 599, 603], "after": [0, 89, 101, 165, 174, 186, 250, 259, 268, 312, 574, 581, 588, 589, 598, 599, 601, 603], "bare": 0, "option": [0, 89, 101, 102, 120, 121, 140, 154, 165, 168, 169, 173, 174, 186, 187, 205, 206, 225, 239, 250, 253, 254, 258, 259, 268, 269, 283, 284, 305, 312, 314, 318, 325, 331, 336, 337, 338, 341, 344, 347, 348, 349, 356, 363, 364, 365, 371, 374, 376, 377, 379, 380, 383, 384, 385, 386, 387, 388, 390, 391, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 426, 427, 429, 458, 464, 467, 469, 471, 473, 474, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 492, 493, 497, 498, 500, 501, 502, 503, 509, 511, 512, 518, 524, 527, 528, 533, 535, 536, 539, 541, 547, 548, 549, 550, 552, 554, 555, 557, 564, 565, 566, 567, 570, 592, 593, 598, 599], "refer": [0, 45, 103, 135, 136, 137, 138, 164, 165, 169, 188, 220, 221, 222, 223, 249, 250, 254, 270, 311, 312, 313, 346, 378, 390, 398, 410, 424, 472, 484, 493, 507, 511, 528, 547, 553, 568, 592, 597, 598, 599, 603], "stestr": 0, "readthedoc": 0, "io": [0, 596, 599], "en": [0, 547, 599], "html": [0, 553], "class": [0, 20, 26, 30, 34, 35, 36, 40, 44, 45, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 174, 259, 319, 320, 324, 332, 340, 341, 342, 364, 376, 384, 385, 413, 458, 469, 478, 479, 571, 578, 584, 596, 597, 599, 603], "individu": [0, 599], "method": [0, 26, 30, 36, 40, 48, 52, 68, 73, 77, 81, 85, 89, 91, 102, 110, 111, 114, 116, 117, 118, 119, 120, 121, 131, 133, 134, 140, 144, 150, 163, 168, 174, 176, 187, 195, 196, 199, 201, 202, 203, 204, 205, 206, 216, 218, 219, 225, 229, 235, 248, 253, 259, 269, 278, 279, 283, 284, 293, 295, 296, 298, 303, 314, 320, 321, 333, 341, 349, 362, 364, 376, 384, 385, 390, 398, 401, 413, 424, 469, 478, 479, 484, 493, 497, 511, 528, 533, 538, 539, 547, 571, 578, 582, 584, 592, 597, 598, 599, 600, 601, 603], "faster": [0, 339, 375, 468, 556, 598, 599], "n": [0, 115, 154, 200, 239, 282, 305, 336, 349, 380, 385, 407, 411, 413, 416, 417, 418, 419, 420, 431, 432, 434, 435, 437, 445, 446, 447, 448, 470, 474, 479, 503, 508, 512, 533, 535, 555, 564, 565, 566, 567, 569, 599, 603], "discov": [0, 363, 383, 477, 580, 588], "test_max_weight_match": 0, "same": [0, 68, 89, 91, 102, 115, 159, 160, 161, 163, 165, 174, 176, 187, 200, 244, 245, 246, 248, 250, 282, 312, 320, 394, 399, 410, 428, 487, 495, 507, 518, 519, 524, 532, 536, 547, 568, 579, 593, 596, 599, 601], "path": [0, 7, 20, 26, 30, 73, 77, 154, 163, 168, 173, 239, 248, 253, 258, 305, 314, 318, 326, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 341, 347, 349, 351, 353, 357, 358, 359, 360, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 385, 386, 387, 388, 389, 392, 393, 394, 397, 399, 401, 402, 403, 411, 413, 414, 415, 423, 426, 427, 428, 429, 430, 443, 454, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 479, 480, 481, 482, 483, 485, 486, 487, 492, 495, 497, 498, 499, 508, 510, 516, 525, 527, 532, 533, 534, 539, 541, 542, 543, 545, 551, 553, 556, 561, 569, 592, 594, 596, 597, 599, 600, 601, 603], "test_nod": 0, "testnod": 0, "test_no_nod": 0, "rel": [0, 405, 407, 501, 503, 552, 555], "each": [0, 89, 108, 140, 142, 152, 153, 161, 163, 166, 167, 173, 174, 193, 225, 227, 237, 238, 246, 248, 251, 252, 258, 259, 276, 313, 318, 320, 321, 327, 328, 329, 330, 331, 332, 336, 338, 339, 341, 343, 345, 347, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 364, 367, 368, 369, 370, 371, 372, 375, 376, 380, 382, 384, 385, 387, 388, 389, 392, 393, 394, 395, 396, 401, 402, 405, 406, 407, 411, 412, 413, 415, 416, 418, 419, 420, 421, 423, 428, 429, 432, 435, 441, 447, 452, 453, 460, 461, 462, 463, 464, 465, 468, 469, 474, 476, 478, 479, 481, 482, 483, 488, 489, 490, 491, 497, 498, 501, 502, 503, 509, 511, 514, 518, 519, 520, 521, 524, 529, 533, 534, 535, 536, 539, 541, 546, 547, 548, 549, 552, 554, 555, 556, 559, 565, 566, 567, 569, 570, 577, 583, 588, 592, 597, 598, 599, 600, 601, 603], "fail": [0, 392, 393, 394, 426, 427, 428, 485, 486, 487, 599], "except": [0, 20, 46, 47, 58, 60, 61, 62, 63, 64, 65, 66, 72, 89, 174, 259, 341, 357, 358, 359, 360, 364, 376, 384, 385, 402, 412, 413, 469, 478, 479, 498, 509, 533, 541, 570, 590, 591, 596, 598, 599], "rais": [0, 89, 91, 102, 114, 116, 118, 122, 123, 124, 125, 126, 131, 134, 141, 150, 155, 157, 168, 170, 171, 173, 174, 176, 187, 199, 201, 203, 207, 208, 209, 210, 211, 216, 219, 226, 235, 240, 242, 253, 255, 256, 258, 259, 285, 286, 287, 288, 289, 306, 308, 314, 315, 316, 318, 320, 321, 327, 328, 331, 337, 338, 341, 354, 357, 358, 359, 360, 364, 366, 367, 368, 369, 370, 371, 373, 374, 376, 384, 385, 386, 387, 397, 402, 407, 413, 422, 425, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 469, 478, 479, 480, 481, 492, 498, 503, 513, 516, 523, 525, 529, 533, 534, 540, 541, 551, 555, 556, 559, 560, 561, 598, 599, 601], "save": [0, 592], "output": [0, 120, 121, 160, 161, 164, 168, 169, 173, 205, 206, 245, 246, 249, 253, 254, 258, 283, 284, 311, 313, 314, 318, 320, 325, 326, 332, 337, 363, 365, 366, 372, 374, 383, 386, 388, 397, 402, 403, 414, 421, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 465, 467, 477, 480, 492, 498, 499, 527, 529, 530, 533, 538, 541, 542, 548, 592, 599, 600, 601], "imag": [0, 168, 253, 268, 314, 439, 440, 450, 451, 592, 598, 599, 600, 601, 603], "current": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "ensur": [0, 89, 170, 174, 255, 295, 315, 597, 599], "usabl": [0, 599], "clutter": 0, "clean": 0, "up": [0, 320, 368, 370, 461, 463, 601, 603], "view": [0, 412, 509, 518, 519, 524, 570, 598, 601], "inspect": [0, 601], "common": [0, 494, 520, 547, 599, 601], "set": [0, 89, 91, 102, 123, 126, 133, 134, 154, 159, 164, 169, 173, 174, 176, 187, 208, 211, 218, 219, 239, 244, 249, 254, 258, 259, 269, 286, 289, 305, 311, 318, 320, 321, 326, 327, 328, 329, 330, 332, 333, 334, 338, 339, 344, 345, 347, 352, 353, 356, 357, 358, 362, 366, 367, 368, 369, 370, 372, 375, 377, 381, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 401, 404, 407, 409, 410, 411, 412, 413, 415, 419, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 465, 468, 471, 475, 479, 481, 483, 484, 485, 486, 487, 490, 491, 493, 495, 497, 500, 503, 505, 506, 507, 508, 509, 510, 518, 519, 520, 521, 524, 528, 529, 530, 531, 532, 533, 538, 539, 540, 550, 555, 556, 562, 566, 568, 569, 570, 593, 594, 598, 599, 600, 601, 603], "rustworkx_test_preserve_imag": 0, "environ": [0, 326, 327, 328, 329, 330, 366, 367, 368, 369, 370, 392, 393, 394, 399, 409, 411, 426, 427, 428, 459, 485, 486, 487, 495, 505, 506, 508, 511, 532, 562, 569, 597, 599, 603], "variabl": [0, 326, 327, 328, 329, 330, 366, 367, 368, 369, 370, 392, 393, 394, 399, 409, 411, 426, 427, 428, 459, 485, 486, 487, 495, 505, 506, 508, 532, 562, 569, 599], "valu": [0, 97, 98, 101, 102, 112, 113, 120, 121, 140, 165, 168, 182, 183, 186, 187, 197, 198, 205, 206, 225, 250, 253, 265, 268, 280, 281, 283, 284, 312, 314, 320, 325, 327, 328, 329, 330, 331, 337, 338, 339, 343, 344, 346, 348, 361, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 397, 398, 399, 401, 402, 404, 405, 406, 407, 408, 411, 413, 414, 415, 421, 423, 424, 426, 427, 428, 429, 431, 434, 436, 438, 443, 444, 449, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 511, 514, 527, 528, 532, 533, 534, 535, 536, 539, 541, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 569, 592, 593, 599, 600, 603], "skip": [0, 102, 165, 187, 250, 312, 350, 351, 599], "cleanup": 0, "enabl": [0, 89, 102, 168, 174, 187, 253, 314, 392, 393, 394, 401, 426, 427, 428, 485, 486, 487, 497, 539, 596, 598, 599], "look": [0, 115, 200, 282, 598, 599, 601, 603], "correct": [0, 599], "1": [0, 26, 30, 36, 45, 52, 68, 73, 81, 85, 89, 97, 98, 101, 104, 112, 114, 116, 117, 118, 119, 142, 143, 152, 153, 154, 163, 166, 167, 173, 174, 182, 183, 186, 189, 197, 199, 201, 202, 203, 204, 227, 228, 237, 238, 239, 248, 251, 252, 258, 259, 268, 272, 280, 305, 318, 320, 325, 327, 328, 329, 330, 331, 335, 337, 338, 339, 341, 344, 346, 348, 349, 353, 356, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 384, 385, 386, 388, 390, 392, 393, 394, 398, 401, 405, 406, 407, 408, 411, 413, 414, 415, 417, 418, 421, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 473, 474, 478, 479, 480, 482, 484, 485, 486, 487, 488, 489, 493, 494, 496, 497, 501, 502, 503, 504, 508, 511, 512, 516, 522, 523, 525, 528, 529, 533, 535, 536, 537, 539, 543, 544, 545, 549, 552, 553, 554, 555, 556, 557, 558, 561, 563, 564, 565, 568, 569, 593, 594, 596, 598, 600, 601, 603], "preserv": [0, 102, 187, 269, 376, 384, 385, 469, 478, 479, 599], "finish": [0, 320, 335, 373, 466, 581], "As": [0, 160, 161, 245, 246, 294, 304, 599, 601], "crate": [0, 596, 599], "own": 0, "combin": [0, 101, 102, 169, 186, 187, 254, 268, 269, 599], "embed": 0, "book": 0, "how": [0, 325, 339, 343, 365, 375, 388, 389, 392, 393, 394, 411, 421, 423, 426, 427, 428, 458, 468, 482, 483, 485, 486, 487, 508, 535, 536, 569, 592, 598, 599, 601], "lang": [0, 547], "org": [0, 347, 390, 424, 439, 440, 445, 448, 450, 451, 453, 484, 505, 551, 553, 556, 599], "ch11": 0, "01": [0, 347, 599], "primari": 0, "languag": [0, 551, 596, 599], "written": [0, 356, 592, 596, 597, 598, 599, 601], "rustfmt": 0, "enforc": [0, 601], "consist": [0, 68, 140, 165, 225, 250, 312, 551, 595, 599, 601], "job": [0, 599, 601], "configur": 0, "check": [0, 89, 102, 127, 128, 139, 161, 168, 174, 187, 212, 213, 224, 246, 253, 290, 291, 314, 320, 357, 358, 359, 360, 390, 395, 396, 398, 412, 424, 470, 484, 490, 491, 493, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 533, 537, 547, 570, 599, 601], "luckili": 0, "adapt": [0, 356, 407, 503, 555, 598], "simpl": [0, 325, 326, 332, 347, 365, 366, 372, 392, 393, 394, 395, 396, 399, 412, 426, 427, 428, 432, 458, 459, 465, 470, 485, 486, 487, 490, 491, 495, 509, 518, 519, 524, 532, 535, 536, 553, 557, 570, 597, 599, 601], "fmt": 0, "automat": [0, 599], "restyl": 0, "match": [0, 7, 20, 112, 113, 114, 115, 116, 117, 118, 119, 197, 198, 199, 200, 201, 202, 203, 204, 280, 281, 282, 350, 351, 395, 396, 412, 490, 491, 509, 518, 519, 520, 521, 524, 533, 547, 570, 599], "what": [0, 598, 599], "step": [0, 320], "clippi": 0, "some": [0, 112, 113, 197, 198, 280, 281, 320, 325, 339, 341, 365, 375, 376, 392, 393, 394, 419, 426, 427, 428, 458, 468, 469, 485, 486, 487, 535, 536, 566, 579, 596, 599, 600], "small": [0, 401, 453, 497, 539, 599], "piec": 0, "namespac": 0, "actual": [0, 335, 373, 466, 598, 601], "black": [0, 168, 253, 314, 341, 364, 376, 384, 439, 440, 450, 451, 469, 478, 572, 593, 599, 603], "flake8": 0, "repositori": 0, "mode": [0, 168, 253, 314, 439, 440, 450, 451, 592, 599, 600, 601, 603], "conform": 0, "rule": 0, "return": [0, 20, 26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 159, 161, 164, 165, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 246, 249, 250, 251, 252, 253, 254, 257, 258, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 592, 593, 594, 596, 597, 598, 599, 600, 601, 603], "format": [0, 154, 239, 305, 340, 342, 402, 429, 498, 541, 547, 548, 551, 592, 598, 599, 603], "error": [0, 131, 133, 134, 141, 150, 168, 216, 218, 219, 226, 235, 253, 293, 295, 296, 303, 314, 320, 357, 358, 359, 360, 390, 398, 401, 407, 424, 484, 493, 497, 503, 511, 528, 531, 539, 547, 551, 555, 597, 599, 601], "updat": [0, 89, 164, 170, 171, 174, 249, 255, 256, 259, 260, 261, 262, 278, 279, 311, 315, 316, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 599, 603], "handl": [0, 365, 422, 458, 513, 598, 599, 603], "venv": 0, "render": [0, 603], "web": [0, 445, 547], "browser": 0, "built": [0, 597, 599], "locat": [0, 599], "rustworkx_cor": [0, 596, 599], "off": [0, 597, 599, 603], "dir": [0, 496], "signatur": 0, "requir": [0, 68, 112, 113, 197, 198, 280, 281, 320, 359, 360, 376, 384, 385, 399, 441, 452, 469, 478, 479, 495, 532, 592, 597, 598, 599], "stub": 0, "tool": [0, 595, 598, 599, 603], "pyi": 0, "thei": [0, 101, 161, 168, 186, 246, 253, 268, 314, 395, 396, 410, 490, 491, 507, 518, 519, 524, 530, 559, 568, 593, 597, 598, 599, 603], "strip": 0, "more": [0, 89, 115, 154, 174, 200, 239, 259, 282, 305, 320, 322, 323, 341, 343, 347, 349, 355, 376, 380, 382, 399, 401, 406, 448, 469, 474, 476, 495, 497, 502, 532, 533, 539, 551, 553, 554, 592, 593, 595, 596, 597, 598, 599, 603], "mypi": [0, 599], "latest": [0, 599], "veri": [0, 598, 603], "help": 0, "end": [0, 106, 191, 274, 331, 337, 341, 363, 364, 371, 374, 376, 383, 384, 385, 386, 413, 414, 464, 467, 469, 477, 478, 479, 480, 599, 601], "user": [0, 89, 496, 538, 596, 599, 603], "let": [0, 341, 363, 364, 376, 383, 384, 385, 413, 469, 477, 478, 479, 599, 600, 601], "bug": 0, "One": [0, 579, 603], "thing": [0, 598, 603], "necessari": [0, 599, 601], "line": [0, 154, 239, 305, 489, 494, 593, 599], "__init__": [0, 341, 364, 376, 384, 385, 413, 469, 478, 479, 598, 599, 603], "form": [0, 26, 30, 34, 35, 36, 52, 57, 68, 73, 77, 81, 85, 92, 93, 104, 107, 110, 111, 132, 151, 172, 177, 178, 189, 192, 195, 196, 217, 236, 257, 261, 262, 272, 275, 278, 279, 294, 304, 317, 324, 346, 349, 356, 363, 378, 380, 383, 391, 408, 410, 441, 452, 472, 474, 477, 504, 507, 568, 577, 583, 599], "foo": 0, "abl": [0, 597, 599], "access": [0, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 133, 134, 174, 218, 219, 259, 319, 324, 340, 342, 598, 599], "pattern": [0, 595, 599], "face": 0, "must": [0, 120, 121, 168, 205, 206, 253, 283, 284, 314, 335, 350, 357, 358, 359, 360, 373, 386, 398, 414, 439, 440, 450, 451, 466, 480, 493, 528, 547, 557, 592, 593, 598, 599, 601], "explain": 0, "wa": [0, 89, 388, 392, 393, 394, 411, 421, 426, 427, 428, 485, 486, 487, 549, 569, 592, 596, 597, 598, 599, 601], "why": 0, "idea": [0, 401, 497, 539, 599], "behind": 0, "naiv": [0, 98, 183], "limit": [0, 168, 253, 314, 326, 327, 328, 329, 330, 366, 367, 368, 369, 370, 392, 393, 394, 395, 396, 399, 409, 412, 426, 427, 428, 459, 485, 486, 487, 490, 491, 495, 505, 506, 509, 518, 524, 532, 562, 570, 597, 598, 599], "intern": [0, 22, 23, 102, 187, 269, 448, 596, 599, 601], "knowledg": 0, "upgrad": [0, 597], "previou": [0, 321, 347, 405, 501, 552, 559, 599, 603], "program": [0, 596, 597, 599], "would": [0, 89, 91, 102, 133, 134, 159, 174, 176, 187, 218, 219, 244, 259, 326, 327, 328, 329, 330, 366, 367, 368, 369, 370, 392, 393, 394, 395, 396, 399, 409, 412, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 485, 486, 487, 490, 491, 495, 505, 506, 509, 518, 519, 521, 524, 530, 532, 562, 570, 597, 598, 599, 601, 603], "go": [0, 141, 226, 598], "ideal": 0, "too": [0, 120, 121, 205, 206, 283, 284, 597, 599, 600], "context": [0, 599], "sure": [0, 593, 599], "don": [0, 141, 226, 601, 603], "forget": 0, "over": [0, 68, 135, 136, 137, 138, 140, 163, 165, 220, 221, 222, 223, 225, 248, 250, 312, 320, 349, 380, 410, 412, 474, 505, 507, 509, 568, 570, 599, 601], "cycl": [0, 7, 20, 89, 91, 102, 174, 176, 187, 320, 327, 328, 337, 338, 347, 356, 357, 358, 359, 360, 367, 368, 374, 391, 425, 433, 436, 460, 461, 467, 517, 537, 553, 559, 560, 599, 601], "accomplish": [0, 598], "reno": 0, "git": 0, "base": [0, 22, 23, 26, 30, 34, 35, 36, 40, 44, 45, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 102, 174, 187, 259, 269, 319, 320, 324, 339, 340, 342, 365, 375, 389, 390, 395, 396, 398, 412, 418, 423, 424, 458, 468, 470, 483, 484, 490, 491, 493, 496, 505, 509, 514, 518, 519, 522, 524, 528, 533, 538, 546, 553, 565, 570, 571, 578, 584, 598, 599, 600, 601], "workflow": 0, "quit": [0, 603], "straightforward": [0, 598], "checkout": 0, "short": 0, "string": [0, 154, 168, 173, 239, 253, 258, 305, 314, 318, 365, 402, 429, 458, 498, 530, 541, 548, 592, 593, 599, 603], "brief": 0, "space": [0, 512, 549, 599], "describ": [0, 92, 93, 177, 178, 261, 262, 336, 391, 400, 401, 416, 430, 453, 454, 488, 489, 497, 539, 551, 598, 599], "becom": [0, 577, 583, 599], "prefix": [0, 305, 598], "yaml": 0, "releasenot": 0, "text": [0, 409, 506, 512, 593], "editor": 0, "basic": [0, 598, 599], "restructur": 0, "list": [0, 34, 35, 44, 56, 57, 59, 67, 77, 89, 92, 93, 95, 102, 105, 106, 107, 108, 109, 110, 111, 113, 117, 119, 122, 131, 132, 133, 134, 136, 138, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 162, 164, 166, 167, 172, 173, 174, 177, 178, 180, 187, 190, 191, 192, 193, 194, 195, 196, 198, 202, 204, 207, 216, 217, 218, 219, 221, 223, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 247, 249, 251, 252, 257, 258, 259, 261, 262, 264, 269, 273, 274, 275, 276, 277, 278, 279, 281, 285, 293, 294, 296, 297, 298, 299, 300, 303, 304, 305, 310, 311, 317, 318, 319, 321, 322, 324, 326, 328, 330, 331, 332, 335, 338, 340, 341, 342, 347, 350, 351, 353, 354, 356, 363, 364, 366, 368, 370, 371, 372, 373, 376, 383, 384, 385, 387, 391, 405, 407, 413, 415, 420, 425, 430, 431, 432, 433, 434, 435, 436, 438, 442, 443, 444, 447, 449, 454, 455, 456, 457, 459, 461, 463, 464, 465, 466, 469, 477, 478, 479, 481, 501, 503, 505, 512, 526, 529, 530, 533, 549, 551, 552, 555, 556, 557, 558, 559, 560, 567, 592, 593, 594, 598, 599, 600, 603], "under": [0, 596, 599], "categori": 0, "item": [0, 600, 603], "group": [0, 349, 350, 380, 401, 453, 474, 497, 539], "A": [0, 26, 30, 34, 35, 36, 40, 44, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 92, 93, 95, 97, 98, 101, 102, 105, 106, 108, 109, 112, 114, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 142, 143, 144, 145, 146, 150, 151, 152, 153, 159, 161, 164, 165, 166, 167, 168, 169, 174, 177, 178, 180, 182, 183, 186, 187, 190, 191, 193, 194, 197, 199, 201, 202, 203, 204, 205, 206, 207, 216, 217, 218, 219, 227, 228, 229, 230, 231, 235, 236, 237, 238, 244, 246, 249, 250, 251, 252, 253, 254, 259, 261, 262, 264, 265, 268, 269, 270, 273, 274, 276, 277, 280, 283, 284, 285, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 311, 312, 313, 314, 319, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 380, 382, 383, 384, 385, 386, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 476, 477, 478, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 503, 504, 505, 506, 507, 509, 512, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 549, 551, 553, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 570, 571, 578, 584, 592, 593, 594, 595, 596, 597, 599, 601, 603], "mani": [0, 174, 259, 320, 339, 343, 375, 388, 389, 411, 421, 423, 468, 482, 483, 508, 569, 597, 598, 599], "entri": [0, 261, 279, 337, 374, 386, 393, 394, 414, 427, 428, 467, 480, 486, 487, 547, 599], "potenti": [0, 174, 259, 601], "newli": [0, 90, 91, 92, 93, 94, 95, 96, 102, 135, 136, 137, 138, 165, 175, 176, 177, 178, 179, 180, 181, 187, 220, 221, 222, 223, 250, 260, 261, 262, 263, 264, 269, 312, 598], "full": [0, 160, 161, 245, 246, 447, 599], "templat": 0, "delet": [0, 89, 174, 259, 599], "aren": [0, 601], "content": [0, 68, 154, 168, 173, 239, 253, 258, 305, 314, 318, 398, 493, 528, 596, 599], "result": [0, 26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 89, 174, 259, 313, 319, 320, 324, 334, 343, 345, 347, 355, 356, 382, 406, 409, 417, 476, 502, 506, 547, 554, 561, 562, 564, 595, 599, 603], "someth": [0, 399, 495, 532, 593, 598, 599, 601], "featur": [0, 89, 174, 598], "func": [0, 593], "support": [0, 365, 440, 451, 458, 505, 551, 592, 596, 598, 599, 601, 603], "pydigraph": [0, 20, 89, 97, 98, 101, 102, 108, 113, 114, 116, 117, 118, 119, 120, 121, 142, 143, 152, 153, 154, 163, 164, 165, 166, 167, 168, 173, 313, 320, 325, 326, 327, 328, 329, 330, 332, 333, 335, 337, 338, 339, 340, 341, 342, 344, 346, 348, 349, 350, 351, 352, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 474, 497, 510, 511, 513, 514, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 530, 537, 538, 539, 541, 542, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 568, 569, 592, 593, 594, 596, 598, 599, 601, 603], "object": [0, 22, 23, 26, 30, 34, 35, 36, 40, 44, 45, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 108, 109, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 141, 146, 154, 159, 160, 161, 164, 165, 168, 169, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 186, 193, 194, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 226, 231, 239, 244, 245, 246, 249, 250, 253, 254, 256, 258, 259, 260, 261, 263, 264, 265, 268, 276, 277, 283, 284, 285, 286, 287, 289, 300, 305, 311, 312, 313, 314, 316, 318, 319, 320, 324, 325, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 341, 346, 349, 350, 351, 357, 358, 359, 360, 361, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 380, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 396, 398, 401, 402, 407, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 503, 504, 507, 509, 511, 512, 514, 518, 519, 524, 526, 528, 533, 534, 535, 536, 537, 538, 539, 541, 546, 547, 548, 549, 555, 556, 557, 564, 565, 566, 567, 568, 570, 571, 578, 584, 592, 593, 598, 599, 601, 603], "meth": 0, "equival": [0, 52, 68, 81, 142, 143, 165, 227, 228, 250, 268, 312, 399, 430, 454, 495, 532, 561, 596, 599, 601], "conveni": [0, 538, 599], "nativ": [0, 598, 599, 601], "g": [0, 97, 98, 114, 116, 117, 118, 119, 142, 143, 152, 153, 166, 167, 182, 183, 199, 201, 202, 203, 204, 227, 228, 237, 238, 251, 252, 269, 341, 353, 363, 364, 376, 383, 384, 385, 401, 409, 413, 420, 448, 469, 477, 478, 479, 494, 497, 516, 523, 525, 539, 543, 544, 545, 558, 561, 567, 593, 594, 599, 601, 603], "deprec": 0, "bar": 0, "been": [0, 101, 169, 186, 254, 268, 313, 321, 323, 530, 572, 574, 581, 589, 596, 599], "remov": [0, 89, 102, 135, 136, 137, 138, 141, 155, 156, 157, 158, 159, 160, 161, 162, 163, 168, 169, 174, 187, 220, 221, 222, 223, 226, 240, 241, 242, 243, 244, 245, 246, 247, 248, 253, 254, 259, 269, 306, 307, 308, 309, 310, 313, 314, 334, 343, 345, 572, 598, 599, 600], "futur": [0, 321, 599], "supersed": 0, "similar": [0, 365, 401, 458, 497, 539, 598, 599, 603], "accur": 0, "better": [0, 91, 176, 395, 396, 490, 491, 518, 519, 599, 603], "perform": [0, 89, 91, 174, 176, 259, 320, 336, 395, 396, 399, 407, 416, 445, 490, 491, 495, 503, 505, 518, 519, 530, 532, 555, 571, 578, 584, 596, 597, 598, 599, 601], "instead": [0, 89, 154, 159, 161, 169, 170, 174, 239, 244, 246, 254, 255, 259, 305, 315, 347, 399, 402, 412, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 495, 498, 509, 532, 541, 570, 598, 599, 603], "sphinx": 0, "tabl": 0, "enumer": [0, 599], "bullet": 0, "etc": [0, 325, 365, 392, 393, 394, 426, 427, 428, 458, 485, 486, 487, 535, 536, 557, 603], "express": [0, 349, 380, 474, 599], "much": [0, 598, 599], "commit": [0, 599], "pr": 0, "artifact": [0, 376, 384, 385, 469, 478, 479], "part": [0, 341, 343, 364, 376, 384, 385, 413, 469, 478, 479, 557, 590, 596, 597, 599, 603], "inlin": 0, "number": [0, 36, 89, 130, 147, 148, 149, 159, 160, 161, 174, 215, 232, 233, 234, 244, 245, 246, 259, 301, 302, 323, 326, 327, 328, 329, 330, 334, 336, 339, 343, 344, 345, 349, 353, 354, 355, 366, 367, 368, 369, 370, 375, 377, 380, 382, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 403, 404, 407, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 468, 470, 471, 474, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 499, 500, 503, 505, 506, 507, 508, 509, 511, 512, 513, 514, 518, 524, 528, 532, 533, 535, 542, 543, 544, 545, 546, 547, 549, 550, 555, 556, 562, 564, 565, 566, 567, 568, 569, 570, 594, 599, 600], "12345": 0, "fix": [0, 140, 225, 407, 503, 555], "race": 0, "condit": [0, 112, 113, 114, 116, 117, 118, 119, 159, 197, 198, 199, 201, 202, 203, 204, 244, 280, 281, 350, 351, 549, 599, 601], "__": [0, 357, 358, 359, 360, 599], "rst": 0, "restructuredtext": 0, "report": [0, 580, 581, 585, 595, 599], "dure": [0, 320, 391, 599], "0": [0, 26, 30, 34, 35, 36, 45, 52, 59, 68, 73, 77, 81, 85, 89, 97, 98, 104, 112, 114, 116, 117, 118, 119, 120, 121, 142, 143, 152, 153, 154, 163, 166, 167, 168, 173, 174, 182, 183, 189, 197, 199, 201, 202, 203, 204, 205, 206, 227, 228, 237, 238, 239, 248, 251, 252, 253, 258, 259, 272, 280, 283, 284, 305, 314, 318, 319, 320, 325, 326, 327, 328, 329, 330, 331, 332, 338, 339, 341, 346, 353, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 378, 384, 385, 388, 390, 392, 393, 394, 398, 401, 406, 407, 408, 413, 415, 417, 418, 421, 424, 426, 427, 428, 432, 435, 448, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 472, 478, 479, 482, 484, 485, 486, 487, 488, 489, 493, 494, 496, 497, 502, 503, 504, 511, 512, 516, 523, 525, 526, 528, 533, 535, 536, 539, 543, 544, 545, 547, 549, 554, 555, 557, 558, 563, 564, 565, 592, 593, 594, 596, 597, 598, 600, 601, 603], "8": [0, 45, 409, 448, 488, 511, 553, 593, 595, 596, 598, 603], "tag": 0, "standard": [0, 401, 497, 539, 596, 599], "state": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "_build": 0, "particular": [0, 488, 489, 599], "release_not": 0, "submit": 0, "approv": 0, "team": 0, "get": [0, 97, 98, 104, 107, 116, 117, 118, 119, 124, 125, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 149, 150, 151, 152, 153, 166, 167, 170, 172, 182, 183, 189, 192, 201, 202, 203, 204, 209, 210, 215, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 229, 234, 235, 236, 237, 238, 251, 252, 255, 257, 265, 271, 272, 275, 286, 287, 288, 293, 294, 295, 296, 297, 298, 303, 304, 315, 317, 333, 335, 340, 342, 353, 355, 362, 363, 373, 382, 383, 388, 403, 421, 466, 476, 477, 482, 499, 529, 530, 542, 543, 544, 545, 559, 560, 594, 596, 599, 603], "trigger": [0, 505], "subsequ": [0, 599, 603], "mai": [0, 161, 169, 246, 254, 313, 320, 334, 343, 345, 347, 355, 356, 382, 409, 476, 488, 506, 547, 562, 597, 599, 601], "take": [0, 101, 112, 113, 114, 116, 117, 118, 119, 140, 165, 168, 169, 186, 197, 198, 199, 201, 202, 203, 204, 225, 250, 253, 254, 268, 280, 281, 312, 314, 335, 337, 347, 350, 351, 373, 374, 386, 395, 396, 412, 414, 425, 466, 467, 480, 488, 489, 490, 491, 509, 518, 519, 524, 533, 537, 570, 597, 598, 599, 600, 603], "week": 0, "month": 0, "dai": [0, 598, 599, 603], "avail": [0, 45, 411, 508, 569, 592, 595, 597, 598, 599, 603], "propos": [0, 597, 599], "valuabl": 0, "everyth": [0, 598], "highest": 0, "prioriti": [0, 385, 413, 479, 599], "process": [0, 320, 321, 322, 347, 470, 505, 597, 599, 600], "quickli": [0, 599, 603], "activ": 0, "member": [0, 453, 577, 583], "permiss": 0, "final": [0, 101, 186, 268, 599], "mark": [0, 321, 322, 323, 448, 579, 599], "readi": [0, 320, 322, 323, 599], "everyon": 0, "welcom": 0, "extrem": 0, "reduc": [0, 418, 556, 565, 587, 599], "burden": 0, "bit": [0, 597, 601], "back": [0, 341, 376, 385, 413, 469, 479, 576, 579, 598], "forth": [0, 598], "receiv": [0, 165, 250, 312, 397, 492, 527, 597, 599], "feedback": 0, "multipl": [0, 68, 89, 102, 142, 152, 153, 155, 157, 161, 165, 166, 167, 169, 174, 187, 227, 237, 238, 240, 242, 246, 250, 251, 252, 254, 259, 261, 279, 286, 306, 308, 312, 325, 365, 399, 458, 495, 532, 598, 599, 603], "round": [0, 593], "pleas": [0, 598, 599], "discourag": 0, "normal": [0, 339, 375, 389, 423, 468, 483, 511, 593, 597, 598, 599, 600], "qualiti": 0, "appear": [0, 160, 161, 245, 246, 320, 350, 351, 553, 601], "might": [0, 68, 320, 536], "larger": [0, 354, 599, 603], "implic": 0, "obviou": 0, "feel": 0, "free": [0, 445, 599], "adjust": [0, 89, 174, 259, 339, 375, 388, 389, 411, 421, 423, 468, 482, 483, 508, 569, 599], "comment": [0, 154, 239, 305], "anoth": [0, 101, 186, 268, 341, 376, 469, 525, 545, 594, 595, 599, 601, 603], "constrain": 0, "resourc": [0, 597], "infinit": [0, 599], "wait": 0, "period": [0, 441, 452, 599], "fine": 0, "regress": [0, 599], "codebas": 0, "often": [0, 601, 603], "needlessli": 0, "wast": 0, "starvat": 0, "slow": 0, "down": 0, "total": 0, "throughput": 0, "possibl": [0, 320, 331, 371, 409, 412, 417, 418, 419, 464, 509, 559, 563, 564, 565, 566, 570, 597, 599, 603], "try": [0, 341, 364, 376, 384, 385, 412, 413, 469, 478, 479, 509, 570, 597, 599], "bundl": 0, "head": [0, 593, 601, 603], "automerg": 0, "signal": 0, "mergifi": 0, "bot": 0, "enqueu": [0, 341, 376, 469], "onto": [0, 101, 186, 268], "At": [0, 547], "point": [0, 116, 117, 118, 119, 142, 152, 153, 166, 167, 201, 202, 203, 204, 227, 237, 238, 251, 252, 334, 336, 341, 343, 364, 376, 384, 385, 413, 416, 469, 478, 479, 530, 547, 571, 578, 579, 584, 599, 601, 603], "fulli": [0, 516, 597, 599], "autom": [0, 599], "effort": [0, 597], "conserv": 0, "maxim": [0, 343, 355, 382, 476, 521, 523, 533, 544, 545, 558, 594, 599], "idl": 0, "deep": 0, "backlog": 0, "unless": [0, 140, 225, 407, 503, 538, 555, 598, 599], "delai": [0, 599], "intend": [0, 593], "safe": 0, "high": [0, 336, 416, 596, 597, 599], "impact": [0, 599], "secur": 0, "balanc": 0, "risk": 0, "given": [0, 114, 115, 116, 117, 118, 119, 124, 125, 126, 161, 199, 200, 201, 202, 203, 204, 209, 210, 211, 246, 282, 287, 288, 289, 295, 320, 321, 341, 347, 350, 351, 356, 364, 365, 376, 384, 385, 391, 394, 410, 413, 419, 420, 428, 439, 440, 450, 451, 458, 469, 478, 479, 487, 489, 507, 512, 515, 530, 547, 566, 567, 568, 599, 600, 603], "patch": [0, 593, 599], "appropri": [0, 598, 599], "inclus": 0, "riski": 0, "major": [0, 599], "trivial": 0, "fairli": [0, 603], "obscur": 0, "factor": [0, 344, 348, 377, 379, 398, 405, 406, 407, 447, 471, 473, 493, 501, 502, 503, 528, 552, 554, 555, 556, 599], "weigh": 0, "consid": [0, 159, 244, 347, 395, 396, 399, 401, 416, 490, 491, 495, 497, 516, 518, 519, 525, 532, 539, 557], "tiniest": 0, "carri": 0, "realli": 0, "visibl": 0, "benefit": 0, "notic": [0, 599, 601], "self": [0, 312, 334, 341, 343, 345, 347, 352, 355, 364, 376, 381, 382, 384, 385, 409, 413, 417, 469, 475, 476, 478, 479, 506, 531, 562, 564, 598, 599, 603], "signific": 0, "refactor": 0, "lot": [0, 598], "worth": [0, 164, 249, 311, 346, 357, 358, 359, 360, 378, 410, 472, 507, 568, 592, 599], "think": 0, "less": [0, 323, 339, 375, 389, 423, 431, 434, 438, 447, 449, 468, 483, 505, 557], "whether": [0, 89, 112, 113, 117, 119, 159, 174, 197, 198, 202, 204, 244, 259, 280, 281, 339, 350, 351, 364, 375, 384, 389, 420, 423, 468, 470, 478, 483, 516, 520, 521, 522, 523, 525, 538, 567, 598, 599], "simpli": [0, 599, 603], "non": [0, 335, 347, 350, 373, 386, 396, 414, 448, 466, 480, 491, 524, 547, 553, 572, 575, 598, 601], "allow": [0, 89, 91, 169, 174, 176, 254, 259, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 598, 599, 601, 603], "accept": [0, 327, 328, 329, 330, 331, 338, 367, 368, 369, 370, 371, 385, 387, 407, 413, 415, 460, 461, 462, 463, 464, 479, 481, 503, 555, 598, 599], "least": [0, 117, 119, 202, 204, 547, 599, 600], "until": [0, 320, 341, 347, 363, 364, 376, 383, 384, 385, 407, 413, 469, 477, 478, 479, 503, 555, 599], "maintain": [0, 599], "minor": 0, "approach": [0, 489, 599, 603], "reason": 0, "cherri": 0, "pick": [0, 320], "x": [0, 114, 116, 117, 118, 119, 199, 201, 202, 203, 204, 325, 365, 392, 393, 394, 395, 396, 399, 420, 426, 427, 441, 448, 452, 458, 485, 486, 487, 490, 491, 495, 518, 519, 524, 532, 533, 535, 536, 556, 567, 598, 599, 600, 601], "main_commit_id": 0, "squash": 0, "track": [0, 320, 341, 364, 376, 384, 469, 478], "strict": [0, 599], "cleanli": 0, "resolv": [0, 530, 579, 599], "yourself": [0, 599], "messag": [0, 168, 253, 314, 599], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "document": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604], "branch": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "rustworkx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 30, 34, 35, 36, 40, 44, 45, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 174, 259, 319, 320, 324, 571, 578, 584, 599, 600, 601, 604], "chang": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "prior": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "releas": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604], "central": [7, 20, 40, 48, 339, 349, 361, 375, 380, 389, 390, 398, 401, 423, 424, 468, 474, 483, 484, 493, 497, 514, 528, 539, 546, 596, 599, 602], "betweenness_centr": [7, 423, 599, 600], "degree_centr": [7, 599], "edge_betweenness_centr": [7, 339, 599], "eigenvector_centr": [7, 390, 484, 599], "katz_centr": [7, 398, 493, 599], "closeness_centr": [7, 599], "newman_weighted_closeness_centr": [7, 599], "in_degree_centr": [7, 599], "out_degree_centr": [7, 599], "color": [7, 20, 45, 168, 253, 314, 341, 350, 364, 376, 384, 439, 440, 448, 450, 451, 469, 470, 478, 488, 489, 496, 563, 572, 575, 592, 593, 599, 600, 603], "coloringstrategi": [7, 599], "graph_greedy_color": [7, 45, 599], "graph_bipartite_edge_color": [7, 599], "graph_greedy_edge_color": [7, 599], "graph_misra_gries_edge_color": [7, 599], "two_color": [7, 599], "connect": [7, 20, 106, 114, 116, 117, 118, 119, 142, 152, 153, 161, 166, 167, 169, 191, 199, 201, 202, 203, 204, 227, 237, 238, 246, 251, 252, 254, 274, 293, 303, 334, 345, 347, 349, 350, 353, 354, 363, 380, 401, 409, 411, 419, 420, 430, 432, 435, 442, 454, 455, 474, 477, 497, 506, 508, 512, 516, 523, 525, 535, 536, 539, 543, 544, 545, 558, 566, 567, 569, 594, 599, 600, 601, 603], "number_connected_compon": [7, 353, 516, 544, 545, 599], "connected_compon": [7, 543, 558, 594, 599, 603], "node_connected_compon": [7, 599], "is_connect": [7, 523, 525, 543, 599], "number_strongly_connected_compon": [7, 523, 599], "strongly_connected_compon": [7, 353, 544, 594, 599], "is_strongly_connect": [7, 516, 544, 599], "number_weakly_connected_compon": [7, 525, 543, 594, 599], "weakly_connected_compon": [7, 353, 545, 558, 599], "is_weakly_connect": [7, 516, 523, 545, 599], "cycle_basi": [7, 599], "simple_cycl": [7, 599], "digraph_find_cycl": [7, 599], "articulation_point": [7, 599], "bridg": [7, 599], "biconnected_compon": [7, 599], "chain_decomposit": [7, 44, 599], "all_simple_path": [7, 599], "all_pairs_all_simple_path": [7, 399, 495, 532, 599], "stoer_wagner_min_cut": [7, 599], "longest_simple_path": [7, 599], "is_bipartit": [7, 599], "has_path": [7, 599], "connected_subgraph": [7, 599], "dag_longest_path": [7, 358, 359, 360, 599], "dag_longest_path_length": [7, 360, 599], "dag_weighted_longest_path": [7, 599], "dag_weighted_longest_path_length": [7, 599], "is_directed_acyclic_graph": 7, "transitive_reduct": [7, 599], "topological_gener": [7, 599], "domin": [7, 20, 320, 422, 513, 530, 599], "immediate_domin": [7, 599], "dominance_fronti": [7, 599], "oper": [7, 20, 410, 507, 568, 597, 598, 599, 601], "complement": [7, 381, 475, 531, 599], "union": [7, 346, 410, 507, 551, 599], "cartesian_product": [7, 599, 603], "isomorph": [7, 20, 395, 396, 412, 490, 491, 509, 518, 519, 524, 570, 596, 599], "is_isomorph": [7, 395, 412, 490, 509, 570, 599], "is_subgraph_isomorph": [7, 396, 412, 491, 509, 570, 595, 599], "is_isomorphic_node_match": [7, 599], "vf2_map": [7, 599], "link": [7, 20, 398, 402, 429, 493, 498, 528, 541, 548, 556, 598, 599, 603], "analysi": [7, 20, 349, 599, 601], "pagerank": [7, 599], "hit": [7, 599], "max_weight_match": [7, 599], "is_match": [7, 599], "is_maximal_match": 7, "adjacency_matrix": [7, 598, 599], "transit": [7, 409, 506, 547, 561, 599, 603], "core_numb": [7, 599], "graph_line_graph": [7, 599], "metric_closur": [7, 599], "is_planar": [7, 599], "digraph_maximum_bisimul": [7, 59, 319, 599], "shortest": [7, 20, 327, 328, 329, 330, 331, 335, 337, 338, 339, 341, 349, 367, 368, 369, 370, 371, 373, 374, 375, 376, 380, 385, 386, 387, 389, 392, 393, 394, 397, 401, 403, 411, 413, 414, 415, 423, 426, 427, 428, 460, 461, 462, 463, 464, 466, 467, 468, 469, 474, 479, 480, 481, 483, 485, 486, 487, 492, 497, 499, 508, 527, 534, 539, 542, 556, 569, 596, 597, 599, 600], "dijkstra_shortest_path": [7, 77, 597, 599], "dijkstra_shortest_path_length": [7, 73, 595, 599], "all_pairs_dijkstra_shortest_path": [7, 30, 599], "all_pairs_dijkstra_path_length": [7, 595, 599], "bellman_ford_shortest_path": [7, 599], "bellman_ford_shortest_path_length": [7, 599], "all_pairs_bellman_ford_shortest_path": [7, 599], "all_pairs_bellman_ford_path_length": [7, 599], "negative_edge_cycl": [7, 599], "find_negative_cycl": [7, 599], "distance_matrix": [7, 599], "floyd_warshal": [7, 599], "floyd_warshall_numpi": [7, 421, 598, 599], "floyd_warshall_successor_and_dist": [7, 599], "astar_shortest_path": [7, 599], "k_shortest_path_length": [7, 599], "num_shortest_paths_unweight": [7, 599], "unweighted_average_shortest_path_length": [7, 599], "all_shortest_path": [7, 599], "digraph_all_shortest_path": [7, 599], "travers": [7, 20, 341, 357, 358, 359, 360, 363, 364, 376, 383, 384, 385, 386, 413, 414, 469, 477, 478, 479, 480, 590, 591, 599], "dfs_edg": [7, 599], "dfs_search": [7, 578, 599], "bfs_successor": [7, 35, 599], "bfs_predecessor": [7, 34, 599], "bfs_search": [7, 571, 599], "dijkstra_search": [7, 584, 599], "topological_sort": [7, 530, 599, 601], "lexicographical_topological_sort": [7, 599], "descend": [7, 559, 599], "ancestor": [7, 559, 599], "collect_run": [7, 599, 601], "collect_bicolor_run": [7, 599], "dfsvisitor": [7, 364, 384, 478, 599], "bfsvisitor": [7, 341, 376, 469, 599], "dijkstravisitor": [7, 385, 413, 479, 599], "topologicalsort": [7, 599], "minimum_spanning_edg": [7, 599], "minimum_spanning_tre": [7, 599], "steiner_tre": [7, 599], "pydag": [20, 22, 186, 268, 517, 519, 599], "function": [20, 26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 112, 113, 117, 119, 140, 142, 143, 158, 159, 160, 161, 168, 169, 173, 197, 198, 202, 204, 225, 227, 228, 243, 244, 245, 246, 253, 254, 258, 280, 281, 309, 314, 318, 319, 320, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 336, 338, 339, 341, 343, 345, 347, 350, 351, 355, 356, 357, 358, 359, 360, 362, 363, 365, 366, 367, 368, 369, 370, 371, 375, 376, 382, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 398, 399, 401, 402, 407, 409, 410, 411, 412, 413, 415, 416, 418, 421, 423, 424, 425, 426, 427, 428, 440, 451, 458, 459, 460, 461, 462, 463, 464, 468, 469, 476, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 497, 498, 503, 505, 506, 507, 508, 509, 511, 512, 518, 519, 524, 528, 530, 531, 532, 533, 535, 536, 537, 538, 539, 541, 547, 549, 553, 555, 557, 558, 562, 565, 568, 569, 570, 579, 581, 592, 593, 595, 596, 597, 599, 600, 601, 603], "gener": [20, 26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 81, 108, 112, 120, 121, 161, 163, 164, 168, 169, 173, 193, 197, 205, 206, 246, 248, 249, 253, 254, 258, 276, 280, 283, 284, 311, 313, 314, 318, 319, 320, 324, 325, 327, 328, 329, 330, 331, 336, 338, 344, 348, 349, 365, 368, 370, 371, 377, 378, 379, 380, 387, 389, 402, 404, 405, 406, 407, 408, 412, 415, 416, 417, 418, 419, 420, 423, 429, 458, 460, 461, 462, 463, 464, 471, 472, 473, 474, 481, 483, 488, 489, 496, 498, 500, 501, 502, 503, 504, 509, 512, 541, 548, 549, 550, 552, 553, 554, 555, 559, 564, 565, 566, 567, 570, 571, 578, 584, 592, 593, 596, 597, 598, 599, 601], "random": [20, 336, 404, 407, 416, 417, 418, 419, 420, 500, 503, 505, 512, 549, 550, 555, 564, 565, 566, 567, 596, 599, 603], "layout": [20, 81, 344, 348, 377, 379, 404, 405, 406, 407, 448, 453, 471, 473, 488, 500, 501, 502, 503, 550, 552, 554, 555, 592, 593, 596, 598, 599, 603], "serial": [20, 596, 598, 599], "convert": [20, 143, 228, 538, 596, 599], "custom": [20, 26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 319, 324, 340, 342, 596, 598, 599, 600, 603], "type": [20, 22, 23, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 164, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 224, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 249, 250, 251, 252, 253, 254, 257, 260, 261, 262, 263, 264, 265, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 311, 312, 313, 314, 317, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 592, 593, 594, 596, 598, 599, 600, 603], "specif": [22, 23, 115, 120, 121, 170, 200, 205, 206, 255, 282, 283, 284, 315, 551, 593, 597, 598, 599, 601], "univers": [22, 23, 349, 599], "retworkx": [22, 596, 599], "explicitli": [22, 23, 488, 489, 598, 599], "data": [22, 23, 34, 35, 52, 89, 92, 93, 97, 98, 101, 102, 103, 109, 112, 113, 117, 119, 120, 121, 122, 123, 124, 126, 132, 133, 134, 140, 142, 146, 151, 152, 153, 159, 164, 165, 166, 167, 168, 169, 171, 173, 174, 177, 178, 182, 183, 186, 187, 188, 194, 197, 198, 202, 204, 205, 206, 207, 208, 209, 211, 217, 218, 219, 225, 227, 231, 236, 237, 238, 244, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 265, 268, 269, 270, 277, 280, 281, 283, 284, 285, 286, 287, 289, 294, 295, 296, 300, 304, 311, 312, 313, 314, 316, 318, 324, 335, 337, 340, 342, 346, 350, 351, 373, 374, 378, 386, 388, 395, 396, 402, 410, 412, 414, 421, 425, 429, 466, 467, 472, 480, 482, 490, 491, 498, 507, 509, 518, 519, 524, 529, 530, 534, 537, 538, 541, 548, 551, 556, 568, 570, 592, 593, 596, 599, 600, 601], "length": [26, 73, 327, 329, 337, 339, 358, 360, 367, 369, 374, 386, 392, 393, 394, 397, 399, 411, 414, 426, 427, 428, 431, 434, 438, 441, 447, 449, 452, 460, 462, 467, 480, 485, 486, 487, 492, 495, 508, 527, 532, 561, 569, 593, 599], "node": [26, 30, 34, 35, 40, 52, 57, 59, 67, 68, 73, 77, 81, 85, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 278, 279, 281, 282, 283, 284, 285, 286, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 518, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 546, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 585, 592, 593, 594, 595, 597, 599, 600, 601], "map": [26, 30, 36, 40, 48, 52, 68, 73, 77, 81, 85, 89, 101, 104, 133, 165, 174, 186, 189, 218, 250, 259, 268, 272, 295, 312, 326, 339, 341, 346, 349, 364, 366, 376, 378, 380, 384, 385, 401, 403, 408, 412, 413, 422, 459, 469, 472, 474, 478, 479, 497, 499, 504, 505, 509, 513, 539, 542, 561, 570, 593, 598, 599, 600, 603], "integ": [26, 30, 34, 35, 40, 44, 48, 56, 57, 59, 67, 73, 77, 89, 92, 93, 110, 111, 174, 177, 178, 195, 196, 259, 261, 262, 278, 279, 319, 324, 343, 350, 357, 358, 448, 488, 489, 529, 533, 563, 598, 599, 603], "indic": [26, 30, 40, 48, 52, 56, 57, 59, 67, 68, 73, 77, 81, 85, 89, 92, 93, 95, 97, 98, 101, 104, 105, 106, 107, 110, 111, 112, 113, 115, 131, 133, 134, 136, 138, 140, 142, 143, 144, 145, 150, 152, 154, 162, 164, 165, 166, 169, 172, 174, 177, 178, 180, 182, 183, 186, 189, 190, 191, 192, 195, 196, 197, 198, 200, 216, 218, 219, 221, 223, 225, 227, 228, 229, 230, 235, 237, 239, 247, 249, 250, 251, 254, 257, 259, 261, 262, 264, 265, 268, 272, 273, 274, 275, 278, 279, 280, 281, 282, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 310, 311, 312, 313, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 341, 344, 346, 347, 353, 354, 357, 359, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 384, 385, 387, 390, 392, 398, 399, 403, 405, 408, 412, 413, 415, 421, 422, 424, 426, 434, 438, 440, 441, 450, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 478, 479, 481, 483, 484, 485, 488, 489, 493, 494, 495, 496, 499, 501, 504, 509, 511, 513, 514, 526, 528, 529, 530, 532, 536, 542, 546, 547, 552, 556, 558, 560, 563, 570, 572, 575, 593, 594, 597, 598, 599, 600, 603], "pathlengthmap": [26, 337, 374, 386, 397, 467, 480, 492, 599], "234": 26, "2": [26, 30, 34, 35, 44, 45, 52, 56, 57, 59, 67, 73, 77, 81, 89, 91, 97, 98, 101, 104, 108, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 135, 136, 137, 138, 142, 143, 152, 153, 154, 155, 159, 163, 166, 167, 173, 174, 176, 182, 183, 186, 189, 193, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 220, 221, 222, 223, 227, 228, 237, 238, 239, 240, 244, 248, 251, 252, 258, 259, 260, 268, 272, 276, 280, 281, 283, 284, 285, 286, 305, 306, 318, 319, 320, 324, 325, 327, 328, 329, 330, 332, 339, 341, 344, 347, 348, 353, 364, 365, 366, 367, 368, 369, 370, 372, 375, 376, 377, 378, 379, 384, 385, 389, 392, 395, 396, 404, 405, 406, 407, 408, 409, 412, 413, 418, 420, 421, 423, 426, 430, 431, 432, 434, 438, 439, 441, 445, 448, 449, 450, 452, 454, 458, 459, 460, 461, 462, 463, 465, 468, 469, 471, 472, 473, 478, 479, 483, 485, 488, 489, 490, 491, 494, 496, 500, 501, 502, 503, 504, 509, 512, 516, 518, 519, 523, 524, 525, 543, 544, 545, 549, 550, 552, 553, 554, 555, 556, 558, 564, 565, 567, 568, 570, 592, 593, 594, 596, 598, 600, 601, 603], "34": [26, 453], "python": [26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 114, 116, 118, 160, 161, 169, 171, 174, 175, 176, 177, 178, 179, 180, 181, 186, 187, 199, 201, 203, 245, 246, 254, 256, 259, 260, 261, 262, 263, 264, 268, 269, 316, 319, 324, 335, 337, 340, 342, 357, 358, 359, 360, 373, 374, 386, 395, 396, 397, 399, 412, 414, 425, 429, 466, 467, 480, 490, 491, 492, 495, 509, 518, 519, 524, 527, 530, 532, 537, 548, 570, 595, 596, 597, 598, 599, 603], "protocol": [26, 30, 34, 35, 36, 40, 44, 48, 56, 57, 59, 67, 73, 77, 85, 89, 174, 259, 319, 324, 340, 342, 598, 599, 603], "dict": [26, 30, 36, 40, 48, 52, 68, 73, 77, 81, 85, 97, 98, 101, 168, 174, 182, 183, 186, 253, 259, 265, 268, 314, 327, 328, 329, 330, 338, 339, 343, 349, 355, 361, 367, 368, 369, 370, 375, 382, 387, 389, 390, 392, 397, 398, 407, 414, 415, 422, 423, 424, 426, 439, 440, 450, 451, 460, 461, 462, 463, 468, 470, 476, 481, 483, 484, 485, 488, 489, 492, 493, 494, 496, 503, 505, 511, 513, 514, 527, 528, 546, 547, 555, 561, 563, 592, 593, 598, 599, 603], "rx": [26, 30, 34, 35, 44, 56, 57, 59, 67, 73, 77, 89, 97, 98, 101, 114, 116, 117, 118, 119, 142, 143, 152, 153, 154, 163, 166, 167, 168, 173, 174, 182, 183, 186, 199, 201, 202, 203, 204, 227, 228, 237, 238, 239, 248, 251, 252, 253, 258, 259, 268, 305, 314, 318, 319, 320, 324, 341, 353, 364, 376, 384, 385, 413, 469, 478, 479, 488, 489, 494, 495, 496, 516, 523, 525, 543, 544, 545, 558, 592, 593, 594, 597, 598, 599, 600, 601, 603], "directed_path_graph": [26, 30, 34, 35, 56, 57, 59, 67, 73, 77, 173, 258, 319, 320, 324, 378, 408, 412, 593, 599, 601, 603], "5": [26, 30, 34, 35, 56, 57, 67, 73, 77, 81, 89, 113, 163, 173, 174, 198, 248, 258, 259, 281, 318, 320, 324, 385, 390, 413, 424, 432, 433, 435, 436, 437, 446, 447, 448, 479, 484, 488, 489, 496, 511, 512, 596, 597, 600, 601, 603], "edg": [26, 30, 36, 44, 48, 52, 56, 57, 73, 77, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 283, 284, 285, 286, 287, 288, 290, 292, 293, 294, 295, 296, 301, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 325, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 341, 343, 345, 347, 350, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 401, 402, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 469, 470, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 497, 498, 503, 506, 507, 508, 509, 511, 514, 518, 520, 521, 522, 524, 525, 527, 528, 530, 533, 534, 535, 536, 537, 539, 541, 545, 546, 547, 548, 549, 551, 555, 556, 557, 561, 562, 564, 565, 566, 568, 569, 570, 572, 574, 575, 576, 577, 579, 581, 582, 583, 586, 587, 588, 589, 592, 593, 594, 595, 597, 599, 600, 601], "all_pairs_dijkstra_shortest_path_length": 26, "third_node_shortest_path_length": 26, "pathmap": [30, 338, 599], "third_node_shortest_path": 30, "sequenc": [34, 35, 44, 56, 57, 59, 67, 319, 324, 340, 341, 342, 364, 376, 384, 385, 399, 413, 430, 431, 432, 433, 434, 435, 436, 438, 442, 443, 444, 447, 449, 454, 455, 456, 457, 469, 478, 479, 495, 532, 593, 598, 599, 600, 601, 603], "tupl": [34, 35, 52, 57, 85, 92, 93, 101, 104, 107, 108, 110, 111, 125, 132, 133, 151, 157, 172, 177, 178, 186, 189, 192, 193, 195, 196, 210, 217, 218, 236, 242, 257, 261, 262, 268, 269, 272, 275, 276, 278, 279, 288, 294, 295, 304, 308, 317, 324, 344, 346, 348, 363, 377, 378, 379, 383, 394, 404, 405, 406, 408, 428, 471, 472, 473, 477, 487, 494, 500, 501, 502, 504, 505, 511, 520, 521, 533, 550, 552, 554, 557, 561, 593, 597, 598, 599], "predecessor_a": 34, "predecessor_b": 34, "payload": [34, 35, 52, 89, 93, 103, 112, 113, 117, 119, 134, 135, 136, 137, 138, 140, 159, 164, 165, 169, 170, 171, 172, 173, 174, 178, 188, 197, 198, 202, 204, 219, 220, 221, 222, 223, 225, 244, 249, 250, 254, 255, 256, 257, 258, 259, 260, 261, 262, 270, 278, 279, 280, 281, 296, 311, 312, 313, 315, 316, 317, 318, 324, 346, 350, 351, 378, 388, 390, 397, 398, 401, 402, 410, 421, 424, 429, 441, 472, 482, 484, 492, 493, 497, 498, 507, 511, 527, 528, 534, 538, 539, 541, 547, 548, 556, 568, 592, 593, 598, 599, 600, 601], "index": [34, 35, 44, 52, 56, 57, 59, 67, 89, 90, 91, 94, 96, 97, 98, 101, 102, 104, 106, 110, 111, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 174, 175, 176, 179, 181, 182, 183, 186, 187, 189, 191, 195, 196, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 259, 260, 263, 265, 268, 269, 271, 272, 274, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 303, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 321, 324, 331, 332, 333, 335, 337, 338, 339, 340, 342, 345, 347, 349, 355, 356, 362, 363, 371, 372, 373, 374, 380, 382, 383, 386, 387, 391, 397, 398, 401, 414, 415, 464, 465, 466, 467, 474, 476, 477, 480, 481, 488, 489, 492, 493, 497, 510, 520, 521, 527, 528, 529, 539, 540, 557, 561, 597, 598, 599, 600, 601, 603], "iter": [34, 35, 44, 56, 57, 59, 67, 68, 73, 77, 92, 93, 95, 102, 110, 111, 135, 136, 137, 138, 140, 157, 162, 163, 165, 177, 178, 180, 187, 195, 196, 220, 221, 222, 223, 225, 242, 247, 248, 250, 261, 262, 264, 269, 278, 279, 308, 310, 312, 319, 320, 324, 363, 364, 383, 384, 390, 398, 400, 407, 412, 424, 445, 477, 478, 484, 493, 503, 509, 511, 528, 530, 547, 555, 570, 598, 599, 601], "wrap": [34, 35, 44, 56, 57, 59, 67, 73, 77, 319, 324, 599], "yield": [34, 35, 44, 56, 57, 59, 67, 68, 73, 77, 319, 324, 599], "order": [34, 35, 44, 56, 57, 59, 67, 68, 73, 77, 102, 115, 165, 187, 200, 250, 261, 269, 279, 282, 312, 319, 320, 321, 324, 340, 341, 342, 357, 358, 359, 360, 363, 364, 376, 383, 384, 385, 395, 396, 399, 412, 413, 431, 434, 469, 477, 478, 479, 490, 491, 495, 509, 518, 519, 524, 530, 532, 547, 570, 571, 578, 584, 599, 601, 603], "bfs_succ": [34, 35], "third_el": [34, 35, 56, 57, 67, 73, 77, 324], "bfs_iter": [34, 35], "first_el": [34, 35, 56, 57, 59, 67, 324], "second_el": [34, 35, 56, 57, 67, 324], "successor_a": 35, "successor_b": 35, "repres": [36, 52, 57, 68, 77, 81, 85, 89, 164, 165, 174, 249, 250, 311, 312, 324, 327, 328, 329, 330, 331, 335, 337, 338, 345, 347, 354, 367, 368, 369, 370, 371, 373, 374, 385, 386, 387, 388, 399, 401, 402, 405, 407, 412, 413, 414, 415, 425, 429, 453, 460, 461, 462, 463, 464, 466, 467, 479, 480, 481, 482, 488, 489, 494, 495, 497, 498, 501, 503, 505, 509, 532, 537, 539, 541, 547, 548, 552, 555, 561, 570, 595, 599, 601], "endpoint": [36, 57, 125, 134, 210, 219, 269, 288, 294, 295, 296, 304, 324, 339, 343, 375, 468, 520, 599, 603], "biconnect": [36, 334, 343, 599], "compon": [36, 334, 341, 343, 345, 347, 349, 353, 363, 364, 376, 380, 383, 384, 385, 401, 413, 469, 474, 477, 478, 479, 497, 523, 535, 539, 540, 543, 544, 545, 558, 594, 599], "belong": [36, 343, 559, 599], "float": [40, 48, 73, 120, 121, 205, 206, 283, 284, 325, 327, 328, 329, 330, 331, 335, 337, 338, 344, 348, 359, 360, 365, 367, 368, 369, 370, 371, 373, 374, 377, 379, 385, 386, 387, 388, 390, 392, 393, 394, 397, 398, 401, 404, 405, 406, 407, 409, 411, 413, 414, 415, 418, 419, 421, 424, 425, 426, 427, 428, 458, 460, 461, 462, 463, 464, 466, 467, 471, 473, 479, 480, 481, 482, 484, 485, 486, 487, 492, 493, 497, 500, 501, 502, 503, 506, 508, 511, 512, 527, 528, 534, 535, 536, 537, 539, 547, 549, 550, 552, 554, 555, 556, 557, 562, 565, 566, 569, 593, 597, 598, 599, 600], "between": [40, 48, 89, 91, 97, 98, 106, 108, 122, 123, 135, 136, 137, 138, 140, 155, 157, 159, 160, 161, 165, 169, 170, 174, 176, 182, 183, 191, 193, 207, 208, 220, 221, 222, 223, 225, 240, 242, 244, 245, 246, 250, 254, 255, 259, 260, 261, 262, 265, 269, 274, 276, 278, 279, 285, 286, 290, 293, 303, 306, 308, 312, 315, 320, 325, 326, 331, 332, 335, 339, 341, 349, 353, 365, 366, 371, 372, 373, 375, 376, 380, 389, 390, 393, 394, 398, 401, 407, 410, 411, 412, 418, 419, 420, 421, 423, 424, 427, 428, 434, 436, 438, 440, 441, 443, 444, 450, 453, 458, 459, 464, 465, 466, 468, 469, 474, 483, 484, 486, 487, 493, 494, 497, 503, 507, 508, 509, 510, 511, 512, 516, 525, 528, 530, 534, 539, 543, 545, 547, 549, 555, 556, 565, 566, 567, 568, 569, 570, 579, 594, 595, 596, 597, 598, 599, 601, 602, 603], "score": [40, 48, 339, 361, 375, 385, 389, 390, 398, 413, 423, 424, 468, 479, 483, 484, 493, 511, 514, 528, 546, 547, 585, 599], "edgelist": [44, 107, 192, 275, 347, 363, 383, 391, 477, 505, 598, 599], "instanc": [44, 59, 102, 163, 174, 187, 248, 259, 269, 319, 320, 341, 364, 376, 384, 385, 413, 469, 478, 479, 599, 601], "hexagonal_lattice_graph": [44, 599, 600], "third_chain": 44, "chains_it": 44, "first_chain": 44, "second_chain": 44, "greedi": [45, 488, 489, 529, 599], "degre": [45, 130, 149, 215, 234, 320, 336, 355, 361, 382, 416, 476, 488, 489, 496, 514, 526, 530, 546, 598, 599, 603], "largest": [45, 169, 254, 488, 489, 599], "satur": [45, 488, 489, 599], "dsatur": [45, 488, 489], "independentset": [45, 488, 489, 599], "gi": 45, "9": [45, 356, 448, 488, 596, 603], "adrian": [45, 488, 489], "kosowski": [45, 488, 489], "krzysztof": [45, 488, 489], "manuszewski": [45, 488, 489], "classic": [45, 488, 489, 601], "19": [45, 488, 489, 597, 599], "2004": [45, 488, 489], "isbn": [45, 488, 489], "8218": [45, 488, 489], "3458": [45, 488, 489], "4": [45, 89, 97, 98, 101, 113, 114, 116, 117, 118, 119, 142, 143, 152, 153, 166, 167, 173, 174, 182, 183, 186, 198, 199, 201, 202, 203, 204, 227, 228, 237, 238, 251, 252, 258, 259, 268, 281, 318, 320, 326, 327, 328, 329, 330, 353, 366, 367, 368, 369, 370, 385, 392, 393, 394, 399, 409, 413, 418, 426, 427, 428, 430, 431, 434, 442, 448, 453, 454, 455, 459, 479, 485, 486, 487, 488, 489, 495, 496, 505, 506, 516, 523, 525, 532, 543, 544, 545, 553, 557, 558, 562, 565, 594, 596, 598, 600, 603], "attribut": [45, 89, 91, 142, 152, 153, 164, 166, 167, 168, 174, 176, 227, 237, 238, 249, 251, 252, 253, 259, 311, 314, 381, 402, 429, 475, 498, 531, 538, 541, 548, 549, 551, 592, 593, 596, 599, 601], "weight": [52, 89, 101, 102, 103, 104, 107, 110, 111, 115, 117, 119, 120, 121, 141, 154, 159, 160, 161, 163, 164, 165, 169, 170, 171, 172, 173, 174, 186, 187, 188, 189, 192, 195, 196, 200, 202, 204, 205, 206, 226, 239, 244, 245, 246, 248, 249, 250, 254, 255, 256, 257, 258, 259, 260, 261, 262, 268, 269, 270, 272, 275, 278, 279, 282, 283, 284, 305, 311, 312, 313, 315, 316, 317, 318, 324, 325, 327, 328, 329, 330, 331, 336, 337, 338, 341, 346, 350, 351, 357, 358, 359, 360, 364, 365, 367, 368, 369, 370, 371, 373, 374, 376, 378, 384, 385, 386, 387, 388, 390, 392, 393, 394, 397, 398, 401, 407, 410, 413, 414, 415, 416, 421, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 442, 443, 444, 447, 449, 452, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 469, 472, 478, 479, 480, 481, 482, 484, 485, 486, 487, 492, 493, 497, 503, 507, 511, 528, 533, 534, 535, 536, 539, 547, 555, 556, 557, 568, 592, 593, 595, 597, 598, 599, 601, 603], "effici": [52, 81, 341, 376, 399, 418, 469, 495, 532, 533, 565, 599], "behav": [52, 81, 89, 102, 187, 269, 326, 332, 366, 372, 459, 465, 603], "drop": [52, 81, 596, 599], "replac": [52, 81, 102, 164, 165, 187, 249, 250, 269, 311, 312, 596, 599, 601, 603], "readonli": [52, 81], "edge_indic": [56, 599, 603], "edges_it": [56, 57, 73, 77, 324], "node_index_a": [57, 324], "node_index_b": [57, 324], "edge_list": [57, 108, 110, 111, 173, 193, 195, 196, 258, 269, 276, 278, 279, 318, 494, 593, 598, 599], "block": [59, 320, 420, 567, 599], "partit": [59, 319, 400, 557, 599], "a_partition_block": [59, 319], "block_it": 59, "another_el": 59, "the_second_el": 59, "node_indic": [67, 89, 144, 174, 229, 259, 298, 488, 494, 599, 600, 603], "nodes_it": 67, "though": [68, 320], "unord": [68, 165, 250, 312, 506, 603], "when": [68, 89, 91, 93, 101, 102, 122, 123, 124, 125, 126, 140, 165, 169, 170, 171, 174, 176, 178, 186, 187, 207, 208, 209, 210, 211, 225, 250, 254, 255, 256, 259, 262, 268, 269, 285, 286, 287, 288, 289, 312, 315, 316, 320, 327, 328, 331, 337, 338, 367, 368, 369, 370, 371, 373, 374, 386, 387, 390, 397, 398, 414, 417, 418, 424, 425, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 466, 467, 480, 481, 484, 488, 489, 492, 493, 511, 512, 525, 528, 529, 530, 534, 538, 540, 545, 547, 551, 556, 564, 565, 573, 580, 585, 592, 594, 596, 598, 599, 603], "sort": [68, 320, 530, 559, 560, 599, 601], "24": [73, 595, 599], "first_target": [73, 77], "first_path": [73, 77], "second_target": [73, 77], "second_path": [73, 77], "node_c": [77, 101, 186, 268, 494, 599], "node_a": [77, 101, 106, 122, 123, 127, 186, 191, 207, 208, 212, 260, 261, 262, 268, 274, 278, 279, 285, 286, 290, 306, 494, 598, 599], "node_b": [77, 101, 106, 122, 123, 127, 186, 191, 207, 208, 212, 260, 261, 262, 268, 274, 278, 279, 285, 286, 290, 306, 494, 598, 599], "2d": 81, "posit": [81, 140, 165, 225, 250, 312, 327, 328, 329, 330, 344, 348, 357, 358, 359, 360, 367, 368, 369, 370, 377, 379, 395, 396, 404, 405, 406, 407, 412, 460, 461, 462, 463, 471, 473, 490, 491, 500, 501, 502, 503, 509, 518, 519, 524, 549, 550, 552, 554, 555, 570, 593, 599], "check_cycl": [89, 102, 174, 187, 320, 599, 601], "fals": [89, 98, 102, 112, 127, 128, 129, 133, 134, 154, 159, 161, 164, 169, 174, 183, 187, 197, 212, 213, 214, 218, 219, 239, 244, 246, 249, 254, 259, 260, 261, 262, 278, 279, 280, 290, 291, 292, 305, 311, 320, 323, 331, 338, 339, 344, 350, 351, 364, 371, 375, 377, 384, 388, 392, 393, 394, 395, 396, 406, 407, 410, 411, 412, 415, 421, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 471, 478, 490, 491, 502, 503, 507, 508, 509, 510, 515, 516, 517, 518, 519, 523, 524, 525, 529, 530, 533, 537, 538, 554, 555, 568, 569, 570, 593, 598, 599, 601, 603], "multigraph": [89, 91, 97, 98, 102, 108, 142, 152, 153, 166, 167, 169, 174, 176, 182, 183, 187, 193, 227, 237, 238, 251, 252, 254, 259, 260, 261, 262, 265, 269, 276, 278, 279, 352, 381, 390, 398, 417, 424, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 470, 475, 484, 493, 511, 528, 531, 533, 547, 564, 596, 598, 599], "true": [89, 91, 98, 101, 102, 117, 119, 127, 128, 129, 133, 134, 139, 154, 159, 161, 164, 165, 169, 174, 176, 183, 186, 187, 202, 204, 212, 213, 214, 218, 219, 224, 239, 244, 246, 249, 250, 254, 259, 268, 290, 291, 292, 305, 311, 312, 320, 323, 335, 338, 339, 344, 349, 350, 352, 364, 373, 375, 377, 380, 381, 384, 387, 388, 389, 392, 393, 394, 395, 396, 401, 406, 407, 410, 411, 412, 415, 421, 423, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 466, 468, 471, 474, 475, 478, 481, 483, 490, 491, 497, 502, 503, 507, 508, 509, 510, 511, 515, 516, 517, 518, 519, 523, 524, 525, 529, 530, 531, 533, 537, 538, 539, 543, 544, 545, 554, 555, 568, 569, 570, 593, 598, 599, 600, 601, 603], "attr": [89, 164, 174, 249, 259, 311, 402, 429, 498, 541, 548, 551, 598, 599, 603], "none": [89, 93, 101, 102, 110, 111, 115, 140, 154, 159, 161, 164, 165, 168, 169, 173, 174, 178, 186, 187, 195, 196, 200, 225, 239, 244, 246, 249, 250, 253, 254, 258, 259, 262, 268, 269, 278, 279, 282, 305, 311, 312, 314, 318, 320, 325, 326, 331, 332, 336, 337, 338, 341, 344, 347, 348, 350, 356, 357, 358, 363, 364, 365, 366, 371, 372, 374, 376, 377, 379, 383, 384, 385, 386, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 405, 406, 407, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 442, 443, 444, 447, 449, 454, 455, 456, 457, 458, 459, 464, 465, 467, 469, 470, 471, 473, 477, 478, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 498, 501, 502, 503, 505, 509, 511, 512, 518, 524, 527, 528, 530, 532, 533, 535, 536, 539, 541, 547, 548, 549, 550, 551, 552, 554, 555, 557, 563, 564, 565, 566, 567, 570, 592, 593, 598, 599, 601, 603], "node_count_hint": [89, 174, 259, 599], "edge_count_hint": [89, 174, 259, 599], "direct": [89, 97, 98, 106, 116, 117, 118, 119, 127, 142, 143, 152, 153, 163, 166, 167, 169, 174, 182, 183, 191, 201, 202, 203, 204, 212, 227, 228, 237, 238, 248, 251, 252, 254, 320, 321, 333, 341, 353, 362, 364, 365, 376, 381, 382, 384, 385, 388, 392, 393, 394, 395, 396, 407, 409, 410, 411, 417, 418, 419, 420, 421, 422, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 450, 503, 513, 516, 523, 525, 526, 530, 533, 538, 543, 544, 545, 551, 555, 558, 561, 563, 569, 576, 593, 594, 596, 598, 599, 602], "acycl": [89, 174, 561, 596, 599, 602], "alia": [89, 599], "ident": [89, 140, 144, 159, 160, 225, 229, 244, 245, 298, 430, 598, 599, 603], "interchang": 89, "sole": [89, 599], "backward": [89, 144, 229, 298, 376, 384, 385, 469, 478, 479, 599], "although": [89, 165, 174, 250, 259, 312, 599], "rare": [89, 174, 259], "stabl": [89, 174, 259, 399, 495, 532, 553, 599, 603], "lifetim": [89, 174, 259, 603], "hole": [89, 174, 259, 599, 603], "reus": [89, 174, 259, 603], "add_nodes_from": [89, 97, 98, 112, 113, 114, 116, 117, 118, 119, 142, 152, 153, 166, 167, 174, 182, 183, 197, 198, 199, 201, 202, 203, 204, 227, 237, 238, 251, 252, 259, 268, 280, 281, 341, 376, 469, 598, 599, 601, 603], "rang": [89, 112, 113, 174, 197, 198, 259, 280, 281, 592, 599, 600, 601, 603], "remove_nod": [89, 174, 259, 603], "print": [89, 173, 174, 258, 259, 318, 320, 341, 364, 376, 384, 385, 413, 469, 478, 479, 599, 600, 601, 603], "res_manu": [89, 174, 259], "add_par": [89, 91, 174, 176, 601], "6": [89, 174, 259, 390, 398, 407, 424, 440, 448, 451, 470, 484, 488, 489, 493, 496, 503, 528, 547, 555, 596, 601, 603], "ad": [89, 91, 92, 93, 101, 110, 111, 140, 160, 161, 163, 169, 174, 176, 177, 178, 186, 195, 196, 225, 245, 246, 248, 254, 259, 261, 262, 268, 278, 279, 336, 416, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 521, 598, 599, 601, 603], "new": [89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 108, 120, 121, 140, 154, 160, 161, 163, 164, 169, 174, 175, 176, 177, 178, 179, 180, 181, 186, 187, 193, 205, 206, 225, 239, 245, 246, 248, 249, 254, 259, 261, 262, 263, 264, 268, 269, 276, 283, 284, 305, 311, 313, 322, 336, 346, 378, 398, 408, 410, 416, 472, 493, 494, 504, 507, 528, 536, 568, 597, 598, 601, 603], "nodeindic": [89, 95, 97, 98, 113, 114, 116, 117, 118, 119, 142, 143, 144, 145, 152, 153, 166, 167, 174, 180, 182, 183, 198, 199, 201, 202, 203, 204, 227, 228, 229, 230, 237, 238, 251, 252, 259, 264, 281, 297, 298, 299, 319, 335, 357, 359, 373, 399, 400, 425, 466, 495, 526, 532, 557, 560, 599, 603], "arbitrari": [89, 114, 116, 118, 174, 199, 201, 203, 259, 391, 425, 599], "data_payload": [89, 174, 259], "node_index": [89, 132, 151, 174, 217, 236, 259, 294, 304, 599], "add_nod": [89, 101, 102, 174, 186, 187, 259, 269, 494, 597, 598, 599, 601, 603], "f": [89, 439, 440, 445, 450, 451, 600, 601, 603], "real": [89, 174, 598, 601], "introduc": [89, 102, 174, 187, 269, 599, 601, 603], "By": [89, 120, 121, 133, 134, 159, 164, 174, 205, 206, 218, 219, 244, 249, 259, 283, 284, 311, 320, 325, 326, 332, 365, 366, 372, 388, 396, 411, 421, 458, 459, 465, 482, 491, 508, 524, 547, 569, 571, 578, 584, 592, 593, 599, 603], "disabl": [89, 174, 259, 320, 599], "creation": [89, 174, 259, 596, 603], "With": [89, 174, 598, 599, 601], "add_edg": [89, 132, 151, 174, 217, 236, 268, 294, 304, 494, 598, 599, 601, 603], "truli": [89, 174], "note": [89, 97, 98, 140, 155, 157, 164, 169, 174, 182, 183, 225, 240, 242, 249, 254, 265, 286, 306, 308, 311, 343, 346, 357, 358, 359, 360, 378, 396, 401, 410, 451, 472, 488, 489, 491, 497, 507, 524, 533, 539, 568, 592, 593, 596, 597, 598, 603], "add_edges_from": [89, 93, 111, 112, 174, 178, 196, 197, 262, 268, 279, 280, 597, 598, 599, 603], "add_edges_from_no_data": [89, 110, 174, 195, 278, 341, 376, 469, 598, 599], "extend_from_edge_list": [89, 142, 143, 152, 153, 166, 167, 174, 227, 228, 237, 238, 251, 252, 341, 353, 364, 376, 384, 385, 413, 469, 478, 479, 516, 523, 525, 543, 544, 545, 558, 594, 598, 599, 603], "extend_from_weighted_edge_list": [89, 97, 98, 114, 116, 117, 118, 119, 163, 174, 182, 183, 199, 201, 202, 203, 204, 248, 598, 599], "come": [89, 174, 530, 595, 601], "penalti": [89, 174], "grow": [89, 174, 259], "leverag": [89, 168, 174, 253, 314, 596, 599, 600, 603], "add_child": [89, 91, 101, 174, 176, 186, 601], "overhead": [89, 174, 601], "parallel": [89, 102, 108, 129, 140, 169, 170, 174, 187, 193, 214, 225, 254, 255, 259, 261, 269, 276, 279, 292, 315, 334, 339, 343, 345, 347, 352, 355, 356, 365, 375, 381, 382, 388, 389, 390, 392, 393, 394, 398, 399, 409, 411, 421, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 468, 475, 476, 482, 483, 484, 485, 486, 487, 493, 495, 505, 506, 508, 511, 528, 532, 533, 547, 562, 569, 599, 603], "kwarg": [89, 133, 134, 159, 174, 218, 219, 244, 259, 592, 593, 598, 599], "constructor": [89, 174, 259, 593, 599, 601, 603], "initi": [89, 174, 259, 320, 321, 322, 336, 347, 407, 416, 503, 530, 555, 598, 599], "maximum": [89, 174, 259, 326, 332, 354, 365, 366, 372, 390, 398, 399, 400, 407, 417, 424, 431, 434, 458, 459, 465, 484, 493, 495, 496, 503, 511, 521, 528, 532, 533, 547, 555, 564, 593, 599], "32": [89, 174, 259, 592, 597, 599], "294": [89, 174, 259], "967": [89, 174, 259], "attempt": [89, 174, 259, 599, 601, 603], "than": [89, 115, 154, 174, 200, 239, 259, 282, 305, 323, 339, 343, 349, 354, 375, 380, 389, 390, 396, 398, 399, 401, 402, 417, 423, 424, 431, 434, 438, 447, 449, 468, 474, 483, 484, 491, 493, 495, 497, 498, 505, 511, 512, 524, 528, 532, 533, 539, 541, 547, 553, 557, 561, 564, 598, 599, 600], "paramet": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 592, 593, 594, 598, 599], "bool": [89, 98, 102, 127, 128, 129, 133, 134, 139, 154, 159, 161, 164, 169, 174, 183, 187, 212, 213, 214, 218, 219, 224, 239, 244, 246, 249, 254, 259, 290, 291, 292, 305, 311, 320, 338, 339, 344, 349, 375, 377, 380, 387, 388, 389, 395, 396, 401, 406, 407, 410, 411, 412, 415, 420, 421, 423, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 468, 471, 474, 481, 483, 490, 491, 497, 502, 503, 507, 508, 509, 510, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 533, 537, 538, 539, 554, 555, 567, 568, 569, 570, 593], "runtim": [89, 174, 399, 495, 532, 599, 601], "detect": [89, 129, 174, 214, 292, 320, 599], "place": [89, 163, 170, 171, 174, 248, 255, 256, 259, 315, 316, 336, 416, 549, 599, 603], "digraph": [89, 174, 365, 598], "dagwouldcycl": [89, 102, 174, 187], "parent": [90, 91, 92, 93, 96, 98, 132, 155, 175, 176, 177, 178, 181, 183, 217, 240, 260, 262, 294, 306, 340, 342, 599], "obj": [90, 92, 94, 96, 102, 115, 175, 177, 179, 181, 187, 200, 263, 269, 282], "child": [90, 91, 92, 93, 96, 151, 155, 175, 176, 177, 178, 181, 236, 240, 260, 262, 304, 306], "lead": [90, 96, 117, 119, 135, 136, 137, 138, 141, 175, 181, 202, 204, 220, 221, 222, 223, 226], "int": [90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 106, 108, 110, 111, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 191, 193, 195, 196, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 255, 256, 259, 260, 261, 262, 263, 265, 268, 269, 271, 274, 276, 278, 279, 282, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 303, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 320, 321, 326, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 347, 353, 354, 356, 358, 359, 360, 362, 363, 364, 366, 371, 372, 373, 374, 375, 376, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403, 404, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 464, 465, 466, 467, 468, 469, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 499, 500, 503, 505, 508, 509, 510, 511, 512, 513, 518, 524, 527, 528, 530, 531, 533, 540, 542, 543, 544, 545, 547, 549, 550, 555, 558, 564, 565, 566, 567, 569, 570, 593, 594, 599], "attach": [90, 91, 92, 93, 94, 95, 96, 171, 175, 176, 177, 178, 179, 180, 181, 256, 260, 261, 262, 263, 264, 316, 336, 416, 598, 599], "duplic": [91, 176, 599], "pyindexerror": [91, 176], "obj_list": [92, 93, 95, 177, 178, 180, 261, 262, 264, 279], "edgeindic": [92, 93, 105, 106, 112, 131, 134, 150, 177, 178, 190, 191, 197, 216, 219, 235, 261, 262, 273, 274, 280, 293, 296, 303, 599, 603], "neighbor": [97, 98, 143, 152, 153, 166, 167, 182, 183, 228, 237, 238, 251, 252, 265, 295, 363, 383, 477, 488, 489, 526, 598, 599], "dictionari": [97, 98, 101, 168, 182, 183, 186, 253, 265, 268, 314, 327, 328, 329, 330, 337, 338, 339, 343, 346, 349, 355, 367, 368, 369, 370, 374, 378, 380, 382, 386, 387, 392, 397, 398, 401, 402, 407, 408, 412, 414, 415, 426, 429, 460, 461, 462, 463, 467, 470, 472, 474, 476, 480, 481, 485, 488, 489, 492, 493, 494, 496, 497, 498, 503, 504, 509, 527, 528, 538, 539, 541, 547, 548, 555, 563, 570, 592, 593, 598, 599], "adjac": [97, 98, 114, 120, 121, 182, 183, 199, 205, 206, 265, 283, 284, 325, 365, 458, 494, 598, 599], "inbound": [97, 98, 130, 182, 183, 215, 265, 271], "outbound": [97, 98, 149, 182, 183, 234, 265, 599], "two": [97, 98, 135, 136, 137, 138, 141, 142, 152, 153, 154, 159, 166, 167, 169, 182, 183, 220, 221, 222, 223, 226, 227, 237, 238, 239, 244, 251, 252, 254, 269, 305, 331, 341, 344, 346, 348, 350, 353, 371, 376, 377, 378, 379, 390, 393, 394, 398, 401, 404, 405, 406, 408, 410, 412, 418, 419, 424, 427, 428, 430, 436, 443, 444, 445, 453, 464, 469, 471, 472, 473, 484, 486, 487, 493, 494, 497, 500, 501, 502, 504, 507, 509, 511, 520, 528, 539, 543, 545, 547, 549, 550, 552, 554, 557, 563, 565, 566, 568, 570, 594, 595, 599, 603], "b": [97, 98, 101, 112, 114, 116, 117, 118, 119, 142, 152, 153, 166, 167, 182, 183, 186, 197, 199, 201, 202, 203, 204, 227, 237, 238, 251, 252, 268, 280, 420, 440, 451, 494, 567, 597, 599, 601, 603], "c": [97, 98, 101, 112, 114, 116, 117, 118, 119, 142, 152, 153, 166, 167, 182, 183, 186, 197, 199, 201, 202, 203, 204, 227, 237, 238, 251, 252, 268, 280, 349, 380, 409, 474, 494, 496, 506, 511, 535, 595, 597, 598, 599, 601, 603], "awar": [97, 143, 182, 228], "adj_direct": [97, 182], "share": [97, 98, 103, 182, 183, 188, 265, 269, 270, 410, 507, 520, 568, 599], "specifi": [97, 98, 102, 106, 108, 116, 117, 118, 119, 130, 135, 136, 137, 138, 140, 142, 149, 152, 153, 155, 157, 165, 166, 167, 168, 169, 173, 174, 182, 183, 187, 191, 193, 201, 202, 203, 204, 215, 220, 221, 222, 223, 225, 227, 234, 237, 238, 240, 242, 250, 251, 252, 253, 254, 258, 259, 265, 269, 271, 274, 276, 306, 308, 312, 314, 318, 325, 331, 336, 337, 338, 341, 344, 347, 363, 364, 365, 371, 374, 376, 377, 383, 384, 385, 386, 387, 390, 391, 395, 396, 397, 398, 401, 402, 407, 411, 412, 413, 414, 415, 416, 424, 426, 427, 429, 430, 432, 433, 435, 436, 438, 441, 442, 443, 444, 449, 452, 454, 455, 456, 457, 458, 464, 467, 469, 471, 477, 478, 479, 480, 481, 484, 488, 489, 490, 491, 492, 493, 497, 498, 503, 508, 509, 511, 518, 519, 524, 527, 528, 533, 535, 536, 539, 541, 547, 548, 549, 555, 557, 569, 570, 592, 593, 599, 603], "children": [98, 151, 183, 236, 340, 342, 447], "adj": [98, 183, 598, 599], "clear": [100, 185, 267, 599], "leav": [100, 102, 185, 187, 267, 269, 603], "intact": [100, 185, 267], "node_map": [101, 186, 268, 599], "node_map_func": [101, 186, 268], "edge_map_func": [101, 186, 268], "weight2": [101, 186, 268], "callabl": [101, 102, 112, 113, 114, 116, 117, 118, 140, 159, 161, 165, 168, 169, 173, 186, 187, 197, 198, 199, 201, 202, 203, 225, 244, 246, 250, 253, 254, 258, 268, 269, 280, 281, 312, 314, 318, 325, 327, 328, 329, 330, 335, 337, 357, 358, 359, 360, 365, 367, 368, 369, 370, 373, 374, 386, 390, 392, 393, 394, 395, 396, 397, 398, 401, 402, 412, 414, 424, 425, 426, 427, 428, 429, 458, 460, 461, 462, 463, 466, 467, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 497, 498, 509, 511, 518, 519, 524, 527, 528, 530, 533, 534, 535, 536, 537, 539, 541, 547, 548, 556, 557, 570, 592, 599], "singl": [101, 102, 114, 116, 118, 140, 169, 186, 187, 199, 201, 203, 225, 254, 265, 268, 269, 327, 328, 329, 330, 331, 337, 338, 339, 341, 350, 351, 363, 364, 367, 368, 369, 370, 371, 374, 375, 376, 384, 385, 386, 387, 389, 407, 413, 414, 415, 423, 439, 440, 450, 451, 460, 461, 462, 463, 464, 467, 468, 469, 477, 478, 479, 480, 481, 483, 503, 505, 506, 530, 533, 555, 556, 593, 596, 599, 600, 601, 603], "new_node_id": [101, 186, 268], "correspond": [101, 186, 393, 394, 401, 427, 428, 486, 487, 494, 497, 539, 599, 603], "build": [101, 186, 268, 596, 597, 598, 599, 603], "visual": [101, 154, 168, 186, 239, 253, 268, 305, 314, 378, 408, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 472, 488, 504, 596, 599, 601, 603], "mpl_draw": [101, 154, 186, 239, 268, 305, 378, 408, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 472, 488, 504, 598, 599, 600, 601, 603], "with_label": [101, 186, 268, 593, 599, 603], "label": [101, 154, 186, 239, 268, 305, 343, 363, 383, 453, 477, 593, 598, 599, 600, 601, 603], "str": [101, 154, 168, 173, 186, 239, 253, 258, 268, 305, 314, 318, 402, 429, 498, 541, 548, 551, 592, 593, 599, 601, 603], "edge_label": [101, 186, 268, 593, 598, 599, 603], "figur": [101, 154, 186, 239, 268, 305, 378, 408, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 472, 488, 504, 593, 599, 600, 601, 603], "size": [101, 154, 168, 174, 186, 239, 253, 259, 268, 305, 314, 378, 408, 420, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 472, 488, 504, 556, 567, 592, 593, 599, 600, 601, 603], "640x480": [101, 154, 186, 239, 268, 305, 378, 408, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 472, 488, 504, 593, 599, 600, 601, 603], "ax": [101, 154, 186, 239, 268, 305, 378, 408, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 472, 488, 504, 593, 599, 600, 601, 603], "second": [101, 106, 122, 123, 170, 186, 191, 207, 208, 255, 268, 274, 285, 286, 290, 294, 295, 315, 346, 378, 394, 395, 396, 408, 410, 412, 428, 472, 487, 490, 491, 504, 507, 509, 511, 518, 519, 524, 568, 570, 595, 599, 603], "other_graph": [101, 186, 268, 599], "node_d": [101, 186, 268, 494, 599], "weight_combo_fn": [102, 169, 187, 254, 269, 599], "substitut": [102, 165, 187, 250, 269, 312], "ignor": [102, 108, 158, 159, 160, 161, 162, 164, 187, 193, 243, 244, 245, 246, 247, 249, 269, 276, 309, 310, 311, 350, 430, 432, 433, 435, 436, 438, 442, 443, 444, 449, 454, 455, 456, 457, 525, 545, 557, 594, 599, 601], "empti": [102, 131, 133, 134, 150, 187, 216, 218, 219, 235, 269, 293, 295, 296, 303, 322, 341, 364, 376, 384, 385, 391, 399, 412, 413, 417, 418, 422, 437, 446, 469, 478, 479, 495, 509, 513, 516, 523, 525, 532, 564, 565, 570, 599, 601, 603], "slower": [102, 187, 269], "associ": [102, 117, 119, 168, 187, 202, 204, 253, 269, 314, 592, 598, 599], "valid": [102, 187, 320, 321, 448, 488, 489, 520, 521, 593, 599], "contract": [102, 187, 269, 599], "inherit": [102, 187], "merg": [102, 141, 187, 226, 269, 410, 507, 568, 599], "occur": [102, 187, 261, 269, 279, 357, 358, 359, 360, 533, 599], "incom": [102, 131, 133, 134, 159, 160, 161, 187, 216, 218, 219, 244, 245, 246, 293, 303, 320, 357, 358, 359, 360, 514, 599], "outgo": [102, 133, 134, 150, 159, 160, 161, 187, 218, 219, 235, 244, 245, 246, 293, 303, 546, 599], "unspecifi": [102, 187, 269], "choos": [102, 187, 269, 488, 489, 593, 598, 599], "arbitrarili": [102, 187, 269, 341, 347, 363, 364, 376, 383, 384, 385, 413, 469, 477, 478, 479], "subject": [102, 187, 269], "shallow": [103, 188, 270, 599], "origin": [103, 135, 136, 137, 138, 169, 188, 220, 221, 222, 223, 254, 270, 372, 401, 465, 497, 539, 561, 596, 598, 599, 601], "edgeindexmap": [104, 133, 189, 218, 272, 295, 599, 603], "induc": [108, 193, 276, 396, 412, 491, 509, 524, 556, 570, 599], "subgraph": [108, 193, 276, 343, 354, 355, 382, 396, 412, 476, 491, 509, 518, 524, 529, 556, 570, 596, 599], "incid": [108, 133, 134, 193, 218, 219, 276, 293, 295, 296, 303, 334, 343, 599, 603], "silent": [108, 164, 193, 249, 276, 311], "extend": [110, 111, 195, 196, 278, 279, 336, 416, 599], "present": [110, 111, 124, 125, 131, 133, 134, 140, 150, 158, 159, 160, 161, 162, 164, 171, 195, 196, 209, 210, 216, 218, 219, 225, 235, 243, 244, 245, 246, 247, 249, 256, 278, 279, 287, 288, 293, 295, 296, 303, 309, 310, 311, 316, 399, 495, 532], "filter_funct": [112, 113, 197, 198, 280, 281], "filter": [112, 113, 117, 119, 142, 152, 153, 166, 167, 197, 198, 202, 204, 227, 237, 238, 251, 252, 280, 281, 350, 351, 599], "criteria": [112, 113, 197, 198, 280, 281, 599], "boolean": [112, 113, 114, 116, 117, 118, 119, 197, 198, 199, 201, 202, 203, 204, 280, 281, 335, 350, 351, 373, 412, 466, 509, 511, 533, 570, 599], "fit": [112, 113, 197, 198, 280, 281, 599], "complete_graph": [112, 197, 280, 454, 599], "def": [112, 113, 197, 198, 280, 281, 341, 364, 376, 384, 385, 394, 413, 428, 469, 478, 479, 487, 592, 598, 599, 600, 601, 603], "my_filter_funct": [112, 113, 197, 198, 280, 281, 599], "assert": [112, 113, 163, 197, 198, 248, 280, 281, 489, 494, 496, 598, 599], "predic": [114, 116, 118, 199, 201, 203], "successor": [114, 118, 119, 137, 138, 142, 143, 153, 159, 160, 161, 166, 199, 203, 204, 222, 223, 227, 228, 238, 244, 245, 246, 251, 321, 342, 351, 362, 394, 428, 487, 599], "10": [114, 116, 117, 118, 119, 199, 201, 202, 203, 204, 347, 349, 390, 398, 424, 440, 443, 444, 448, 451, 453, 456, 457, 484, 493, 522, 528, 553, 556, 593, 596, 597, 600], "20": [114, 116, 117, 118, 119, 199, 201, 202, 203, 204, 599], "30": [114, 116, 117, 118, 119, 199, 201, 202, 203, 204, 389, 423, 483, 599], "lambda": [114, 116, 117, 118, 119, 159, 168, 199, 201, 202, 203, 204, 244, 253, 314, 325, 357, 358, 359, 360, 365, 392, 393, 394, 395, 396, 399, 426, 427, 428, 439, 440, 450, 451, 458, 485, 486, 487, 490, 491, 495, 518, 519, 524, 532, 533, 535, 536, 557, 593, 598, 599, 601], "25": [114, 116, 117, 118, 119, 168, 199, 201, 202, 203, 204, 253, 314, 339, 375, 468, 593, 599], "nosuitableneighbor": [114, 116, 118, 199, 201, 203], "suitabl": [114, 116, 118, 199, 201, 203], "within": [115, 200, 282, 523, 544, 556, 558, 599], "worst": [115, 200, 282], "o": [115, 159, 160, 161, 168, 173, 200, 244, 245, 246, 253, 258, 268, 282, 314, 318, 397, 410, 417, 418, 420, 470, 492, 507, 512, 527, 533, 564, 565, 567, 568, 593, 599], "equal": [115, 141, 159, 161, 200, 226, 244, 246, 282, 326, 327, 328, 329, 330, 366, 367, 368, 369, 370, 392, 393, 394, 395, 396, 399, 409, 410, 426, 427, 428, 459, 485, 486, 487, 490, 491, 495, 505, 506, 507, 518, 519, 524, 532, 562, 568, 599], "found": [115, 200, 282, 357, 358, 359, 360, 363, 364, 383, 384, 391, 399, 412, 477, 478, 495, 509, 530, 532, 533, 553, 570, 597, 599, 600, 601], "predecessor": [116, 117, 119, 135, 136, 143, 152, 159, 160, 161, 167, 201, 202, 204, 220, 221, 228, 237, 244, 245, 246, 252, 322, 333, 340, 385, 413, 479, 579, 599], "find_predecessors_by_edg": [116, 119, 152, 153, 201, 204, 237, 238, 599], "filter_fn": [117, 119, 202, 204, 350, 351, 601], "satisfi": [117, 119, 202, 204], "find_predecessor_node_by_edg": [117, 202, 599], "find_successors_by_edg": [118, 142, 166, 167, 203, 227, 251, 252, 599], "find_successor_node_by_edg": [119, 204, 599], "static": [120, 121, 154, 205, 206, 239, 283, 284, 305, 598, 599], "matrix": [120, 121, 205, 206, 283, 284, 325, 365, 388, 393, 394, 411, 421, 427, 428, 458, 482, 486, 487, 508, 547, 569, 599, 601], "null_valu": [120, 121, 205, 206, 283, 284, 325, 365, 388, 421, 458, 482, 599], "element": [120, 121, 154, 205, 206, 239, 283, 284, 295, 305, 346, 378, 388, 408, 444, 457, 472, 482, 504, 599], "construct": [120, 121, 174, 205, 206, 259, 283, 284, 494, 496, 529, 599, 603], "input": [120, 121, 159, 205, 206, 244, 283, 284, 321, 325, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 343, 345, 346, 347, 349, 355, 356, 357, 358, 359, 360, 361, 363, 365, 367, 368, 369, 370, 373, 374, 375, 378, 380, 382, 386, 388, 389, 390, 391, 398, 401, 408, 409, 410, 411, 414, 415, 416, 421, 423, 424, 425, 431, 434, 458, 460, 461, 462, 463, 466, 467, 468, 470, 472, 474, 476, 477, 480, 483, 484, 488, 489, 493, 494, 496, 497, 504, 505, 506, 507, 510, 511, 514, 517, 526, 528, 534, 537, 538, 539, 546, 547, 551, 557, 562, 563, 568, 569, 598, 599, 601, 603], "from_complex_adjacency_matrix": [120, 205, 283, 599], "numpi": [120, 121, 205, 206, 283, 284, 325, 365, 388, 393, 394, 421, 427, 428, 458, 482, 486, 487, 597, 598, 599], "float64": [120, 121, 205, 206, 283, 284, 598, 599], "complex": [120, 121, 159, 160, 161, 205, 206, 244, 245, 246, 283, 284, 409, 417, 420, 512, 513, 564, 567, 596, 599], "complex128": [120, 121, 205, 206, 283, 284], "ndarrai": [120, 121, 205, 206, 283, 284, 325, 365, 388, 393, 394, 420, 421, 427, 428, 458, 482, 486, 487, 567], "arrai": [120, 121, 205, 206, 283, 284, 325, 365, 420, 458, 567, 593, 598, 599], "dimension": [120, 121, 205, 206, 283, 284, 598, 599], "np": [120, 121, 205, 206, 283, 284, 393, 394, 418, 420, 427, 428, 486, 487, 488, 565, 567, 598, 599], "null": [120, 121, 205, 206, 283, 284, 325, 365, 388, 421, 458, 482, 599], "0j": [121, 206, 284, 599], "from_adjacency_matrix": [121, 206, 284, 598, 599, 603], "noedgebetweennod": [122, 123, 155, 157, 170, 207, 208, 240, 242, 255, 285, 286, 306, 308, 315], "edge_index": [124, 125, 171, 209, 210, 256, 287, 288, 316, 599, 603], "indexerror": [124, 125, 126, 171, 209, 210, 211, 256, 287, 288, 289, 316, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 442, 443, 444, 447, 448, 449, 450, 451, 454, 455, 456, 457, 599], "invalid": [126, 211, 289, 320, 488, 489, 540, 599], "destin": [127, 212, 338, 387, 397, 415, 461, 463, 481, 492, 527, 599], "recreat": [132, 151, 217, 236, 294, 304, 599], "parent_index": [132, 217, 294], "edge_data": [132, 151, 217, 236, 294, 304], "weightededgelist": [132, 151, 172, 217, 236, 257, 294, 304, 317, 535, 599], "all_edg": [133, 134, 218, 219], "ones": [133, 218, 320], "later": [134, 219, 296], "retriev": [134, 219, 296, 412, 509, 570, 599], "get_edge_data_by_index": [134, 219, 296, 599, 603], "get_edge_endpoints_by_index": [134, 219, 296, 599, 603], "ref_nod": [135, 136, 137, 138, 220, 221, 222, 223], "essenti": [135, 136, 137, 138, 220, 221, 222, 223], "copi": [135, 136, 137, 138, 140, 164, 165, 220, 221, 222, 223, 225, 249, 250, 311, 312, 313, 598, 599], "prepend": [135, 136, 220, 221], "append": [137, 138, 222, 223, 341, 364, 376, 384, 385, 394, 413, 428, 431, 434, 438, 447, 449, 469, 478, 479, 487, 599, 600], "symmetr": [139, 140, 224, 225, 567, 599], "edge_payload_fn": [140, 225], "make": [140, 225, 328, 330, 338, 368, 370, 387, 415, 461, 463, 481, 593, 597, 599, 601, 603], "revers": [140, 225, 320, 385, 413, 479, 530, 598, 599], "guarante": [140, 161, 225, 246, 390, 398, 399, 424, 484, 493, 495, 511, 528, 532, 547, 559, 598, 599, 600, 603], "execut": [140, 225, 392, 393, 394, 399, 426, 427, 428, 485, 486, 487, 495, 532, 599, 601], "edge_payload": [140, 225], "typic": [140, 225, 430, 431, 432, 433, 434, 435, 436, 438, 442, 443, 444, 447, 449, 454, 455, 456, 457, 598, 603], "lower": [140, 225, 406, 418, 502, 554, 565, 599], "v": [141, 226, 339, 341, 349, 363, 364, 375, 376, 380, 383, 384, 385, 389, 397, 411, 413, 420, 423, 445, 468, 469, 474, 477, 478, 479, 483, 492, 508, 512, 527, 530, 561, 567, 569, 573, 574, 579, 580, 581, 585, 589, 593, 599, 600, 601], "redirect": [141, 226], "persist": [141, 226], "successor_indic": [142, 152, 227, 237, 599], "predecessor_indic": [142, 166, 227, 251, 599], "undirect": [142, 143, 152, 153, 166, 167, 169, 227, 228, 237, 238, 251, 252, 254, 259, 290, 293, 294, 303, 304, 334, 338, 341, 343, 345, 347, 353, 363, 364, 378, 387, 388, 392, 393, 394, 408, 411, 415, 421, 428, 430, 431, 432, 433, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 469, 472, 475, 477, 478, 479, 481, 482, 490, 491, 504, 506, 507, 510, 512, 516, 522, 523, 525, 531, 533, 535, 536, 543, 544, 545, 551, 558, 564, 565, 566, 567, 569, 576, 579, 582, 594, 599, 601, 603], "agnost": [143, 228], "thereon": [143, 228], "to_undirect": [143, 228, 599], "prefer": [144, 229, 298], "earlier": [144, 229, 298, 376, 384, 385, 469, 478, 479, 599, 601], "endg": [149, 234], "child_index": [151, 236, 304], "delimin": [154, 173, 239, 258, 305, 318], "file": [154, 168, 173, 239, 253, 258, 305, 314, 318, 402, 429, 498, 541, 551, 592, 598, 599, 603], "separ": [154, 239, 305, 592, 598, 599], "delimit": [154, 239, 305], "3rd": [154, 239, 305], "charact": [154, 173, 239, 258, 305, 318, 599], "whitespac": [154, 239, 305, 599], "field": [154, 239, 305, 402, 498, 541, 551], "uniqu": [154, 239, 305, 432, 435, 598, 599, 603], "identifi": [154, 156, 239, 241, 295, 305, 307, 599, 603], "tempfil": [154, 168, 173, 239, 253, 258, 268, 305, 314, 318, 599, 603], "namedtemporaryfil": [154, 239, 305, 599, 603], "wt": [154, 239, 305, 599, 603], "fd": [154, 239, 305, 599, 603], "flush": [154, 239, 305, 599, 603], "index_list": [157, 162, 242, 247, 308, 310], "pair": [157, 160, 161, 242, 245, 246, 308, 313, 326, 339, 345, 366, 375, 389, 392, 393, 394, 399, 407, 411, 423, 426, 427, 428, 432, 435, 441, 452, 459, 468, 483, 485, 486, 487, 495, 503, 506, 508, 512, 516, 525, 532, 555, 556, 569, 596, 599, 600, 603], "effect": [158, 159, 160, 161, 243, 244, 245, 246, 309, 401, 417, 497, 539, 564, 599], "use_outgo": [159, 161, 244, 246], "retain": [159, 244, 599], "minimum": [159, 160, 161, 244, 245, 246, 326, 332, 365, 366, 372, 458, 459, 465, 535, 536, 556, 557, 593, 599], "mathcal": [159, 160, 161, 244, 245, 246, 410, 507, 568, 599], "e_i": [159, 160, 161, 244, 245, 246], "e_o": [159, 160, 161, 244, 245, 246], "respect": [159, 244, 347, 410, 417, 418, 507, 564, 565, 568, 595, 598, 599, 601], "cast": [159, 244, 325, 365, 392, 393, 394, 426, 427, 428, 458, 485, 486, 487, 534, 535, 536, 556, 593, 599], "hashabl": [159, 161, 244, 246, 598, 599, 603], "quantiti": [159, 244], "remove_node_retain_edges_by_kei": [159, 244, 599], "referenti": [159, 244, 599], "remove_node_retain_edges_by_id": [159, 244, 599], "in_edg": [159, 244, 599], "out_edg": [159, 244, 599, 601], "had": [159, 244, 320, 321, 599], "consequ": [160, 161, 245, 246], "exact": [161, 246, 599], "determinist": [161, 165, 246, 250, 312, 599], "drawn": [161, 246, 522, 593], "exactli": [161, 246, 350, 354, 599], "position": [161, 246], "relev": [161, 246, 599, 600], "opposit": [163, 248, 530], "weighted_edge_list": [163, 248, 324, 598, 599], "preserve_attr": [164, 249, 311], "edge_map_fn": [165, 250, 312, 599], "node_filt": [165, 250, 312], "edge_weight_map": [165, 250, 312], "nodemap": [165, 250, 312, 412, 509, 570, 599], "node_attr": [168, 253, 314, 402, 429, 498, 541, 548, 592, 599], "edge_attr": [168, 253, 314, 402, 429, 498, 541, 548, 599], "graph_attr": [168, 253, 314, 402, 429, 498, 541, 548, 592], "filenam": [168, 253, 314, 592], "dot": [168, 253, 314, 592, 599], "typeerror": [168, 173, 253, 258, 314, 318, 376, 384, 385, 441, 448, 452, 469, 478, 479, 599], "unfortun": [168, 253, 314], "graphviz": [168, 253, 314, 592, 598, 599, 600, 603], "pydot": [168, 253, 268, 314, 592, 598, 599], "pil": [168, 253, 268, 314, 439, 440, 450, 451, 592, 599, 600, 601, 603], "directed_gnp_random_graph": [168, 253, 420, 599], "15": [168, 253, 314, 447, 448, 556, 596, 600], "dot_str": [168, 253, 314, 599], "fillcolor": [168, 253, 314, 439, 440, 450, 451, 592, 599, 600], "lightblu": [168, 253, 314, 439, 440, 450, 451, 599], "style": [168, 253, 314, 439, 440, 450, 451, 592, 593, 599, 600, 603], "fill": [168, 253, 314, 438, 439, 440, 449, 450, 451, 592, 599, 600, 603], "graph_from_dot_data": [168, 253, 314, 599], "temporarydirectori": [168, 253, 314, 599], "tmpdirnam": [168, 253, 314, 599], "tmp_path": [168, 253, 314, 599], "join": [168, 173, 253, 258, 314, 318, 430, 441, 452, 549, 599], "png": [168, 253, 314, 592, 599], "write_png": [168, 253, 314, 599], "pngimageplugin": [168, 253, 314, 439, 440, 450, 451, 592, 599, 600, 601, 603], "pngimagefil": [168, 253, 314, 439, 440, 450, 451, 592, 599, 600, 601, 603], "rgba": [168, 253, 314, 439, 440, 450, 451, 593, 599, 600, 601, 603], "1395x1211": 168, "bidirect": [169, 254, 313, 388, 392, 393, 394, 411, 421, 428, 434, 436, 438, 439, 440, 441, 443, 444, 450, 569, 599], "condens": [169, 254, 599], "kept": [169, 254], "update_edge_by_index": [170, 255, 315, 599, 603], "weight_fn": [173, 258, 318, 325, 331, 338, 357, 358, 359, 360, 365, 371, 385, 387, 390, 392, 393, 394, 398, 401, 407, 413, 415, 424, 426, 427, 428, 458, 464, 479, 481, 484, 485, 486, 487, 493, 497, 503, 511, 528, 533, 534, 535, 536, 539, 547, 555, 556, 557, 597, 598, 599], "callback": [173, 258, 318, 341, 364, 376, 384, 385, 413, 469, 478, 479, 488, 489, 593, 598, 599], "gettempdir": [173, 258, 318], "rt": [173, 258, 318], "edge_fil": [173, 258, 318], "metadata": [174, 259, 603], "keyword": [174, 259, 549, 599], "source_path": [174, 259], "tmp": [174, 259], "csv": [174, 259], "new_path": [174, 259], "old_path": [174, 259], "assign": [174, 259, 343, 365, 441, 452, 453, 458, 488, 489, 514, 546, 547, 598, 599, 600, 603], "hint": [174, 259, 599], "alloc": [174, 259, 599], "enough": [174, 259], "capac": [174, 259], "store": [174, 259, 549, 551, 601, 603], "prepopul": [174, 259], "optim": [174, 259, 407, 488, 503, 505, 521, 555, 556, 585, 599, 601], "complet": [174, 259, 417, 418, 430, 432, 435, 442, 454, 455, 534, 556, 564, 565, 599, 601], "known": [174, 259, 400, 417, 418, 453, 564, 565, 599, 601], "advanc": [174, 259], "888x1019": 253, "last": [261, 279, 363, 364, 383, 384, 477, 478, 595, 599, 601], "node_": 268, "represent": [269, 407, 503, 555, 599, 601], "rest": [269, 599], "rtype": [270, 325, 339, 365, 375, 389, 423, 468, 483], "get_all_edge_data": 286, "distinct": [293, 303, 339, 375, 389, 423, 432, 435, 468, 483, 520, 601], "alwai": [294, 295, 304, 417, 418, 564, 565, 598, 599], "easili": [295, 599, 603], "undirected_gnp_random_graph": [314, 567, 599], "692x443": 314, "path_graph": [318, 472, 504, 509, 570, 599, 601, 603], "partition_it": 319, "another_block": 319, "the_second_block": 319, "check_arg": [320, 599], "topolog": [320, 321, 357, 358, 359, 360, 530, 559, 560, 599, 601], "is_act": 320, "get_readi": [320, 321, 323], "sorter": [320, 599], "underli": 320, "mutat": [320, 341, 364, 376, 384, 385, 413, 469, 478, 479, 599, 603], "recommend": 320, "daghascycl": [320, 357, 358, 359, 360, 559, 560], "progress": [320, 322, 323], "regular": [320, 441, 448, 452, 530], "flip": 320, "certainli": [320, 530], "notabl": [320, 530], "natur": [320, 530], "zero": [320, 418, 530, 547, 557, 565, 599], "valueerror": [320, 321, 331, 354, 366, 369, 370, 371, 373, 386, 387, 397, 425, 459, 462, 463, 464, 466, 480, 481, 492, 530, 534, 556, 599], "partial": [320, 321, 505, 530, 599], "themselv": [320, 321, 530], "were": [320, 530, 599, 601, 603], "circuit": [320, 553, 601], "meaning": [320, 599], "memori": [320, 599], "improv": [320, 349, 380, 399, 401, 474, 495, 497, 518, 532, 539, 596, 599], "undefin": [320, 599], "unblock": 321, "yet": [321, 323, 599], "happen": 321, "amongst": 321, "further": [322, 599], "haven": 323, "default_weight": [325, 331, 338, 365, 371, 387, 390, 392, 393, 394, 398, 401, 407, 415, 424, 426, 427, 428, 458, 464, 481, 484, 485, 486, 487, 493, 497, 503, 528, 533, 535, 536, 539, 547, 555], "sum": [325, 337, 339, 356, 365, 374, 375, 386, 389, 390, 398, 414, 423, 424, 458, 467, 468, 480, 483, 484, 493, 511, 528, 533, 547, 556, 599], "tell": [325, 365, 392, 393, 394, 426, 427, 428, 458, 485, 486, 487, 535, 536], "rust": [325, 365, 392, 393, 394, 426, 427, 428, 458, 485, 486, 487, 535, 536, 596, 597, 598, 599], "extract": [325, 365, 392, 393, 394, 426, 427, 428, 458, 485, 486, 487, 535, 536], "numer": [325, 365, 392, 393, 394, 426, 427, 428, 458, 485, 486, 487, 535, 536, 593, 596, 598, 603], "absenc": [325, 365, 388, 421, 458, 482, 599], "min_depth": [326, 332, 366, 372, 459, 465, 599], "cutoff": [326, 332, 366, 372, 459, 465, 599], "multithread": [326, 327, 328, 329, 330, 339, 366, 367, 368, 369, 370, 375, 388, 389, 392, 393, 394, 399, 409, 411, 421, 423, 426, 427, 428, 459, 468, 482, 483, 485, 486, 487, 495, 505, 506, 508, 532, 562, 569, 599], "thread": [326, 327, 328, 329, 330, 339, 366, 367, 368, 369, 370, 375, 388, 389, 392, 393, 394, 399, 409, 411, 421, 423, 426, 427, 428, 459, 468, 482, 483, 485, 486, 487, 495, 505, 506, 508, 532, 562, 569, 595, 599], "pool": [326, 327, 328, 329, 330, 366, 367, 368, 369, 370, 392, 393, 394, 399, 409, 426, 427, 428, 459, 485, 486, 487, 495, 505, 506, 532, 562], "cpu": [326, 327, 328, 329, 330, 366, 367, 368, 369, 370, 392, 393, 394, 399, 409, 411, 426, 427, 428, 459, 485, 486, 487, 495, 505, 506, 508, 532, 562, 569, 595, 597, 599], "tune": [326, 327, 328, 329, 330, 366, 367, 368, 369, 370, 388, 392, 393, 394, 399, 409, 411, 421, 426, 427, 428, 459, 482, 485, 486, 487, 495, 505, 506, 508, 532, 562, 569], "rayon_num_thread": [326, 327, 328, 329, 330, 339, 366, 367, 368, 369, 370, 375, 388, 389, 392, 393, 394, 399, 409, 411, 421, 423, 426, 427, 428, 459, 468, 482, 483, 485, 486, 487, 495, 505, 506, 508, 532, 562, 569, 599], "depth": [326, 332, 347, 363, 364, 366, 372, 383, 384, 459, 465, 477, 478, 529, 599], "regardless": [326, 332, 366, 372, 459, 465], "allpairsmultiplepathmap": [326, 366, 459], "edge_cost_fn": [327, 328, 329, 330, 335, 337, 367, 368, 369, 370, 373, 374, 386, 414, 425, 460, 461, 462, 463, 466, 467, 480, 537], "calcul": [327, 329, 339, 349, 367, 369, 375, 380, 382, 388, 389, 400, 401, 411, 421, 423, 460, 462, 468, 474, 482, 483, 497, 508, 539, 569, 595, 597, 599], "bellman": [327, 328, 337, 338, 367, 368, 374, 425, 460, 461, 467, 537, 599], "ford": [327, 328, 337, 338, 367, 368, 374, 425, 460, 461, 467, 537, 599], "act": [327, 328, 329, 330, 367, 368, 369, 370, 460, 461, 462, 463, 598], "cost": [327, 328, 329, 330, 331, 335, 337, 338, 367, 368, 369, 370, 371, 373, 374, 385, 386, 387, 397, 407, 413, 414, 415, 425, 460, 461, 462, 463, 464, 466, 467, 479, 480, 481, 492, 503, 527, 535, 536, 537, 555, 599], "allpairspathlengthmap": [327, 329, 367, 369, 392, 426, 460, 462, 485, 599], "negativecycl": [327, 328, 337, 338, 367, 368, 374, 460, 461, 467], "neg": [327, 328, 331, 335, 337, 338, 350, 367, 368, 369, 370, 371, 373, 374, 386, 387, 392, 393, 394, 397, 414, 425, 426, 427, 428, 448, 460, 461, 462, 463, 464, 466, 467, 480, 481, 485, 486, 487, 492, 534, 537, 556, 599], "run": [328, 330, 339, 350, 351, 368, 370, 375, 388, 389, 390, 392, 393, 394, 398, 399, 409, 411, 412, 418, 421, 423, 426, 427, 428, 431, 434, 468, 470, 482, 483, 484, 485, 486, 487, 493, 495, 505, 506, 508, 509, 511, 532, 533, 547, 562, 565, 569, 570, 593, 596, 597, 599, 601, 603], "allpairspathmap": [328, 330, 368, 370, 461, 463], "dijkstra": [329, 330, 331, 369, 370, 371, 385, 386, 387, 392, 393, 394, 413, 414, 415, 426, 427, 428, 462, 463, 464, 479, 480, 481, 485, 486, 487, 599], "as_undirect": [331, 338, 371, 387, 388, 392, 393, 394, 411, 415, 421, 428, 481, 510, 569, 599], "isn": [331, 338, 371, 387, 407, 415, 416, 464, 481, 503, 535, 536, 555, 598], "nan": [331, 369, 370, 371, 373, 386, 387, 397, 411, 462, 463, 464, 466, 480, 481, 492, 508, 534, 556, 557, 569, 599], "from_": 332, "repeat": [332, 341, 347, 363, 364, 372, 376, 383, 384, 385, 413, 465, 469, 477, 478, 479], "inner": [332, 347, 372, 465, 599], "articul": [334, 343, 599], "cut": [334, 343, 557, 599], "vertex": [334, 341, 347, 364, 376, 384, 385, 411, 413, 469, 478, 479, 488, 489, 494, 506, 508, 523, 544, 558, 569, 572, 573, 574, 575, 580, 581, 585, 588, 589, 599], "whose": [334, 345, 361, 375, 389, 390, 398, 419, 423, 424, 468, 483, 484, 493, 511, 514, 528, 529, 546, 547, 556, 566, 572, 575, 599], "along": [334, 599], "increas": [334, 345, 407, 503, 512, 555, 599], "implicitli": [334, 343, 345, 347, 355, 356, 382, 409, 476, 506, 562], "assum": [334, 343, 345, 347, 355, 356, 382, 401, 409, 476, 497, 506, 531, 539, 562, 599], "loop": [334, 343, 345, 347, 352, 355, 356, 381, 382, 391, 409, 417, 420, 475, 476, 506, 531, 562, 564, 567, 599], "produc": [334, 343, 345, 347, 355, 356, 382, 409, 476, 496, 505, 506, 556, 562, 599], "incorrect": [334, 343, 345, 347, 355, 356, 382, 409, 476, 506, 562, 599], "unexpect": [334, 343, 345, 347, 355, 356, 357, 358, 359, 360, 382, 409, 476, 506, 562, 599], "goal_fn": [335, 373, 466], "estimate_cost_fn": [335, 373, 466], "comput": [335, 337, 339, 343, 349, 352, 361, 373, 374, 375, 380, 381, 386, 389, 390, 397, 398, 399, 401, 409, 411, 414, 422, 423, 424, 466, 467, 468, 474, 475, 480, 483, 484, 492, 493, 495, 497, 506, 508, 511, 513, 514, 527, 528, 532, 533, 539, 546, 547, 556, 557, 562, 563, 569, 593, 599, 601], "estim": [335, 373, 466], "admiss": [335, 373, 466], "never": [335, 352, 373, 381, 466, 475, 582, 599], "overestim": [335, 373, 466], "nearest": [335, 373, 466], "goal": [335, 337, 373, 374, 385, 386, 397, 413, 414, 466, 467, 479, 480, 492, 527, 598, 599], "seed": [336, 404, 407, 416, 417, 418, 419, 420, 500, 503, 505, 512, 549, 550, 555, 564, 565, 566, 567, 599], "initial_graph": [336, 416, 599], "barab\u00e1si": [336, 416, 599], "albert": [336, 416, 599], "preferenti": [336, 416, 599], "grown": [336, 416, 596, 603], "l": [336, 416, 494, 547, 549, 599], "r": [336, 416, 447, 512, 547, 595, 596, 599], "emerg": [336, 416], "scale": [336, 344, 348, 349, 377, 379, 380, 401, 405, 406, 407, 416, 445, 471, 473, 474, 497, 501, 502, 503, 539, 552, 554, 555, 593, 599], "network": [336, 349, 389, 407, 409, 416, 418, 423, 453, 483, 503, 555, 565, 595, 596, 599, 603], "scienc": [336, 349, 416], "286": [336, 416], "pp": [336, 416], "509": [336, 416], "512": [336, 416], "1999": [336, 416, 511, 547], "star_graph": [336, 416, 599], "star": [336, 416, 444, 448, 457, 599], "spfa": [337, 338, 374, 425, 467, 537, 599], "heurist": [337, 338, 374, 395, 396, 412, 425, 467, 488, 490, 491, 509, 518, 519, 524, 537, 570, 599], "wit": 338, "parallel_threshold": [339, 375, 388, 389, 392, 393, 394, 411, 421, 423, 426, 427, 428, 468, 482, 483, 485, 486, 487, 505, 508, 569, 599], "50": [339, 375, 389, 407, 423, 468, 483, 503, 505, 555, 599], "fraction": [339, 349, 375, 380, 389, 401, 423, 468, 474, 483, 497, 539, 599], "through": [339, 375, 389, 423, 468, 483, 599, 600, 601], "c_b": [339, 375, 389, 423, 468, 483, 599, 600], "sum_": [339, 349, 375, 380, 389, 411, 423, 468, 474, 483, 508, 512, 569, 599, 600], "frac": [339, 349, 375, 380, 389, 407, 409, 411, 423, 468, 474, 483, 503, 506, 508, 512, 555, 569, 599, 600], "sigma": [339, 375, 389, 423, 468, 483, 599, 600], "ulrik": [339, 375, 389, 418, 423, 468, 483, 522, 565, 599], "brand": [339, 375, 389, 418, 423, 468, 483, 522, 565, 599], "journal": [339, 375, 390, 424, 448, 453, 468, 484, 511, 557, 599], "mathemat": [339, 375, 468, 599], "sociologi": [339, 375, 390, 424, 468, 484, 599], "163": [339, 375, 468, 599], "177": [339, 375, 468, 599], "2001": [339, 375, 401, 468, 497, 539, 599], "abov": [339, 375, 388, 389, 392, 393, 394, 399, 411, 418, 421, 423, 426, 427, 428, 431, 434, 468, 482, 483, 485, 486, 487, 495, 508, 532, 565, 569, 598, 599, 601, 603], "env": [339, 375, 388, 389, 411, 421, 423, 468, 482, 483, 508, 569], "var": [339, 375, 388, 389, 411, 421, 423, 468, 482, 483, 508, 569], "param": [339, 375, 389, 423, 468, 483], "breadth": [340, 341, 342, 376, 469, 599], "bf": [340, 341, 342, 376, 469], "bfspredecessor": 340, "visitor": [341, 364, 376, 384, 385, 413, 469, 478, 479, 571, 578, 584, 599], "vertic": [341, 343, 353, 364, 376, 384, 385, 413, 431, 432, 434, 435, 469, 470, 478, 479, 494, 513, 516, 523, 525, 530, 543, 544, 545, 558, 581, 594, 599, 603], "pseudo": [341, 363, 364, 376, 383, 384, 385, 413, 469, 477, 478, 479], "code": [341, 363, 364, 376, 383, 384, 385, 413, 439, 440, 450, 451, 469, 477, 478, 479, 596, 599, 601, 603], "annot": [341, 364, 376, 384, 385, 413, 469, 478, 479, 599], "event": [341, 364, 376, 384, 385, 413, 469, 478, 479, 571, 578, 579, 584, 586, 587, 599], "white": [341, 364, 376, 384, 469, 478, 603], "grai": [341, 364, 376, 384, 469, 478, 575], "undiscov": [341, 364, 376, 384, 469, 478], "q": [341, 376, 385, 413, 469, 479], "queue": [341, 376, 385, 413, 469, 479, 572, 575, 585, 599], "discover_vertex": [341, 364, 376, 384, 385, 413, 469, 478, 479, 599], "dequeu": [341, 376, 469], "w": [341, 363, 364, 376, 383, 384, 385, 413, 453, 469, 477, 478, 479, 561], "outedg": [341, 364, 376, 384, 385, 413, 469, 478, 479, 547], "tree_edg": [341, 364, 376, 384, 469, 478, 579, 599], "els": [341, 363, 376, 383, 385, 413, 469, 477, 479, 592, 598, 599, 601, 603], "non_tree_edg": [341, 376, 469], "gray_target_edg": [341, 376, 469], "elif": [341, 364, 376, 384, 469, 478, 603], "black_target_edg": [341, 376, 469], "finish_vertex": [341, 364, 376, 384, 385, 413, 469, 478, 479], "insid": [341, 364, 376, 384, 385, 413, 469, 478, 479, 571, 578, 584], "stop": [341, 350, 364, 376, 384, 385, 386, 390, 395, 396, 398, 407, 412, 413, 414, 424, 469, 478, 479, 480, 484, 490, 491, 493, 503, 509, 511, 518, 524, 528, 547, 555, 570, 591, 599], "immedi": [341, 364, 376, 384, 385, 398, 413, 469, 478, 479, 493, 513, 528, 599], "exploit": [341, 364, 376, 384, 385, 413, 469, 478, 479], "exit": [341, 364, 376, 384, 385, 413, 469, 478, 479, 599], "earli": [341, 364, 376, 384, 385, 413, 469, 478, 479], "stopsearch": [341, 364, 376, 384, 385, 413, 469, 478, 479], "prune": [341, 364, 376, 384, 385, 413, 469, 478, 479, 590], "prunesearch": [341, 364, 376, 384, 385, 413, 469, 478, 479], "visit": [341, 364, 376, 384, 385, 395, 396, 412, 413, 469, 478, 479, 490, 491, 509, 518, 524, 570, 599], "treeedgesrecord": [341, 364, 376, 384, 469, 478, 599], "vi": [341, 364, 376, 384, 385, 413, 469, 478, 479, 599], "restrict": [341, 376, 469, 601], "home": [341, 376, 469, 511], "market": [341, 376, 469], "school": [341, 376, 469], "distancehomefind": [341, 376, 469], "distanc": [341, 349, 376, 380, 388, 393, 394, 401, 407, 411, 421, 427, 428, 439, 440, 450, 451, 469, 474, 482, 486, 487, 497, 503, 508, 512, 534, 539, 549, 555, 556, 569, 585, 587, 595, 599], "setdefault": [341, 376, 469], "_": [341, 357, 358, 359, 360, 376, 378, 385, 408, 413, 428, 469, 472, 479, 504, 599], "road": [341, 376, 469, 595], "close": [341, 349, 376, 380, 401, 407, 469, 474, 497, 503, 539, 553, 555, 599], "chosen": [341, 347, 363, 364, 376, 383, 384, 385, 413, 469, 477, 478, 479], "invok": [341, 364, 376, 384, 385, 413, 469, 478, 479, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589], "subclass": [341, 364, 376, 384, 385, 413, 469, 478, 479, 599], "bfssuccessor": [342, 599], "disconnect": [343, 411, 508, 557, 569, 599], "first_nod": [344, 377, 471], "horizont": [344, 377, 471], "center": [344, 348, 377, 379, 404, 405, 406, 407, 444, 457, 471, 473, 500, 501, 502, 503, 550, 552, 554, 555], "aspect_ratio": [344, 377, 471], "3333333333333333": 344, "bipartit": [344, 377, 419, 470, 471, 515, 563, 566, 599], "left": [344, 377, 419, 440, 451, 471, 512, 522, 566], "orient": [344, 347, 377, 409, 471], "ratio": [344, 349, 377, 380, 401, 471, 474, 497, 539, 599], "width": [344, 377, 471, 593], "height": [344, 377, 471], "pos2dmap": [344, 348, 377, 379, 404, 405, 406, 471, 473, 500, 501, 502, 550, 552, 554, 593, 598, 599], "cartesian": [346, 378, 472, 599], "product": [346, 378, 408, 472, 504, 599], "productnodemap": [346, 378, 408, 472, 504], "chain": [347, 350, 599], "decomposit": [347, 599], "deriv": [347, 398, 493, 528, 599], "fundament": [347, 356, 599], "manner": [347, 599, 603], "begin": [347, 601], "nontre": 347, "awai": 347, "overlap": [347, 599], "segment": 347, "inform": [347, 419, 453, 551, 566, 595, 599, 603], "schmidt": 347, "jen": 347, "2013": [347, 599], "test": [347, 522, 533, 597, 599], "letter": [347, 595], "113": 347, "241": 347, "244": 347, "elsevi": 347, "doi": [347, 349, 390, 424, 448, 453, 484, 522, 553, 556, 599], "1016": [347, 448, 556, 599], "j": [347, 432, 435, 445, 511, 512, 599], "ipl": [347, 599], "016": [347, 599], "circular": [348, 379, 473], "wf_improv": [349, 380, 401, 474, 497, 539], "reciproc": [349, 380, 474, 599], "averag": [349, 365, 380, 397, 401, 411, 458, 474, 492, 497, 508, 527, 539, 569, 599], "reachabl": [349, 363, 380, 383, 397, 401, 474, 477, 492, 497, 523, 525, 527, 539, 544, 545, 558, 594, 599], "reach": [349, 380, 385, 386, 390, 398, 413, 414, 424, 474, 479, 480, 484, 493, 511, 528, 547, 599], "altern": [349, 380, 401, 474, 497, 539, 598, 600, 603], "formula": [349, 380, 401, 474, 497, 539], "actor": [349, 380, 401, 474, 497, 539], "who": [349, 380, 401, 474, 497, 539, 599, 603], "wf": [349, 380, 401, 474, 497, 539], "c_": [349, 380, 474], "wasserman": 349, "faust": 349, "k": [349, 354, 355, 356, 382, 397, 407, 447, 448, 476, 492, 503, 527, 555, 593, 599], "1994": 349, "social": [349, 389, 423, 453, 483, 599], "cambridg": 349, "press": 349, "1017": 349, "cbo9780511815478": 349, "color_fn": 350, "collect": [350, 351, 356, 559, 601], "bicolor": 350, "continu": [350, 385, 407, 413, 479, 503, 555, 598, 599], "subset": [353, 488, 489, 523, 533, 543, 544, 545, 547, 558, 572, 575, 594, 599], "core": [355, 382, 476, 551, 595, 599], "basi": [356, 599], "minim": [356, 505, 556, 600], "summat": 356, "exclus": 356, "cacm": 356, "491": 356, "paton": 356, "comm": 356, "acm": [356, 511, 533, 557], "12": [356, 448, 593, 596, 597], "sept": 356, "1969": [356, 448], "514": 356, "518": 356, "longest": [357, 358, 359, 360, 399, 495, 532, 599], "unsign": [357, 358, 599], "could": [357, 358, 359, 360, 593, 598, 599, 601, 603], "centralitymap": [361, 375, 380, 390, 398, 401, 424, 468, 474, 484, 493, 497, 511, 514, 528, 539, 546, 547, 600], "df": [363, 364, 383, 384, 391, 477, 478, 581], "procedur": [363, 383, 445, 477, 599], "stack": [363, 364, 383, 384, 477, 478], "push": [363, 364, 383, 384, 385, 413, 477, 478, 479], "\u00f8": [363, 383, 477], "hasnext": [363, 383, 477], "pop": [363, 364, 383, 384, 385, 413, 477, 478, 479, 585], "span": [363, 477, 535, 536, 556, 599], "back_edg": [364, 384, 478], "forward_or_cross_edg": [364, 384, 478], "parallel_edg": [365, 458, 599], "dag_adjacency_matrix": 365, "determin": [365, 385, 395, 396, 399, 413, 420, 458, 479, 490, 491, 495, 513, 515, 518, 519, 524, 530, 532, 557, 567, 599], "min": [365, 385, 413, 458, 479, 557, 599, 600], "caus": [365, 458, 521, 599], "behavior": [365, 458, 599], "max": [365, 399, 431, 434, 458, 495, 532, 533, 599, 600], "avg": [365, 458, 599], "digraph_edge_betweenness_centr": 375, "pathlength": [375, 468], "version": [376, 384, 385, 469, 478, 479, 597, 598, 599], "33333333333333": [377, 471], "graph_1": [378, 408, 472, 504, 599], "graph_2": [378, 408, 472, 504, 599], "graph_product": [378, 408, 472, 504, 599], "in_degre": [382, 599], "out_degre": [382, 599], "put": [385, 413, 479, 598], "examine_edg": [385, 413, 479], "next_cost": [385, 413, 479], "edge_not_relax": [385, 413, 479], "higher": [385, 413, 417, 479, 488, 489, 564, 599], "edge_relax": [385, 413, 479, 599], "soon": [385, 413, 479, 599], "pathfind": [385, 413, 479], "get_path": [385, 413, 479], "rev_path": [385, 413, 479], "300": [388, 392, 393, 394, 411, 421, 426, 427, 428, 482, 485, 486, 487, 508, 569, 593], "digraph_floyd_warshall_numpi": [388, 482, 598, 599], "definit": [389, 423, 483], "On": [389, 423, 483, 599], "variant": [389, 423, 440, 451, 483, 598, 599], "136": [389, 423, 483, 599], "145": [389, 423, 483, 556, 599], "2008": [389, 423, 483, 599], "digraph_betweenness_centr": [389, 599], "edgecentralitymap": [389, 423, 483], "max_it": [390, 398, 424, 484, 493, 511, 528, 547], "100": [390, 424, 484, 511, 528, 547, 599], "tol": [390, 398, 407, 424, 484, 493, 503, 511, 528, 547, 555], "1e": [390, 398, 407, 424, 484, 493, 503, 511, 528, 547, 555], "06": [390, 398, 407, 424, 484, 493, 503, 528, 547, 555], "eigenvector": [390, 398, 424, 484, 493, 528, 599], "phillip": [390, 424, 484], "bonacich": [390, 424, 484], "famili": [390, 424, 484, 593], "measur": [390, 401, 424, 484, 497, 539, 556, 599, 600, 601], "american": [390, 424, 484], "92": [390, 424, 484], "1170": [390, 424, 484], "1182": [390, 424, 484], "1986": [390, 424, 484, 533], "1086": [390, 424, 453, 484], "228631": [390, 424, 484], "converg": [390, 398, 424, 484, 493, 511, 528, 547], "vector": [390, 398, 424, 484, 493, 511, 528, 547], "smaller": [390, 398, 424, 484, 493, 511, 512, 528, 547, 603], "toler": [390, 398, 424, 484, 493, 511, 528, 547], "multipli": [390, 398, 424, 484, 493, 511, 528, 547], "networkx": [390, 398, 418, 424, 484, 493, 528, 538, 547, 553, 565, 596, 599, 603], "encount": [391, 551, 559, 560, 573, 580, 585, 598, 599], "floyd": [392, 393, 394, 426, 427, 428, 485, 486, 487, 599], "dens": [392, 393, 394, 426, 427, 428, 485, 486, 487], "graph_floyd_warshall_numpi": [393, 394, 487, 599], "inf": [393, 394, 427, 428, 470, 486, 487, 599], "matric": [394, 428, 487, 598, 599], "reconstruct": [394, 428, 487], "among": [394, 428, 487, 533, 556, 595], "reconstruct_path": [394, 428, 487], "curr": [394, 428, 487], "node_match": [395, 396, 412, 490, 491, 509, 518, 524, 570, 599], "edge_match": [395, 396, 412, 490, 491, 509, 518, 524, 570, 599], "id_ord": [395, 396, 412, 490, 491, 509, 518, 519, 524, 570, 599], "call_limit": [395, 396, 412, 490, 491, 509, 518, 524, 570, 599], "compar": [395, 396, 490, 491, 518, 519, 524, 595, 599], "matcher": [395, 396, 490, 491, 518, 519, 524], "graph_a": [395, 396, 412, 490, 491, 509, 518, 519, 524, 570], "graph_b": [395, 396, 412, 490, 491, 509, 518, 519, 524, 570], "y": [395, 396, 399, 441, 452, 490, 491, 495, 518, 519, 524, 532, 599], "evalu": [395, 396, 399, 412, 490, 491, 495, 509, 518, 519, 524, 532, 570, 599], "vied": [395, 396, 490, 491], "vf2": [395, 396, 412, 490, 491, 509, 518, 519, 524, 570, 599], "paper": [395, 396, 412, 440, 451, 453, 470, 490, 491, 496, 505, 509, 518, 519, 524, 570, 599], "bound": [395, 396, 412, 418, 490, 491, 509, 518, 524, 565, 570, 599], "solut": [395, 396, 412, 488, 490, 491, 509, 518, 524, 533, 570, 599], "exce": [395, 396, 412, 431, 434, 447, 490, 491, 509, 518, 524, 570, 599], "ambigu": [396, 491, 524, 579], "term": [396, 491, 524], "fewer": [396, 491, 524], "edge_cost": [397, 492, 527], "kth": [397, 492, 527], "log": [397, 470, 492, 527, 599], "alpha": [398, 493, 528, 547, 593, 599], "beta": [398, 493, 512, 528], "1000": [398, 493], "katz": [398, 493, 528, 599], "leo": [398, 493, 528], "statu": [398, 493, 528, 601], "sociometr": [398, 493, 528], "psychometrika": [398, 493, 528], "18": [398, 493, 528, 596], "39": [398, 493, 528, 599], "43": [398, 493, 528], "1953": [398, 493, 528], "springer": [398, 493, 528, 556, 599], "pdf": [398, 470, 493, 496, 511, 528, 547, 592], "1007": [398, 493, 528, 556, 599], "bf02289026": [398, 493, 528], "attenu": [398, 493, 528], "neighbourhood": [398, 493, 528], "roughli": [399, 495, 532], "len": [399, 495, 532, 599, 601], "There": [399, 495, 532, 598, 599, 603], "tradeoff": [399, 495, 532], "relat": [400, 453, 599], "coarsest": [400, 599], "bisimul": [400, 599], "paig": [400, 599], "tarjan": [400, 599], "three": [400, 410, 507, 568, 599], "refin": [400, 599], "relationalcoarsestpartit": [400, 599], "strength": [401, 497, 539, 599], "rather": [401, 497, 539, 556, 599], "properli": [401, 497, 539, 597, 599], "invert": [401, 497, 539, 599], "stronger": [401, 497, 539, 599], "shorter": [401, 497, 539, 599, 601], "newman": [401, 497, 539, 599], "analyz": [401, 497, 539, 599, 601], "strong": [401, 497, 523, 539, 599], "vice": [401, 497, 539, 599], "versa": [401, 497, 539, 599], "model": [401, 420, 453, 497, 512, 539, 549, 567, 599, 601], "trust": [401, 497, 539, 599], "collabor": [401, 497, 539, 599], "json": [402, 429, 498, 541, 548, 599], "anyth": [402, 498, 541], "unweight": [403, 411, 499, 508, 542, 569, 599], "preset": [403, 488, 489, 499, 542, 599], "nodescountmap": [403, 542], "nlist": [405, 448, 488, 501, 552, 599, 603], "rotat": [405, 501, 552], "shell": [405, 501, 552], "angl": [405, 501, 552], "radian": [405, 501, 552], "resolut": [406, 502, 554], "35": [406, 502, 554], "equidist": [406, 502, 554], "spiral": [406, 502, 554], "compact": [406, 502, 554], "compress": [406, 502, 551, 554, 599], "plot": [406, 502, 554, 599], "po": [407, 448, 453, 488, 503, 512, 549, 555, 593, 598, 599, 603], "repulsive_expon": [407, 503, 555], "adaptive_cool": [407, 503, 555, 599], "num_it": [407, 503, 555], "fruchterman": [407, 503, 555, 599], "reingold": [407, 503, 555, 599], "forc": [407, 503, 555, 599], "simul": [407, 503, 555], "spring": [407, 503, 555, 593], "hold": [407, 503, 555], "repel": [407, 503, 555], "anti": [407, 503, 555], "graviti": [407, 503, 555], "equilibrium": [407, 503, 555], "coordin": [407, 441, 452, 503, 512, 555, 603], "sqrt": [407, 503, 555], "farther": [407, 503, 555], "apart": [407, 503, 555], "repuls": [407, 503, 555], "expon": [407, 503, 555], "cool": [407, 503, 555], "scheme": [407, 503, 555], "linear": [407, 438, 449, 494, 503, 530, 555, 599, 601], "threshold": [407, 503, 512, 549, 555], "Not": [407, 503, 555], "around": [407, 503, 555, 599], "tensor": [408, 504, 599], "fag": 409, "eq": 409, "triangl": [409, 506], "tripl": [409, 506], "count": [409, 599, 601], "cluster": 409, "fagiolo": 409, "physic": [409, 445], "review": [409, 445, 601], "76": 409, "026107": 409, "2007": 409, "merge_nod": [410, 507, 568, 599], "merge_edg": [410, 507, 568, 599], "phase": [410, 507, 568], "n_2": [410, 507, 568], "n_1": [410, 507, 568], "togeth": [410, 430, 507, 551, 568, 580, 581, 585], "ne": [411, 508, 569], "taken": [411, 508, 569, 599], "infin": [411, 508, 549, 569], "direccted_path_graph": 412, "stopiter": [412, 509, 570, 599], "purpos": [416, 596, 597], "weak": [416, 525], "direction": [416, 599, 601, 603], "num_nod": [417, 418, 432, 433, 435, 436, 442, 443, 444, 447, 455, 456, 457, 549, 564, 565, 599], "num_edg": [417, 564, 599], "g_": [417, 418, 564, 565, 599], "nm": [417, 564], "erd\u0151": [417, 418, 564, 565], "r\u00e9nyi": [417, 418, 564, 565], "reproduc": [417, 564, 595, 599], "binomi": [418, 431, 434, 565, 599], "p": [418, 419, 420, 512, 549, 565, 566, 567, 592, 593, 595, 599], "mention": [418, 565], "upper": [418, 565, 599], "fast_gnp_random_graph": [418, 565], "vladimir": [418, 565], "batagelj": [418, 565], "phy": [418, 565], "rev": [418, 565], "71": [418, 565], "036113": [418, 565], "2005": [418, 565], "random_graph": [418, 565, 599], "l49": [418, 565], "l120": [418, 565], "num_l_nod": [419, 566], "num_r_nod": [419, 566], "divid": [419, 566], "disjoint": [419, 529, 566, 599], "right": [419, 434, 438, 440, 441, 451, 512, 522, 566], "stochast": [420, 567, 599], "commun": [420, 567], "membership": [420, 567], "infer": [420, 512, 567], "start_nod": [422, 513], "frontier": [422, 599], "publish": [422, 513, 596, 597, 599], "2006": [422, 513], "cooper": [422, 513], "harvei": [422, 513], "kennedi": [422, 513], "hdl": [422, 513], "net": [422, 513], "1911": [422, 513], "96345": [422, 513], "nullgraph": [422, 513, 516, 523, 525], "invalidnod": [422, 513, 529, 540], "pars": [429, 548, 551, 599], "load": 429, "num_mesh_nod": [430, 454], "num_path_nod": [430, 454], "mesh_weight": [430, 454], "path_weight": [430, 454], "barbel": [430, 599], "mesh": [430, 442, 454, 455, 599], "won": [430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], "recurs": [431, 434, 445, 553, 599], "platform": [431, 434, 596, 599, 603], "64bit": [431, 434, 596, 597], "60": [431, 434, 599], "32bit": [431, 434, 596, 597], "29": [431, 434, 599], "overflowerror": [431, 434, 599], "extra": [431, 434, 438, 447, 449, 599], "greater": [431, 434, 438, 447, 449, 561], "neither": [432, 433, 435, 436, 438, 442, 443, 444, 449, 454, 455, 456, 457, 601], "propag": [434, 438, 441], "toward": [434, 438, 441, 444], "bottom": [434, 438, 441], "row": [438, 441, 449, 452], "col": [438, 441, 449, 452, 599], "grid": [438, 441, 449, 452, 599], "column": [438, 441, 452, 599], "wise": [438, 449], "trail": [438, 449, 601], "heavi": [439, 440, 450, 451, 599], "hex": [439, 450, 599], "fig": [439, 440, 450, 451, 592], "arxiv": [439, 440, 445, 450, 451, 505, 599], "ab": [439, 440, 445, 450, 451, 505, 599], "1907": [439, 440, 450, 451], "09528": [439, 440, 450, 451], "ascii": [439, 440, 450, 451], "diagram": [439, 440, 450, 451], "odd": [439, 440, 450, 451, 599], "graphviz_draw": [439, 440, 450, 451, 598, 599, 600, 601, 603], "1043x155": [439, 450], "squar": [440, 451, 599], "four": [440, 451, 595, 599], "frequenc": [440, 451], "467x539": [440, 451], "with_posit": [441, 452, 599], "hexagon": [441, 452, 599, 600], "lattic": [441, 452, 599, 600], "boundari": [441, 452, 598, 599], "emb": [441, 452], "plane": [441, 452, 522], "side": [441, 452], "inward": 444, "dorogovtsev": [445, 599], "goltsev": [445, 599], "mend": [445, 599], "pseudofract": 445, "65": 445, "066122": 445, "2002": 445, "cond": 445, "mat": 445, "0112143": 445, "branching_factor": 447, "ari": [447, 599], "cannot": [447, 533, 599], "petersen": [448, 599], "2n": 448, "3n": 448, "watkin": 448, "denot": [448, 601], "extern": [448, 598], "polygon": 448, "shift": 448, "shell_layout": [448, 488, 599, 603], "7": [448, 488, 489, 496, 596, 603], "m\u00f6biu": 448, "kantor": 448, "13": [448, 596], "14": [448, 596], "theorem": [448, 496, 599], "tait": 448, "combinatori": 448, "theori": [448, 603], "152": 448, "164": 448, "s0021": 448, "9800": 448, "69": 448, "80116": 448, "zachari": [453, 599], "karat": [453, 599], "club": [453, 599], "well": [453, 599], "78": 453, "relationship": [453, 601], "accord": [453, 547], "faction": 453, "circular_layout": [453, 599], "wayn": 453, "flow": [453, 601], "fission": 453, "anthropolog": 453, "research": 453, "33": [453, 599], "452": [453, 599], "473": 453, "jar": 453, "3629752": 453, "lollipop": [454, 599], "nor": 454, "graph_edge_betweenness_centr": 468, "noga": [470, 599], "alon": [470, 599], "lett": 470, "85": [470, 547], "2003": [470, 595, 599], "www": [470, 496, 511], "tau": 470, "ac": 470, "il": 470, "nogaa": 470, "lex2": 470, "graph_betweenness_centr": [483, 599], "strategi": [488, 489, 599], "aka": [488, 489], "slf": [488, 489], "dynam": [488, 489, 598, 599], "tie": [488, 489, 599], "uncolor": [488, 489, 599], "problem": [488, 556, 595], "preset_color_fn": [488, 489, 599], "manual": [488, 489, 597, 599], "generalized_petersen_graph": [488, 599, 603], "draw": [488, 592, 593, 599], "node_color": [488, 593, 599, 600], "greedili": [489, 599], "cycle_graph": [489, 496, 599, 601], "edge_color": [489, 496, 593, 599], "edge_ab": [494, 599], "edge_ac": [494, 599], "edge_bc": [494, 599], "edge_ad": [494, 599], "out_graph": [494, 599], "out_edge_map": [494, 599], "simple_path_pair": 495, "longest_path": [495, 599], "z": 495, "misra": [496, 599], "gri": [496, 599], "proof": [496, 599], "vize": [496, 599], "1992": [496, 599], "utexa": 496, "edu": [496, 511, 522, 547], "psp": 496, "numpathsmap": 499, "trial": 505, "modul": [505, 599], "approxim": [505, 556, 599], "token": [505, 599], "swap": [505, 599], "permut": [505, 599], "miltzow": [505, 599], "et": [505, 595, 599], "al": [505, 595, 599], "2016": [505, 599], "1602": [505, 599], "05150": [505, 599], "rearrang": 505, "nstart": [511, 547], "08": 511, "hub": [511, 599], "author": [511, 599], "kleinberg": 511, "authorit": 511, "hyperlink": 511, "46": 511, "cornel": 511, "kleinber": 511, "auth": 511, "hyperbol": [512, 599], "geometr": [512, 549, 599], "usual": 512, "exp": 512, "sigmoid": 512, "decreas": 512, "arccosh": 512, "x_0": 512, "x_j": 512, "dimens": [512, 549], "x_d": 512, "th": 512, "hyperboloid": 512, "x_1": 512, "sharp": 512, "nonneg": [512, 557], "probabilist": 512, "quadrat": [513, 599], "is_semi_connect": [516, 523, 525, 599], "alp\u00e1r": 518, "j\u00fcttner": 518, "p\u00e9ter": 518, "madarasi": 518, "longer": [521, 596, 599], "global": 521, "local": [521, 531, 597, 599], "planar": [522, 599], "iff": 522, "intersect": 522, "2009": [522, 595], "citeseerx": 522, "ist": 522, "psu": 522, "viewdoc": 522, "summari": 522, "217": 522, "9208": 522, "strongli": [523, 544, 558, 599], "scc": [523, 544, 558], "weakli": [525, 545, 594, 599], "first_lay": [529, 599], "index_output": [529, 599], "lexicograph": 530, "ti": 530, "affect": 530, "comparison": [530, 598, 599, 603], "max_cardin": 533, "verify_optimum": 533, "cardin": 533, "blossom": 533, "augment": 533, "primal": 533, "dual": [533, 599], "invent": 533, "jack": 533, "edmond": 533, "untest": 533, "optimum": 533, "mostli": [533, 599, 603], "zvi": 533, "galil": 533, "survei": 533, "metric": [534, 549, 556, 599], "closur": [534, 556, 599], "forest": [535, 536], "kruskal": [535, 536], "keep_attribut": [538, 599], "__networkx_node__": [538, 599], "wcc": [545, 594], "person": 547, "dangl": 547, "page": [547, 599], "brin": 547, "motwani": 547, "winograd": 547, "citat": 547, "rank": [547, 599], "bring": 547, "stanford": 547, "digit": 547, "technologi": 547, "1998": 547, "dbpub": 547, "8090": 547, "showdoc": 547, "fulltext": 547, "66": 547, "tri": [547, 599], "damp": 547, "uniform": 547, "distribut": [547, 597, 599], "irreduc": 547, "radiu": [549, 593, 599], "dim": 549, "unit": 549, "cube": [549, 599], "uniformli": 549, "euclidean": 549, "minkowski": 549, "meet": 549, "graphml": [551, 599], "comprehens": 551, "easi": [551, 579], "properti": [551, 598, 601], "flexibl": [551, 603], "mechan": 551, "graphdraw": 551, "mix": 551, "hyperedg": 551, "nest": 551, "port": 551, "domain": 551, "runtimeerror": [551, 599], "elementari": [553, 599], "johnson": [553, 595, 599], "1137": 553, "0204007": 553, "l98": 553, "l222": 553, "terminal_nod": 556, "steiner": [556, 599], "regard": 556, "termin": [556, 599], "due": [556, 597, 599], "kou": [556, 599], "markowski": [556, 599], "berman": [556, 599], "fast": [556, 599], "acta": 556, "informatica": 556, "141": 556, "1981": [556, 599], "articl": [556, 599], "bf00288961": [556, 599], "kurt": 556, "mehlhorn": 556, "0020": [556, 599], "0190": [556, 599], "88": [556, 599], "90066": [556, 599], "stoer": [557, 599], "wagner": [557, 599], "stoer_simple_1997": 557, "usiz": [557, 599], "mechthild": 557, "frank": [557, 599], "44": 557, "585": [557, 599], "591": 557, "1997": 557, "kosaraju": 558, "earliest": 559, "reduct": [561, 599], "prime": 561, "pyvalueerror": 561, "_t": [571, 578, 584], "action": [571, 578, 584, 599], "examin": [572, 574, 575, 581, 586, 587, 589, 599, 601], "cross": [576, 582, 597], "record": 579, "disregard": 579, "leaf": 581, "forward": 582, "upon": [586, 587, 599], "relax": 586, "emit": [586, 587, 599], "node_attr_fn": [592, 599, 600, 601, 603], "edge_attr_fn": [592, 601], "image_typ": 592, "pillow": [592, 599], "instruct": [592, 601], "disk": 592, "canon": 592, "cmap": [592, 593], "cmapx": 592, "cmapx_np": 592, "dia": 592, "gd": 592, "gd2": 592, "gif": 592, "hpgl": 592, "imap": 592, "imap_np": 592, "ismap": 592, "jpe": 592, "jpeg": 592, "jpg": 592, "mif": 592, "mp": 592, "pcl": 592, "pic": 592, "plain": 592, "ext": 592, "ps2": 592, "svg": 592, "svgz": 592, "vml": 592, "vmlz": 592, "vrml": 592, "vtx": 592, "wbmp": 592, "xdot": 592, "xlib": 592, "twopi": 592, "neato": [592, 600, 603], "circo": 592, "fdp": [592, 599], "sfdp": [592, 599], "yellow": [592, 599, 603], "blue": [592, 599, 603], "red": [592, 599], "directed_star_graph": [592, 599], "rgb": [592, 593, 599], "766x747": [592, 599], "arrow": [593, 599, 601, 603], "kwd": 593, "matplotlib": [593, 599, 600, 603], "mpl": [593, 599], "layout_funct": 593, "arrowhead": 593, "arrowstyl": 593, "arrowshead": 593, "arrow_s": [593, 598], "fancyarrowpatch": 593, "mutation_scal": 593, "info": 593, "node_list": [593, 598], "node_s": [593, 599], "vmin": [593, 599, 600], "vmax": [593, 599, 600], "scatter": 593, "1f78b4": [593, 599], "node_shap": 593, "shape": [593, 599, 600, 603], "pyplot": [593, 599, 600, 603], "marker": 593, "h": [593, 601], "transpar": 593, "colormap": [593, 600], "intens": 593, "linewidth": 593, "symbol": 593, "border": 593, "edge_cmap": 593, "edge_vmin": 593, "edge_vmax": 593, "word": 593, "solid": 593, "dash": 593, "linestyl": 593, "Or": [593, 599, 603], "font_siz": 593, "fontsiz": 593, "font_color": 593, "font": 593, "ie": 593, "font_weight": 593, "font_famili": 593, "san": 593, "serif": 593, "legend": 593, "connectionstyl": [593, 599], "curv": 593, "arc": [593, 601, 603], "rad": 593, "arc3": 593, "backend": [593, 598], "jupyt": 593, "plt": [593, 599, 600, 603], "competit": 595, "against": [595, 599], "popular": 595, "igraph": 595, "networkit": 595, "task": 595, "machin": 595, "intel": 595, "i9": 595, "9900k": 595, "60ghz": 595, "eight": 595, "16": [595, 596], "32gb": 595, "ram": 595, "usa": 595, "9th": 595, "dimac": 595, "challeng": 595, "dataset": 595, "demetrescu": 595, "datta": 595, "third": 595, "citi": 595, "rome": 595, "lastli": 595, "fourth": 595, "answer": 595, "arg": 595, "databas": 595, "de": 595, "santo": 595, "goldberg": 595, "ninth": 595, "foggia": 595, "sanson": 595, "vento": 595, "recognit": 595, "1067": 595, "1079": 595, "studi": 596, "variou": [596, 598, 599], "licens": 596, "apach": 596, "host": 596, "inher": 596, "safeti": [596, 597], "significantli": [596, 599], "oppos": [596, 599], "pre": [596, 597, 599], "binari": [596, 599, 603], "linux": [596, 597, 599], "x86": 596, "x86_64": [596, 597, 599], "aarch64": [596, 597, 599], "s390x": [596, 597, 599], "ppc64le": [596, 597, 599], "maco": [596, 597, 599], "arm64": [596, 597, 599], "window": [596, 597], "wish": 596, "expos": [596, 598, 599], "renam": [596, 599], "legaci": [596, 599], "now": [596, 599, 600, 601, 603], "usag": [596, 603], "came": 596, "tutori": [596, 600, 601], "guid": [596, 598, 603], "introduct": [596, 597, 599, 602], "contribut": [596, 599], "gap": [596, 599], "benchmark": 596, "pypi": [597, 599], "i686": 597, "64": [597, 599], "rustup": 597, "simpler": 597, "reli": [597, 599, 603], "prebuilt": 597, "pep": [597, 599], "517": [597, 599], "setuptool": 597, "again": [597, 599, 603], "strive": 597, "broken": 597, "level": [597, 598], "architectur": 597, "manylinux": 597, "2014": 597, "pp64le": 597, "musl": [597, 599], "newer": [597, 599], "ci": [597, 599], "upstream": [597, 599], "correctli": [597, 599], "best": [597, 601], "introductori": 598, "impli": [598, 601], "inspir": 598, "util": 598, "offer": 598, "decis": 598, "aspect": 598, "nx": [598, 599], "multidigraph": 598, "my_node_a": 598, "my_node_b": 598, "constraint": [598, 599, 603], "That": [598, 599], "migrat": 598, "similarli": [598, 603], "dist_matrix": 598, "extend_from": 598, "concis": 598, "graph_": 598, "digraph_": 598, "pretti": 598, "referenc": 598, "concept": [598, 599, 601], "dedic": [598, 603], "fridai": [598, 599, 603], "mondai": [598, 599, 603], "But": [598, 599, 601], "analog": [598, 599], "5pm": 598, "2pm": 598, "room": 598, "714": 598, "accessor": 598, "dtype": [598, 599], "astyp": 598, "to_numpy_matrix": 598, "to_numpy_arrai": 598, "to_numpy_recarrai": 598, "to_scipy_sparse_matrix": 598, "to_pandas_adjac": 598, "scipi": 598, "csr": 598, "spars": [598, 599], "per": [598, 599], "digraph_adjacency_matrix": [598, 599], "graph_adjacency_matrix": [598, 599], "networkx_draw": 598, "pygraphviz": 598, "varieti": 598, "strictli": [598, 599, 601], "retwork": [598, 599], "draw_networkx": 598, "fork": 598, "nodelist": 598, "arrows": 598, "mpl_drawer": [598, 599], "draw_networkx_edge_label": 598, "networkx_convert": [598, 599], "respons": 598, "accordingli": 598, "unwant": 598, "convert_rustworkx_to_networkx": 598, "isinst": 598, "matur": 598, "wide": [598, 603], "younger": 598, "enhanc": [598, 599], "request": [598, 599], "issu": [598, 599], "priorit": 598, "in_edge_indic": 599, "out_edge_indic": 599, "local_compl": 599, "1910": 599, "03969": 599, "complement_graph": 599, "pendant": 599, "70": 599, "79": 599, "panic": 599, "ancenstor": 599, "1381": 599, "1386": 599, "highlight": 599, "pyright": 599, "abi": 599, "onward": 599, "thank": 599, "contributor": 599, "johnson_simple_cycl": 599, "trait": 599, "edgefind": 599, "edgeindex": 599, "edgeremov": 599, "centrality_scor": 599, "650": 599, "2f": [599, 600], "special": 599, "mirror": 599, "560": 599, "snippet": 599, "previous": 599, "post": 599, "pone": 599, "563": 599, "1345": 599, "karate_club_graph": 599, "commonli": 599, "neighbors_undirect": 599, "obtain": 599, "irrespect": 599, "abil": 599, "gzip": 599, "read_graphml": 599, "graphmlz": 599, "gz": 599, "recognis": 599, "decompress": 599, "life": 599, "shuffl": 599, "restor": 599, "find_node_by_weight": 599, "1243": 599, "1340": 599, "node_link_json": 599, "typo": 599, "spell": 599, "checker": 599, "invoc": 599, "lint": 599, "session": 599, "discover": 599, "1352": 599, "1242": 599, "bugfix": 599, "inadvert": 599, "to_dot": 599, "incorrectli": 599, "escap": 599, "quot": 599, "color_nod": [599, 600], "_node": 599, "422952": 599, "directed_hexagonal_lattice_graph": 599, "irregular": 599, "expans": 599, "expand": 599, "offici": 599, "importantli": 599, "promot": 599, "tier": 599, "has_nod": 599, "dag_algo": 599, "from_node_link_json_fil": 599, "parse_node_link_json": 599, "polynomi": 599, "brute": 599, "magnitud": 599, "address": 599, "experiment": 599, "christian": 599, "komusiewicz": 599, "sommer": 599, "gain": 599, "discuss": [599, 603], "lemma": 599, "thu": 599, "intermedi": 599, "speedup": 599, "40": 599, "nameabl": 599, "dorogovtsev_goltsev_mendes_graph": 599, "stablegraph": 599, "graphmap": 599, "contractnod": 599, "graph_ext": 599, "contract_nod": [599, 601], "hasparalleledgesdirect": 599, "hasparalleledgesundirect": 599, "has_parallel_edg": 599, "noderemov": 599, "matrixgraph": 599, "hyperbolic_random_graph": 599, "sampl": 599, "math": 599, "sinh": 599, "14159": 599, "55": 599, "particularli": 599, "semi": 599, "indexpartitionblock": 599, "hexagonal_lattice_graph_weight": 599, "remove_node_retain_edg": 599, "suppli": 599, "greedy_node_color_with_coloring_strategi": 599, "greedy_edge_color_with_coloring_strategi": 599, "preset_color": 599, "directed_sbm_random_graph": 599, "undirected_sbm_random_graph": 599, "sbm_random_graph": 599, "wheel": 599, "storag": 599, "onlin": 599, "meaningless": 599, "sizeabl": 599, "condition": 599, "temporari": 599, "find_cycl": 599, "bondari": 599, "didn": [599, 601], "smartli": 599, "scenario": 599, "nlabel": 599, "tooltip": 599, "ntooltip": 599, "107x202": 599, "750": 599, "draw_edg": 599, "offset": 599, "draw_edge_label": 599, "align": 599, "774": 599, "panicexcept": 599, "1117": 599, "1130": 599, "long": [599, 603], "1140": 599, "blog": 599, "changelog": 599, "2024": 599, "m1": 599, "switch": 599, "tox": 599, "downgrad": 599, "directed_barabasi_albert_graph": 599, "barabasi_albert_graph": 599, "starting_graph": 599, "graph_all_shortest_path": 599, "shortest_path": 599, "heavy_square_graph": 599, "bridges_set": 599, "clear_edg": 599, "edge_indices_from_endpoint": 599, "filter_nod": 599, "abstract": 599, "filter_edg": 599, "substitute_node_with_subgraph": [599, 601], "sub_graph": 599, "___": 599, "stratifi": 599, "graphnotbipartit": 599, "directed_random_bipartite_graph": 599, "undirected_random_bipartite_graph": 599, "bipartite_layout": 599, "66666667": 599, "entir": 599, "invalidmap": 599, "graph_token_swapp": 599, "feasibl": 599, "path_exist": 599, "greedy_node_color_with_preset_color": 599, "greedy_node_color": 599, "tr": 599, "ref": 599, "wikipedia": 599, "wiki": 599, "msrv": 599, "56": 599, "adopt": [599, 603], "difficult": 599, "catch": 599, "unhandl": 599, "token_swapp": 599, "vec": 599, "nodeindex": 599, "mapnotposs": 599, "ungraph": 599, "from_edg": 599, "hashmap": 599, "err": 599, "panick": 599, "pllatform": 599, "infrastructur": 599, "hopefulli": 599, "shouldn": 599, "likelihood": 599, "precompil": [599, 603], "polici": 599, "74": 599, "deprecationwarn": 599, "graph_all_simple_path": 599, "digraph_all_simple_path": 599, "955": 599, "gnp_random_graph": 599, "pin": 599, "seri": [599, 601], "unreleas": 599, "prevent": [599, 603], "manag": 599, "older": 599, "incompat": 599, "forcibli": 599, "alongsid": 599, "make_symmetr": 599, "83x443": 599, "5x5": 599, "grid_graph": 599, "btw": [599, 600], "hub_scor": 599, "binomial_tree_graph": 599, "31": 599, "28": 599, "path_set": 599, "longest_simple_path_multiple_target": 599, "hashset": 599, "pagerank_scor": 599, "gnm_random_graph": 599, "random_geometric_graph": 599, "bread": 599, "colorbar": [599, 600], "rcparam": [599, 600], "figsiz": [599, 600], "gca": [599, 600], "sm": [599, 600], "cm": [599, 600], "scalarmapp": [599, 600], "norm": [599, 600], "titl": [599, 600], "1500x1000": [599, 600], "empty_graph": 599, "directed_empty_graph": 599, "directed_complete_graph": 599, "mesh_graph": [599, 603], "directed_mesh_graph": 599, "gnp_directed_random_graph": 599, "gnp_undirected_random_graph": 599, "situat": 599, "48": 599, "facilit": 599, "deepcopi": 599, "836": 599, "flatten": 599, "744": 599, "node_remov": 599, "reflect": 599, "certain": 599, "696": 599, "formerli": 599, "notif": 599, "manylinux2014": 599, "parser": 599, "cut_val": 599, "orang": 599, "graph_tensor_product": 599, "digraph_tensor_product": 599, "all_simple_paths_multiple_target": 599, "algo": 599, "dictmap": 599, "preserve_attribut": 599, "k_5": 599, "bfs_undirect": 599, "xml": [599, 603], "manylinux2010": 599, "glibc": 599, "sdist": 599, "41": 599, "rustc": 599, "bfsssuccessor": 599, "slice": 599, "__getitem__": 599, "did": 599, "590": 599, "amd": 599, "digraph_cartesian_product": 599, "graph_cartesian_product": 599, "throughout": 599, "eventu": 599, "account": 599, "barbell_graph": 599, "graph_bfs_search": 599, "digraph_bfs_search": 599, "remain": [599, 603], "comp": 599, "150": 599, "color_edg": 599, "edges_in_chain": 599, "idx": 599, "adj_matrix": 599, "1j": 599, "2j": 599, "5j": 599, "multi": 599, "guard": 599, "abc": 599, "graph_dfs_search": 599, "digraph_dfs_search": 599, "graph_dijkstra_search": 599, "digraph_dijkstra_search": 599, "dijkstratreeedgesrecord": 599, "incident_edg": [599, 603], "incident_edge_index_map": 599, "achiev": 599, "full_rary_tre": 599, "lollipop_graph": [599, 603], "freed": 599, "workspac": 599, "downstream": 599, "stabil": 599, "necessarili": 599, "turquois": 599, "fuchsia": 599, "rx_graph": 599, "arguabl": 599, "desir": 599, "undirected_gnm_random_graph": 599, "42": [599, 603], "d_mat": 599, "avg_shortest_path": 599, "directed_binomial_tree_graph": 599, "overflow": 599, "exceed": 599, "457": 599, "increment": 599, "515": 599, "oversight": 599, "525": 599, "heavy_hex_graph": [599, 603], "directed_heavy_hex_graph": 599, "directed_heavy_square_graph": 599, "pyo3_runtim": 599, "graph_union": 599, "digraph_union": 599, "unifi": 599, "a_0": 599, "a_1": 599, "b_0": 599, "b_1": 599, "432": 599, "429": 599, "hash": 599, "367": 599, "slew": 599, "1080": 599, "0022250x": 599, "9990249": 599, "secondli": 599, "edge_subgraph": 599, "ap": 599, "prx": 599, "1103": 599, "physrevx": 599, "011022": 599, "read_edge_list": [599, 603], "first_edg": 599, "second_edg": 599, "original_graph": 599, "_sourc": 599, "_target": 599, "_weight": 599, "17": 599, "21": 599, "22": 599, "23": 599, "26": 599, "27": 599, "to_direct": 599, "rework": 599, "graph_floyd_warshal": 599, "digraph_floyd_warshal": 599, "control": 599, "undirected_graph": 599, "digraph_num_shortest_paths_unweight": 599, "graph_num_shortest_paths_unweight": 599, "directed_grid_graph": 599, "path_length": 599, "lambda_": 599, "fashion": 599, "explicit": 599, "408": 599, "digraph_dijkstra_shortest_path": 599, "graph_dijkstra_shortest_path": 599, "digraph_all_pairs_dijkstra_shortest_path": 599, "graph_all_pairs_dijkstra_shortest_path": 599, "387": 599, "consecut": 599, "373": 599, "347": 599, "plethora": 599, "drawer": 599, "spring_layout": [599, 603], "preclud": 599, "95": 599, "random_layout": 599, "graph_random_layout": 599, "diraph_random_layout": 599, "circl": [599, 600, 603], "fixeds": 599, "500x527": 599, "immut": 599, "coeffici": 599, "inplac": 599, "digraph_all_pairs_dijkstra_path_length": 599, "graph_all_pairs_dijkstra_path_length": 599, "edge_index_map": [599, 603], "source_node_index": 599, "target_node_index": 599, "mst": 599, "tweak": 599, "00ffff": 599, "directed_cycle_graph": [599, 601], "spiral_layout": 599, "795x1031": 599, "317x316": 599, "write_edge_list": 599, "digraph_k_shortest_path_length": 599, "graph_k_shortest_path_length": 599, "digraph_dijkstra_shortest_path_length": 599, "graph_dijkstra_shortest_path_length": 599, "dispatch": 599, "mistakenli": 599, "appl": 599, "arm": 599, "outward": 599, "371x155": 599, "is_maxmimal_match": 599, "disallow": 599, "145x291": 599, "143x291": 599, "queri": 599, "__str__": [599, 603], "human": 599, "readabl": [599, 603], "__hash__": 599, "unhash": 599, "update_edg": [599, 603], "garbag": 599, "collector": 599, "know": 599, "integr": [599, 603], "250": 599, "pickl": 599, "multiprocess": 599, "lookup": 599, "graph_astar_shortest_path": 599, "digraph_astar_shortest_path": 599, "digraph_dfs_edg": 599, "graph_dfs_edg": 599, "lock": 599, "meant": 599, "focu": 599, "is_symmetr": 599, "directed_gnm_random_graph": 599, "remove_edges_from": [599, 603], "removed_edges_from": 599, "graph_distance_matrix": 599, "digraph_distance_matrix": 599, "insert_node_on_in_edg": 599, "insert_node_on_out_edg": 599, "insert_node_on_in_edges_multipl": 599, "insert_node_on_out_edges_multipl": 599, "contigu": [599, 600, 603], "fortran": 599, "easier": 599, "defer": 599, "convers": 599, "bottleneck": 599, "especi": [599, 603], "across": 599, "172": 599, "eas": 599, "graphivz": 599, "compos": 599, "warshal": 599, "segfault": 599, "backtrac": 599, "problemat": 599, "find_adjacent_node_by_edg": 599, "remove_nodes_from": [599, 603], "No": 599, "export": 599, "pprint": 600, "007277212457600987": 600, "02047046385621779": 600, "07491079688119466": 600, "04242324126690451": 600, "09205321351482312": 600, "magma": 600, "to_hex": 600, "keep_alpha": 600, "1076x910": 600, "explor": 601, "primer": 601, "broader": 601, "simultan": 601, "walk": 601, "imposs": 601, "dependency_dag": 601, "job_a": 601, "job_b": 601, "job_c": 601, "job_d": 601, "job_": 601, "job_f": 601, "330x347": 601, "topo_sort": 601, "job_index": 601, "sdk": 601, "quantum": 601, "acceler": 601, "routin": 601, "coher": 601, "gate": 601, "reset": 601, "graphic": 601, "q_0": 601, "q_1": 601, "mea": 601, "beyond": 601, "fact": 601, "qubit": 601, "c_0": 601, "c_1": 601, "in_nod": 601, "out_nod": 601, "h_gate": 601, "cx": 601, "cx_gate": 601, "meas_q0": 601, "meas_q1": 601, "q0": 601, "q1": 601, "401x523": 601, "transform": 601, "hardwar": 601, "translat": 601, "devic": 601, "qpu": 601, "translation_matrix": 601, "rz": 601, "pi": 601, "sx": 601, "hardware_instruct": 601, "subcircuit": 601, "gate_index": 601, "edge_v": 601, "equivalent_subcircuit": 601, "map_fn": 601, "401x755": 601, "bit_nod": 601, "unitari": 601, "simplif": 601, "newest": 601, "nod": 601, "_node_id": 601, "wouldn": 601, "serv": 603, "past": 603, "shorten": 603, "convent": 603, "compris": 603, "green": 603, "first_index_data": 603, "first_index_edgepoint": 603, "helper": 603, "remove_edg": 603, "remove_edge_from_index": 603, "absent": 603, "last_index": 603, "simplic": 603, "graphnod": 603, "graphedg": 603, "edgenod": 603, "popul": 603, "notion": 603, "show": 603, "lolipop_graph": 603, "combined_graph": 603, "new_nod": 603, "spam": 603, "375": 603, "subax1": 603, "subplot": 603, "121": 603, "subax2": 603, "122": 603, "attr_dict": 603, "fill_color": 603, "syndrom": 603, "fontcolor": 603, "2132x2297": 603, "decid": 603, "few": 603, "consider": 603, "choic": 603}, "objects": {"rustworkx": [[26, 0, 1, "", "AllPairsPathLengthMapping"], [30, 0, 1, "", "AllPairsPathMapping"], [34, 0, 1, "", "BFSPredecessors"], [35, 0, 1, "", "BFSSuccessors"], [36, 0, 1, "", "BiconnectedComponents"], [40, 0, 1, "", "CentralityMapping"], [44, 0, 1, "", "Chains"], [45, 0, 1, "", "ColoringStrategy"], [46, 3, 1, "", "DAGHasCycle"], [47, 3, 1, "", "DAGWouldCycle"], [48, 0, 1, "", "EdgeCentralityMapping"], [52, 0, 1, "", "EdgeIndexMap"], [56, 0, 1, "", "EdgeIndices"], [57, 0, 1, "", "EdgeList"], [58, 3, 1, "", "GraphNotBipartite"], [59, 0, 1, "", "IndexPartitionBlock"], [60, 3, 1, "", "InvalidMapping"], [61, 3, 1, "", "InvalidNode"], [62, 3, 1, "", "JSONSerializationError"], [63, 3, 1, "", "NegativeCycle"], [64, 3, 1, "", "NoEdgeBetweenNodes"], [65, 3, 1, "", "NoPathFound"], [66, 3, 1, "", "NoSuitableNeighbors"], [67, 0, 1, "", "NodeIndices"], [68, 0, 1, "", "NodeMap"], [72, 3, 1, "", "NullGraph"], [73, 0, 1, "", "PathLengthMapping"], [77, 0, 1, "", "PathMapping"], [81, 0, 1, "", "Pos2DMapping"], [85, 0, 1, "", "ProductNodeMap"], [89, 0, 1, "", "PyDAG"], [174, 0, 1, "", "PyDiGraph"], [259, 0, 1, "", "PyGraph"], [319, 0, 1, "", "RelationalCoarsestPartition"], [320, 0, 1, "", "TopologicalSorter"], [324, 0, 1, "", "WeightedEdgeList"], [325, 4, 1, "", "adjacency_matrix"], [326, 4, 1, "", "all_pairs_all_simple_paths"], [327, 4, 1, "", "all_pairs_bellman_ford_path_lengths"], [328, 4, 1, "", "all_pairs_bellman_ford_shortest_paths"], [329, 4, 1, "", "all_pairs_dijkstra_path_lengths"], [330, 4, 1, "", "all_pairs_dijkstra_shortest_paths"], [331, 4, 1, "", "all_shortest_paths"], [332, 4, 1, "", "all_simple_paths"], [333, 4, 1, "", "ancestors"], [334, 4, 1, "", "articulation_points"], [335, 4, 1, "", "astar_shortest_path"], [336, 4, 1, "", "barabasi_albert_graph"], [337, 4, 1, "", "bellman_ford_shortest_path_lengths"], [338, 4, 1, "", "bellman_ford_shortest_paths"], [339, 4, 1, "", "betweenness_centrality"], [340, 4, 1, "", "bfs_predecessors"], [341, 4, 1, "", "bfs_search"], [342, 4, 1, "", "bfs_successors"], [343, 4, 1, "", "biconnected_components"], [344, 4, 1, "", "bipartite_layout"], [345, 4, 1, "", "bridges"], [346, 4, 1, "", "cartesian_product"], [347, 4, 1, "", "chain_decomposition"], [348, 4, 1, "", "circular_layout"], [349, 4, 1, "", "closeness_centrality"], [350, 4, 1, "", "collect_bicolor_runs"], [351, 4, 1, "", "collect_runs"], [352, 4, 1, "", "complement"], [353, 4, 1, "", "connected_components"], [354, 4, 1, "", "connected_subgraphs"], [355, 4, 1, "", "core_number"], [356, 4, 1, "", "cycle_basis"], [357, 4, 1, "", "dag_longest_path"], [358, 4, 1, "", "dag_longest_path_length"], [359, 4, 1, "", "dag_weighted_longest_path"], [360, 4, 1, "", "dag_weighted_longest_path_length"], [361, 4, 1, "", "degree_centrality"], [362, 4, 1, "", "descendants"], [363, 4, 1, "", "dfs_edges"], [364, 4, 1, "", "dfs_search"], [365, 4, 1, "", "digraph_adjacency_matrix"], [366, 4, 1, "", "digraph_all_pairs_all_simple_paths"], [367, 4, 1, "", "digraph_all_pairs_bellman_ford_path_lengths"], [368, 4, 1, "", "digraph_all_pairs_bellman_ford_shortest_paths"], [369, 4, 1, "", "digraph_all_pairs_dijkstra_path_lengths"], [370, 4, 1, "", "digraph_all_pairs_dijkstra_shortest_paths"], [371, 4, 1, "", "digraph_all_shortest_paths"], [372, 4, 1, "", "digraph_all_simple_paths"], [373, 4, 1, "", "digraph_astar_shortest_path"], [374, 4, 1, "", "digraph_bellman_ford_shortest_path_lengths"], [375, 4, 1, "", "digraph_betweenness_centrality"], [376, 4, 1, "", "digraph_bfs_search"], [377, 4, 1, "", "digraph_bipartite_layout"], [378, 4, 1, "", "digraph_cartesian_product"], [379, 4, 1, "", "digraph_circular_layout"], [380, 4, 1, "", "digraph_closeness_centrality"], [381, 4, 1, "", "digraph_complement"], [382, 4, 1, "", "digraph_core_number"], [383, 4, 1, "", "digraph_dfs_edges"], [384, 4, 1, "", "digraph_dfs_search"], [385, 4, 1, "", "digraph_dijkstra_search"], [386, 4, 1, "", "digraph_dijkstra_shortest_path_lengths"], [387, 4, 1, "", "digraph_dijkstra_shortest_paths"], [388, 4, 1, "", "digraph_distance_matrix"], [389, 4, 1, "", "digraph_edge_betweenness_centrality"], [390, 4, 1, "", "digraph_eigenvector_centrality"], [391, 4, 1, "", "digraph_find_cycle"], [392, 4, 1, "", "digraph_floyd_warshall"], [393, 4, 1, "", "digraph_floyd_warshall_numpy"], [394, 4, 1, "", "digraph_floyd_warshall_successor_and_distance"], [395, 4, 1, "", "digraph_is_isomorphic"], [396, 4, 1, "", "digraph_is_subgraph_isomorphic"], [397, 4, 1, "", "digraph_k_shortest_path_lengths"], [398, 4, 1, "", "digraph_katz_centrality"], [399, 4, 1, "", "digraph_longest_simple_path"], [400, 4, 1, "", "digraph_maximum_bisimulation"], [401, 4, 1, "", "digraph_newman_weighted_closeness_centrality"], [402, 4, 1, "", "digraph_node_link_json"], [403, 4, 1, "", "digraph_num_shortest_paths_unweighted"], [404, 4, 1, "", "digraph_random_layout"], [405, 4, 1, "", "digraph_shell_layout"], [406, 4, 1, "", "digraph_spiral_layout"], [407, 4, 1, "", "digraph_spring_layout"], [408, 4, 1, "", "digraph_tensor_product"], [409, 4, 1, "", "digraph_transitivity"], [410, 4, 1, "", "digraph_union"], [411, 4, 1, "", "digraph_unweighted_average_shortest_path_length"], [412, 4, 1, "", "digraph_vf2_mapping"], [413, 4, 1, "", "dijkstra_search"], [414, 4, 1, "", "dijkstra_shortest_path_lengths"], [415, 4, 1, "", "dijkstra_shortest_paths"], [416, 4, 1, "", "directed_barabasi_albert_graph"], [417, 4, 1, "", "directed_gnm_random_graph"], [418, 4, 1, "", "directed_gnp_random_graph"], [419, 4, 1, "", "directed_random_bipartite_graph"], [420, 4, 1, "", "directed_sbm_random_graph"], [421, 4, 1, "", "distance_matrix"], [422, 4, 1, "", "dominance_frontiers"], [423, 4, 1, "", "edge_betweenness_centrality"], [424, 4, 1, "", "eigenvector_centrality"], [425, 4, 1, "", "find_negative_cycle"], [426, 4, 1, "", "floyd_warshall"], [427, 4, 1, "", "floyd_warshall_numpy"], [428, 4, 1, "", "floyd_warshall_successor_and_distance"], [429, 4, 1, "", "from_node_link_json_file"], [458, 4, 1, "", "graph_adjacency_matrix"], [459, 4, 1, "", "graph_all_pairs_all_simple_paths"], [460, 4, 1, "", "graph_all_pairs_bellman_ford_path_lengths"], [461, 4, 1, "", "graph_all_pairs_bellman_ford_shortest_paths"], [462, 4, 1, "", "graph_all_pairs_dijkstra_path_lengths"], [463, 4, 1, "", "graph_all_pairs_dijkstra_shortest_paths"], [464, 4, 1, "", "graph_all_shortest_paths"], [465, 4, 1, "", "graph_all_simple_paths"], [466, 4, 1, "", "graph_astar_shortest_path"], [467, 4, 1, "", "graph_bellman_ford_shortest_path_lengths"], [468, 4, 1, "", "graph_betweenness_centrality"], [469, 4, 1, "", "graph_bfs_search"], [470, 4, 1, "", "graph_bipartite_edge_color"], [471, 4, 1, "", "graph_bipartite_layout"], [472, 4, 1, "", "graph_cartesian_product"], [473, 4, 1, "", "graph_circular_layout"], [474, 4, 1, "", "graph_closeness_centrality"], [475, 4, 1, "", "graph_complement"], [476, 4, 1, "", "graph_core_number"], [477, 4, 1, "", "graph_dfs_edges"], [478, 4, 1, "", "graph_dfs_search"], [479, 4, 1, "", "graph_dijkstra_search"], [480, 4, 1, "", "graph_dijkstra_shortest_path_lengths"], [481, 4, 1, "", "graph_dijkstra_shortest_paths"], [482, 4, 1, "", "graph_distance_matrix"], [483, 4, 1, "", "graph_edge_betweenness_centrality"], [484, 4, 1, "", "graph_eigenvector_centrality"], [485, 4, 1, "", "graph_floyd_warshall"], [486, 4, 1, "", "graph_floyd_warshall_numpy"], [487, 4, 1, "", "graph_floyd_warshall_successor_and_distance"], [488, 4, 1, "", "graph_greedy_color"], [489, 4, 1, "", "graph_greedy_edge_color"], [490, 4, 1, "", "graph_is_isomorphic"], [491, 4, 1, "", "graph_is_subgraph_isomorphic"], [492, 4, 1, "", "graph_k_shortest_path_lengths"], [493, 4, 1, "", "graph_katz_centrality"], [494, 4, 1, "", "graph_line_graph"], [495, 4, 1, "", "graph_longest_simple_path"], [496, 4, 1, "", "graph_misra_gries_edge_color"], [497, 4, 1, "", "graph_newman_weighted_closeness_centrality"], [498, 4, 1, "", "graph_node_link_json"], [499, 4, 1, "", "graph_num_shortest_paths_unweighted"], [500, 4, 1, "", "graph_random_layout"], [501, 4, 1, "", "graph_shell_layout"], [502, 4, 1, "", "graph_spiral_layout"], [503, 4, 1, "", "graph_spring_layout"], [504, 4, 1, "", "graph_tensor_product"], [505, 4, 1, "", "graph_token_swapper"], [506, 4, 1, "", "graph_transitivity"], [507, 4, 1, "", "graph_union"], [508, 4, 1, "", "graph_unweighted_average_shortest_path_length"], [509, 4, 1, "", "graph_vf2_mapping"], [510, 4, 1, "", "has_path"], [511, 4, 1, "", "hits"], [512, 4, 1, "", "hyperbolic_random_graph"], [513, 4, 1, "", "immediate_dominators"], [514, 4, 1, "", "in_degree_centrality"], [515, 4, 1, "", "is_bipartite"], [516, 4, 1, "", "is_connected"], [517, 4, 1, "", "is_directed_acyclic_graph"], [518, 4, 1, "", "is_isomorphic"], [519, 4, 1, "", "is_isomorphic_node_match"], [520, 4, 1, "", "is_matching"], [521, 4, 1, "", "is_maximal_matching"], [522, 4, 1, "", "is_planar"], [523, 4, 1, "", "is_strongly_connected"], [524, 4, 1, "", "is_subgraph_isomorphic"], [525, 4, 1, "", "is_weakly_connected"], [526, 4, 1, "", "isolates"], [527, 4, 1, "", "k_shortest_path_lengths"], [528, 4, 1, "", "katz_centrality"], [529, 4, 1, "", "layers"], [530, 4, 1, "", "lexicographical_topological_sort"], [531, 4, 1, "", "local_complement"], [532, 4, 1, "", "longest_simple_path"], [533, 4, 1, "", "max_weight_matching"], [534, 4, 1, "", "metric_closure"], [535, 4, 1, "", "minimum_spanning_edges"], [536, 4, 1, "", "minimum_spanning_tree"], [537, 4, 1, "", "negative_edge_cycle"], [538, 4, 1, "", "networkx_converter"], [539, 4, 1, "", "newman_weighted_closeness_centrality"], [540, 4, 1, "", "node_connected_component"], [541, 4, 1, "", "node_link_json"], [542, 4, 1, "", "num_shortest_paths_unweighted"], [543, 4, 1, "", "number_connected_components"], [544, 4, 1, "", "number_strongly_connected_components"], [545, 4, 1, "", "number_weakly_connected_components"], [546, 4, 1, "", "out_degree_centrality"], [547, 4, 1, "", "pagerank"], [548, 4, 1, "", "parse_node_link_json"], [549, 4, 1, "", "random_geometric_graph"], [550, 4, 1, "", "random_layout"], [551, 4, 1, "", "read_graphml"], [552, 4, 1, "", "shell_layout"], [553, 4, 1, "", "simple_cycles"], [554, 4, 1, "", "spiral_layout"], [555, 4, 1, "", "spring_layout"], [556, 4, 1, "", "steiner_tree"], [557, 4, 1, "", "stoer_wagner_min_cut"], [558, 4, 1, "", "strongly_connected_components"], [559, 4, 1, "", "topological_generations"], [560, 4, 1, "", "topological_sort"], [561, 4, 1, "", "transitive_reduction"], [562, 4, 1, "", "transitivity"], [563, 4, 1, "", "two_color"], [564, 4, 1, "", "undirected_gnm_random_graph"], [565, 4, 1, "", "undirected_gnp_random_graph"], [566, 4, 1, "", "undirected_random_bipartite_graph"], [567, 4, 1, "", "undirected_sbm_random_graph"], [568, 4, 1, "", "union"], [569, 4, 1, "", "unweighted_average_shortest_path_length"], [570, 4, 1, "", "vf2_mapping"], [594, 4, 1, "", "weakly_connected_components"]], "rustworkx.AllPairsPathLengthMapping": [[27, 1, 1, "", "items"], [28, 1, 1, "", "keys"], [29, 1, 1, "", "values"]], "rustworkx.AllPairsPathMapping": [[31, 1, 1, "", "items"], [32, 1, 1, "", "keys"], [33, 1, 1, "", "values"]], "rustworkx.BiconnectedComponents": [[37, 1, 1, "", "items"], [38, 1, 1, "", "keys"], [39, 1, 1, "", "values"]], "rustworkx.CentralityMapping": [[41, 1, 1, "", "items"], [42, 1, 1, "", "keys"], [43, 1, 1, "", "values"]], "rustworkx.ColoringStrategy": [[45, 2, 1, "", "Degree"], [45, 2, 1, "", "IndependentSet"], [45, 2, 1, "", "Saturation"]], "rustworkx.EdgeCentralityMapping": [[49, 1, 1, "", "items"], [50, 1, 1, "", "keys"], [51, 1, 1, "", "values"]], "rustworkx.EdgeIndexMap": [[53, 1, 1, "", "items"], [54, 1, 1, "", "keys"], [55, 1, 1, "", "values"]], "rustworkx.NodeMap": [[69, 1, 1, "", "items"], [70, 1, 1, "", "keys"], [71, 1, 1, "", "values"]], "rustworkx.PathLengthMapping": [[74, 1, 1, "", "items"], [75, 1, 1, "", "keys"], [76, 1, 1, "", "values"]], "rustworkx.PathMapping": [[78, 1, 1, "", "items"], [79, 1, 1, "", "keys"], [80, 1, 1, "", "values"]], "rustworkx.Pos2DMapping": [[82, 1, 1, "", "items"], [83, 1, 1, "", "keys"], [84, 1, 1, "", "values"]], "rustworkx.ProductNodeMap": [[86, 1, 1, "", "items"], [87, 1, 1, "", "keys"], [88, 1, 1, "", "values"]], "rustworkx.PyDAG": [[90, 1, 1, "", "add_child"], [91, 1, 1, "", "add_edge"], [92, 1, 1, "", "add_edges_from"], [93, 1, 1, "", "add_edges_from_no_data"], [94, 1, 1, "", "add_node"], [95, 1, 1, "", "add_nodes_from"], [96, 1, 1, "", "add_parent"], [97, 1, 1, "", "adj"], [98, 1, 1, "", "adj_direction"], [89, 2, 1, "", "attrs"], [89, 2, 1, "", "check_cycle"], [99, 1, 1, "", "clear"], [100, 1, 1, "", "clear_edges"], [101, 1, 1, "", "compose"], [102, 1, 1, "", "contract_nodes"], [103, 1, 1, "", "copy"], [104, 1, 1, "", "edge_index_map"], [105, 1, 1, "", "edge_indices"], [106, 1, 1, "", "edge_indices_from_endpoints"], [107, 1, 1, "", "edge_list"], [108, 1, 1, "", "edge_subgraph"], [109, 1, 1, "", "edges"], [110, 1, 1, "", "extend_from_edge_list"], [111, 1, 1, "", "extend_from_weighted_edge_list"], [112, 1, 1, "", "filter_edges"], [113, 1, 1, "", "filter_nodes"], [114, 1, 1, "", "find_adjacent_node_by_edge"], [115, 1, 1, "", "find_node_by_weight"], [116, 1, 1, "", "find_predecessor_node_by_edge"], [117, 1, 1, "", "find_predecessors_by_edge"], [118, 1, 1, "", "find_successor_node_by_edge"], [119, 1, 1, "", "find_successors_by_edge"], [120, 1, 1, "", "from_adjacency_matrix"], [121, 1, 1, "", "from_complex_adjacency_matrix"], [122, 1, 1, "", "get_all_edge_data"], [123, 1, 1, "", "get_edge_data"], [124, 1, 1, "", "get_edge_data_by_index"], [125, 1, 1, "", "get_edge_endpoints_by_index"], [126, 1, 1, "", "get_node_data"], [127, 1, 1, "", "has_edge"], [128, 1, 1, "", "has_node"], [129, 1, 1, "", "has_parallel_edges"], [130, 1, 1, "", "in_degree"], [131, 1, 1, "", "in_edge_indices"], [132, 1, 1, "", "in_edges"], [133, 1, 1, "", "incident_edge_index_map"], [134, 1, 1, "", "incident_edges"], [135, 1, 1, "", "insert_node_on_in_edges"], [136, 1, 1, "", "insert_node_on_in_edges_multiple"], [137, 1, 1, "", "insert_node_on_out_edges"], [138, 1, 1, "", "insert_node_on_out_edges_multiple"], [139, 1, 1, "", "is_symmetric"], [140, 1, 1, "", "make_symmetric"], [141, 1, 1, "", "merge_nodes"], [89, 2, 1, "", "multigraph"], [142, 1, 1, "", "neighbors"], [143, 1, 1, "", "neighbors_undirected"], [144, 1, 1, "", "node_indexes"], [145, 1, 1, "", "node_indices"], [146, 1, 1, "", "nodes"], [147, 1, 1, "", "num_edges"], [148, 1, 1, "", "num_nodes"], [149, 1, 1, "", "out_degree"], [150, 1, 1, "", "out_edge_indices"], [151, 1, 1, "", "out_edges"], [152, 1, 1, "", "predecessor_indices"], [153, 1, 1, "", "predecessors"], [154, 1, 1, "", "read_edge_list"], [155, 1, 1, "", "remove_edge"], [156, 1, 1, "", "remove_edge_from_index"], [157, 1, 1, "", "remove_edges_from"], [158, 1, 1, "", "remove_node"], [159, 1, 1, "", "remove_node_retain_edges"], [160, 1, 1, "", "remove_node_retain_edges_by_id"], [161, 1, 1, "", "remove_node_retain_edges_by_key"], [162, 1, 1, "", "remove_nodes_from"], [163, 1, 1, "", "reverse"], [164, 1, 1, "", "subgraph"], [165, 1, 1, "", "substitute_node_with_subgraph"], [166, 1, 1, "", "successor_indices"], [167, 1, 1, "", "successors"], [168, 1, 1, "", "to_dot"], [169, 1, 1, "", "to_undirected"], [170, 1, 1, "", "update_edge"], [171, 1, 1, "", "update_edge_by_index"], [172, 1, 1, "", "weighted_edge_list"], [173, 1, 1, "", "write_edge_list"]], "rustworkx.PyDiGraph": [[175, 1, 1, "", "add_child"], [176, 1, 1, "", "add_edge"], [177, 1, 1, "", "add_edges_from"], [178, 1, 1, "", "add_edges_from_no_data"], [179, 1, 1, "", "add_node"], [180, 1, 1, "", "add_nodes_from"], [181, 1, 1, "", "add_parent"], [182, 1, 1, "", "adj"], [183, 1, 1, "", "adj_direction"], [174, 2, 1, "", "attrs"], [174, 2, 1, "", "check_cycle"], [184, 1, 1, "", "clear"], [185, 1, 1, "", "clear_edges"], [186, 1, 1, "", "compose"], [187, 1, 1, "", "contract_nodes"], [188, 1, 1, "", "copy"], [189, 1, 1, "", "edge_index_map"], [190, 1, 1, "", "edge_indices"], [191, 1, 1, "", "edge_indices_from_endpoints"], [192, 1, 1, "", "edge_list"], [193, 1, 1, "", "edge_subgraph"], [194, 1, 1, "", "edges"], [195, 1, 1, "", "extend_from_edge_list"], [196, 1, 1, "", "extend_from_weighted_edge_list"], [197, 1, 1, "", "filter_edges"], [198, 1, 1, "", "filter_nodes"], [199, 1, 1, "", "find_adjacent_node_by_edge"], [200, 1, 1, "", "find_node_by_weight"], [201, 1, 1, "", "find_predecessor_node_by_edge"], [202, 1, 1, "", "find_predecessors_by_edge"], [203, 1, 1, "", "find_successor_node_by_edge"], [204, 1, 1, "", "find_successors_by_edge"], [205, 1, 1, "", "from_adjacency_matrix"], [206, 1, 1, "", "from_complex_adjacency_matrix"], [207, 1, 1, "", "get_all_edge_data"], [208, 1, 1, "", "get_edge_data"], [209, 1, 1, "", "get_edge_data_by_index"], [210, 1, 1, "", "get_edge_endpoints_by_index"], [211, 1, 1, "", "get_node_data"], [212, 1, 1, "", "has_edge"], [213, 1, 1, "", "has_node"], [214, 1, 1, "", "has_parallel_edges"], [215, 1, 1, "", "in_degree"], [216, 1, 1, "", "in_edge_indices"], [217, 1, 1, "", "in_edges"], [218, 1, 1, "", "incident_edge_index_map"], [219, 1, 1, "", "incident_edges"], [220, 1, 1, "", "insert_node_on_in_edges"], [221, 1, 1, "", "insert_node_on_in_edges_multiple"], [222, 1, 1, "", "insert_node_on_out_edges"], [223, 1, 1, "", "insert_node_on_out_edges_multiple"], [224, 1, 1, "", "is_symmetric"], [225, 1, 1, "", "make_symmetric"], [226, 1, 1, "", "merge_nodes"], [174, 2, 1, "", "multigraph"], [227, 1, 1, "", "neighbors"], [228, 1, 1, "", "neighbors_undirected"], [229, 1, 1, "", "node_indexes"], [230, 1, 1, "", "node_indices"], [231, 1, 1, "", "nodes"], [232, 1, 1, "", "num_edges"], [233, 1, 1, "", "num_nodes"], [234, 1, 1, "", "out_degree"], [235, 1, 1, "", "out_edge_indices"], [236, 1, 1, "", "out_edges"], [237, 1, 1, "", "predecessor_indices"], [238, 1, 1, "", "predecessors"], [239, 1, 1, "", "read_edge_list"], [240, 1, 1, "", "remove_edge"], [241, 1, 1, "", "remove_edge_from_index"], [242, 1, 1, "", "remove_edges_from"], [243, 1, 1, "", "remove_node"], [244, 1, 1, "", "remove_node_retain_edges"], [245, 1, 1, "", "remove_node_retain_edges_by_id"], [246, 1, 1, "", "remove_node_retain_edges_by_key"], [247, 1, 1, "", "remove_nodes_from"], [248, 1, 1, "", "reverse"], [249, 1, 1, "", "subgraph"], [250, 1, 1, "", "substitute_node_with_subgraph"], [251, 1, 1, "", "successor_indices"], [252, 1, 1, "", "successors"], [253, 1, 1, "", "to_dot"], [254, 1, 1, "", "to_undirected"], [255, 1, 1, "", "update_edge"], [256, 1, 1, "", "update_edge_by_index"], [257, 1, 1, "", "weighted_edge_list"], [258, 1, 1, "", "write_edge_list"]], "rustworkx.PyGraph": [[260, 1, 1, "", "add_edge"], [261, 1, 1, "", "add_edges_from"], [262, 1, 1, "", "add_edges_from_no_data"], [263, 1, 1, "", "add_node"], [264, 1, 1, "", "add_nodes_from"], [265, 1, 1, "", "adj"], [259, 2, 1, "", "attrs"], [266, 1, 1, "", "clear"], [267, 1, 1, "", "clear_edges"], [268, 1, 1, "", "compose"], [269, 1, 1, "", "contract_nodes"], [270, 1, 1, "", "copy"], [271, 1, 1, "", "degree"], [272, 1, 1, "", "edge_index_map"], [273, 1, 1, "", "edge_indices"], [274, 1, 1, "", "edge_indices_from_endpoints"], [275, 1, 1, "", "edge_list"], [276, 1, 1, "", "edge_subgraph"], [277, 1, 1, "", "edges"], [278, 1, 1, "", "extend_from_edge_list"], [279, 1, 1, "", "extend_from_weighted_edge_list"], [280, 1, 1, "", "filter_edges"], [281, 1, 1, "", "filter_nodes"], [282, 1, 1, "", "find_node_by_weight"], [283, 1, 1, "", "from_adjacency_matrix"], [284, 1, 1, "", "from_complex_adjacency_matrix"], [285, 1, 1, "", "get_all_edge_data"], [286, 1, 1, "", "get_edge_data"], [287, 1, 1, "", "get_edge_data_by_index"], [288, 1, 1, "", "get_edge_endpoints_by_index"], [289, 1, 1, "", "get_node_data"], [290, 1, 1, "", "has_edge"], [291, 1, 1, "", "has_node"], [292, 1, 1, "", "has_parallel_edges"], [293, 1, 1, "", "in_edge_indices"], [294, 1, 1, "", "in_edges"], [295, 1, 1, "", "incident_edge_index_map"], [296, 1, 1, "", "incident_edges"], [259, 2, 1, "", "multigraph"], [297, 1, 1, "", "neighbors"], [298, 1, 1, "", "node_indexes"], [299, 1, 1, "", "node_indices"], [300, 1, 1, "", "nodes"], [301, 1, 1, "", "num_edges"], [302, 1, 1, "", "num_nodes"], [303, 1, 1, "", "out_edge_indices"], [304, 1, 1, "", "out_edges"], [305, 1, 1, "", "read_edge_list"], [306, 1, 1, "", "remove_edge"], [307, 1, 1, "", "remove_edge_from_index"], [308, 1, 1, "", "remove_edges_from"], [309, 1, 1, "", "remove_node"], [310, 1, 1, "", "remove_nodes_from"], [311, 1, 1, "", "subgraph"], [312, 1, 1, "", "substitute_node_with_subgraph"], [313, 1, 1, "", "to_directed"], [314, 1, 1, "", "to_dot"], [315, 1, 1, "", "update_edge"], [316, 1, 1, "", "update_edge_by_index"], [317, 1, 1, "", "weighted_edge_list"], [318, 1, 1, "", "write_edge_list"]], "rustworkx.TopologicalSorter": [[321, 1, 1, "", "done"], [322, 1, 1, "", "get_ready"], [323, 1, 1, "", "is_active"]], "rustworkx.generators": [[430, 4, 1, "", "barbell_graph"], [431, 4, 1, "", "binomial_tree_graph"], [432, 4, 1, "", "complete_graph"], [433, 4, 1, "", "cycle_graph"], [434, 4, 1, "", "directed_binomial_tree_graph"], [435, 4, 1, "", "directed_complete_graph"], [436, 4, 1, "", "directed_cycle_graph"], [437, 4, 1, "", "directed_empty_graph"], [438, 4, 1, "", "directed_grid_graph"], [439, 4, 1, "", "directed_heavy_hex_graph"], [440, 4, 1, "", "directed_heavy_square_graph"], [441, 4, 1, "", "directed_hexagonal_lattice_graph"], [442, 4, 1, "", "directed_mesh_graph"], [443, 4, 1, "", "directed_path_graph"], [444, 4, 1, "", "directed_star_graph"], [445, 4, 1, "", "dorogovtsev_goltsev_mendes_graph"], [446, 4, 1, "", "empty_graph"], [447, 4, 1, "", "full_rary_tree"], [448, 4, 1, "", "generalized_petersen_graph"], [449, 4, 1, "", "grid_graph"], [450, 4, 1, "", "heavy_hex_graph"], [451, 4, 1, "", "heavy_square_graph"], [452, 4, 1, "", "hexagonal_lattice_graph"], [453, 4, 1, "", "karate_club_graph"], [454, 4, 1, "", "lollipop_graph"], [455, 4, 1, "", "mesh_graph"], [456, 4, 1, "", "path_graph"], [457, 4, 1, "", "star_graph"]], "rustworkx.visit": [[571, 0, 1, "", "BFSVisitor"], [578, 0, 1, "", "DFSVisitor"], [584, 0, 1, "", "DijkstraVisitor"], [590, 3, 1, "", "PruneSearch"], [591, 3, 1, "", "StopSearch"]], "rustworkx.visit.BFSVisitor": [[572, 1, 1, "", "black_target_edge"], [573, 1, 1, "", "discover_vertex"], [574, 1, 1, "", "finish_vertex"], [575, 1, 1, "", "gray_target_edge"], [576, 1, 1, "", "non_tree_edge"], [577, 1, 1, "", "tree_edge"]], "rustworkx.visit.DFSVisitor": [[579, 1, 1, "", "back_edge"], [580, 1, 1, "", "discover_vertex"], [581, 1, 1, "", "finish_vertex"], [582, 1, 1, "", "forward_or_cross_edge"], [583, 1, 1, "", "tree_edge"]], "rustworkx.visit.DijkstraVisitor": [[585, 1, 1, "", "discover_vertex"], [586, 1, 1, "", "edge_not_relaxed"], [587, 1, 1, "", "edge_relaxed"], [588, 1, 1, "", "examine_edge"], [589, 1, 1, "", "finish_vertex"]], "rustworkx.visualization": [[592, 4, 1, "", "graphviz_draw"], [593, 4, 1, "", "mpl_draw"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:exception", "4": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "function", "Python function"]}, "titleterms": {"contribut": 0, "rustworkx": [0, 20, 27, 28, 29, 31, 32, 33, 37, 38, 39, 41, 42, 43, 46, 47, 49, 50, 51, 53, 54, 55, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603], "make": 0, "chang": 0, "code": 0, "modul": 0, "export": 0, "lib": 0, "r": 0, "ad": 0, "function": [0, 7, 11, 21, 22, 23, 24, 598], "directori": 0, "when": 0, "singl": [0, 595], "file": 0, "i": 0, "enough": 0, "core": [0, 596], "test": 0, "run": 0, "specif": 0, "python": 0, "version": 0, "subset": 0, "visual": [0, 592, 593, 598, 600, 604], "style": 0, "rust": 0, "lint": 0, "build": 0, "document": [0, 596], "type": [0, 16], "annot": 0, "releas": [0, 599], "note": [0, 599], "new": [0, 599], "link": [0, 9], "issu": 0, "gener": [0, 18, 24, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 600, 603], "local": 0, "pull": 0, "request": 0, "review": 0, "ci": 0, "merg": 0, "queue": 0, "stabl": 0, "branch": 0, "polici": 0, "backport": 0, "procedur": 0, "manual": 0, "central": [1, 600], "color": 2, "connect": 3, "cycl": 3, "dag": [4, 601], "algorithm": [4, 7, 11], "domin": 5, "graph": [6, 19, 24, 595, 598, 600, 601, 603], "oper": [6, 603], "isomorph": [8, 595], "analysi": 9, "match": 10, "other": [11, 595, 599], "shortest": [12, 595], "path": [12, 595], "travers": 13, "tree": 14, "convert": [15, 598], "custom": 16, "return": 16, "except": 17, "class": [19, 598], "api": [20, 22, 23, 598, 604], "refer": 20, "layout": 21, "pydigraph": [22, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258], "pygraph": [23, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318], "random": 24, "serial": 25, "allpairspathlengthmap": [26, 27, 28, 29], "item": [27, 31, 37, 41, 49, 53, 69, 74, 78, 82, 86], "kei": [28, 32, 38, 42, 50, 54, 70, 75, 79, 83, 87, 598], "valu": [29, 33, 39, 43, 51, 55, 71, 76, 80, 84, 88], "allpairspathmap": [30, 31, 32, 33], "bfspredecessor": 34, "bfssuccessor": 35, "biconnectedcompon": [36, 37, 38, 39], "centralitymap": [40, 41, 42, 43], "chain": 44, "coloringstrategi": 45, "strategi": 45, "descript": 45, "daghascycl": 46, "dagwouldcycl": 47, "edgecentralitymap": [48, 49, 50, 51], "edgeindexmap": [52, 53, 54, 55], "edgeindic": 56, "edgelist": 57, "graphnotbipartit": 58, "indexpartitionblock": 59, "invalidmap": 60, "invalidnod": 61, "jsonserializationerror": 62, "negativecycl": 63, "noedgebetweennod": 64, "nopathfound": 65, "nosuitableneighbor": 66, "nodeindic": 67, "nodemap": [68, 69, 70, 71], "nullgraph": 72, "pathlengthmap": [73, 74, 75, 76], "pathmap": [77, 78, 79, 80], "pos2dmap": [81, 82, 83, 84], "productnodemap": [85, 86, 87, 88], "pydag": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], "add_child": [90, 175], "add_edg": [91, 176, 260], "add_edges_from": [92, 177, 261], "add_edges_from_no_data": [93, 178, 262], "add_nod": [94, 179, 263], "add_nodes_from": [95, 180, 264], "add_par": [96, 181], "adj": [97, 182, 265], "adj_direct": [98, 183], "clear": [99, 184, 266], "clear_edg": [100, 185, 267], "compos": [101, 186, 268], "contract_nod": [102, 187, 269], "copi": [103, 188, 270], "edge_index_map": [104, 189, 272], "edge_indic": [105, 190, 273], "edge_indices_from_endpoint": [106, 191, 274], "edge_list": [107, 192, 275], "edge_subgraph": [108, 193, 276], "edg": [109, 194, 277, 598, 603], "extend_from_edge_list": [110, 195, 278], "extend_from_weighted_edge_list": [111, 196, 279], "filter_edg": [112, 197, 280], "filter_nod": [113, 198, 281], "find_adjacent_node_by_edg": [114, 199], "find_node_by_weight": [115, 200, 282], "find_predecessor_node_by_edg": [116, 201], "find_predecessors_by_edg": [117, 202], "find_successor_node_by_edg": [118, 203], "find_successors_by_edg": [119, 204], "from_adjacency_matrix": [120, 205, 283], "from_complex_adjacency_matrix": [121, 206, 284], "get_all_edge_data": [122, 207, 285], "get_edge_data": [123, 208, 286], "get_edge_data_by_index": [124, 209, 287], "get_edge_endpoints_by_index": [125, 210, 288], "get_node_data": [126, 211, 289], "has_edg": [127, 212, 290], "has_nod": [128, 213, 291], "has_parallel_edg": [129, 214, 292], "in_degre": [130, 215], "in_edge_indic": [131, 216, 293], "in_edg": [132, 217, 294], "incident_edge_index_map": [133, 218, 295], "incident_edg": [134, 219, 296], "insert_node_on_in_edg": [135, 220], "insert_node_on_in_edges_multipl": [136, 221], "insert_node_on_out_edg": [137, 222], "insert_node_on_out_edges_multipl": [138, 223], "is_symmetr": [139, 224], "make_symmetr": [140, 225], "merge_nod": [141, 226], "neighbor": [142, 227, 297, 603], "neighbors_undirect": [143, 228], "node_index": [144, 229, 298], "node_indic": [145, 230, 299], "node": [146, 231, 300, 598, 603], "num_edg": [147, 232, 301], "num_nod": [148, 233, 302], "out_degre": [149, 234], "out_edge_indic": [150, 235, 303], "out_edg": [151, 236, 304], "predecessor_indic": [152, 237], "predecessor": [153, 238], "read_edge_list": [154, 239, 305], "remove_edg": [155, 240, 306], "remove_edge_from_index": [156, 241, 307], "remove_edges_from": [157, 242, 308], "remove_nod": [158, 243, 309], "remove_node_retain_edg": [159, 244], "remove_node_retain_edges_by_id": [160, 245], "remove_node_retain_edges_by_kei": [161, 246], "remove_nodes_from": [162, 247, 310], "revers": [163, 248], "subgraph": [164, 249, 311, 595], "substitute_node_with_subgraph": [165, 250, 312], "successor_indic": [166, 251], "successor": [167, 252], "to_dot": [168, 253, 314], "to_undirect": [169, 254], "update_edg": [170, 255, 315], "update_edge_by_index": [171, 256, 316], "weighted_edge_list": [172, 257, 317], "write_edge_list": [173, 258, 318], "degre": 271, "to_direct": 313, "relationalcoarsestpartit": 319, "topologicalsort": [320, 321, 322, 323], "done": 321, "get_readi": 322, "is_act": 323, "weightededgelist": 324, "adjacency_matrix": 325, "all_pairs_all_simple_path": 326, "all_pairs_bellman_ford_path_length": 327, "all_pairs_bellman_ford_shortest_path": 328, "all_pairs_dijkstra_path_length": 329, "all_pairs_dijkstra_shortest_path": 330, "all_shortest_path": 331, "all_simple_path": 332, "ancestor": 333, "articulation_point": 334, "astar_shortest_path": 335, "barabasi_albert_graph": 336, "bellman_ford_shortest_path_length": 337, "bellman_ford_shortest_path": 338, "betweenness_centr": 339, "see": [339, 375, 389, 423, 468, 483], "also": [339, 375, 389, 423, 468, 483], "bfs_predecessor": 340, "bfs_search": 341, "bfs_successor": 342, "biconnected_compon": 343, "bipartite_layout": 344, "bridg": 345, "cartesian_product": 346, "chain_decomposit": 347, "circular_layout": 348, "closeness_centr": 349, "collect_bicolor_run": 350, "collect_run": 351, "complement": 352, "connected_compon": 353, "connected_subgraph": 354, "core_numb": 355, "cycle_basi": 356, "dag_longest_path": 357, "dag_longest_path_length": 358, "dag_weighted_longest_path": 359, "dag_weighted_longest_path_length": 360, "degree_centr": 361, "descend": 362, "dfs_edg": 363, "dfs_search": 364, "digraph_adjacency_matrix": 365, "digraph_all_pairs_all_simple_path": 366, "digraph_all_pairs_bellman_ford_path_length": 367, "digraph_all_pairs_bellman_ford_shortest_path": 368, "digraph_all_pairs_dijkstra_path_length": 369, "digraph_all_pairs_dijkstra_shortest_path": 370, "digraph_all_shortest_path": 371, "digraph_all_simple_path": 372, "digraph_astar_shortest_path": 373, "digraph_bellman_ford_shortest_path_length": 374, "digraph_betweenness_centr": 375, "digraph_bfs_search": 376, "digraph_bipartite_layout": 377, "digraph_cartesian_product": 378, "digraph_circular_layout": 379, "digraph_closeness_centr": 380, "digraph_compl": 381, "digraph_core_numb": 382, "digraph_dfs_edg": 383, "digraph_dfs_search": 384, "digraph_dijkstra_search": 385, "digraph_dijkstra_shortest_path_length": 386, "digraph_dijkstra_shortest_path": 387, "digraph_distance_matrix": 388, "digraph_edge_betweenness_centr": 389, "digraph_eigenvector_centr": 390, "digraph_find_cycl": 391, "digraph_floyd_warshal": 392, "digraph_floyd_warshall_numpi": 393, "digraph_floyd_warshall_successor_and_dist": 394, "digraph_is_isomorph": 395, "digraph_is_subgraph_isomorph": 396, "digraph_k_shortest_path_length": 397, "digraph_katz_centr": 398, "digraph_longest_simple_path": 399, "digraph_maximum_bisimul": 400, "digraph_newman_weighted_closeness_centr": 401, "digraph_node_link_json": 402, "digraph_num_shortest_paths_unweight": 403, "digraph_random_layout": 404, "digraph_shell_layout": 405, "digraph_spiral_layout": 406, "digraph_spring_layout": 407, "digraph_tensor_product": 408, "digraph_transit": 409, "digraph_union": 410, "digraph_unweighted_average_shortest_path_length": 411, "digraph_vf2_map": 412, "dijkstra_search": 413, "dijkstra_shortest_path_length": 414, "dijkstra_shortest_path": 415, "directed_barabasi_albert_graph": 416, "directed_gnm_random_graph": 417, "directed_gnp_random_graph": 418, "directed_random_bipartite_graph": 419, "directed_sbm_random_graph": 420, "distance_matrix": 421, "dominance_fronti": 422, "edge_betweenness_centr": 423, "eigenvector_centr": 424, "find_negative_cycl": 425, "floyd_warshal": 426, "floyd_warshall_numpi": 427, "floyd_warshall_successor_and_dist": 428, "from_node_link_json_fil": 429, "barbell_graph": 430, "binomial_tree_graph": 431, "complete_graph": 432, "cycle_graph": 433, "directed_binomial_tree_graph": 434, "directed_complete_graph": 435, "directed_cycle_graph": 436, "directed_empty_graph": 437, "directed_grid_graph": 438, "directed_heavy_hex_graph": 439, "directed_heavy_square_graph": 440, "directed_hexagonal_lattice_graph": 441, "directed_mesh_graph": 442, "directed_path_graph": 443, "directed_star_graph": 444, "dorogovtsev_goltsev_mendes_graph": 445, "empty_graph": 446, "full_rary_tre": 447, "generalized_petersen_graph": 448, "grid_graph": 449, "heavy_hex_graph": 450, "heavy_square_graph": 451, "hexagonal_lattice_graph": 452, "karate_club_graph": 453, "lollipop_graph": 454, "mesh_graph": 455, "path_graph": 456, "star_graph": 457, "graph_adjacency_matrix": 458, "graph_all_pairs_all_simple_path": 459, "graph_all_pairs_bellman_ford_path_length": 460, "graph_all_pairs_bellman_ford_shortest_path": 461, "graph_all_pairs_dijkstra_path_length": 462, "graph_all_pairs_dijkstra_shortest_path": 463, "graph_all_shortest_path": 464, "graph_all_simple_path": 465, "graph_astar_shortest_path": 466, "graph_bellman_ford_shortest_path_length": 467, "graph_betweenness_centr": 468, "graph_bfs_search": 469, "graph_bipartite_edge_color": 470, "graph_bipartite_layout": 471, "graph_cartesian_product": 472, "graph_circular_layout": 473, "graph_closeness_centr": 474, "graph_compl": 475, "graph_core_numb": 476, "graph_dfs_edg": 477, "graph_dfs_search": 478, "graph_dijkstra_search": 479, "graph_dijkstra_shortest_path_length": 480, "graph_dijkstra_shortest_path": 481, "graph_distance_matrix": 482, "graph_edge_betweenness_centr": 483, "graph_eigenvector_centr": 484, "graph_floyd_warshal": 485, "graph_floyd_warshall_numpi": 486, "graph_floyd_warshall_successor_and_dist": 487, "graph_greedy_color": 488, "graph_greedy_edge_color": 489, "graph_is_isomorph": 490, "graph_is_subgraph_isomorph": 491, "graph_k_shortest_path_length": 492, "graph_katz_centr": 493, "graph_line_graph": 494, "graph_longest_simple_path": 495, "graph_misra_gries_edge_color": 496, "graph_newman_weighted_closeness_centr": 497, "graph_node_link_json": 498, "graph_num_shortest_paths_unweight": 499, "graph_random_layout": 500, "graph_shell_layout": 501, "graph_spiral_layout": 502, "graph_spring_layout": 503, "graph_tensor_product": 504, "graph_token_swapp": 505, "graph_transit": 506, "graph_union": 507, "graph_unweighted_average_shortest_path_length": 508, "graph_vf2_map": 509, "has_path": 510, "hit": 511, "hyperbolic_random_graph": 512, "immediate_domin": 513, "in_degree_centr": 514, "is_bipartit": 515, "is_connect": 516, "is_directed_acyclic_graph": 517, "is_isomorph": 518, "is_isomorphic_node_match": 519, "is_match": 520, "is_maximal_match": 521, "is_planar": 522, "is_strongly_connect": 523, "is_subgraph_isomorph": 524, "is_weakly_connect": 525, "isol": 526, "k_shortest_path_length": 527, "katz_centr": 528, "layer": 529, "lexicographical_topological_sort": 530, "local_compl": 531, "longest_simple_path": 532, "max_weight_match": 533, "metric_closur": 534, "minimum_spanning_edg": 535, "minimum_spanning_tre": 536, "negative_edge_cycl": 537, "networkx_convert": 538, "newman_weighted_closeness_centr": 539, "node_connected_compon": 540, "node_link_json": 541, "num_shortest_paths_unweight": 542, "number_connected_compon": 543, "number_strongly_connected_compon": 544, "number_weakly_connected_compon": 545, "out_degree_centr": 546, "pagerank": 547, "parse_node_link_json": 548, "random_geometric_graph": 549, "random_layout": 550, "read_graphml": 551, "shell_layout": 552, "simple_cycl": 553, "spiral_layout": 554, "spring_layout": 555, "steiner_tre": 556, "stoer_wagner_min_cut": 557, "strongly_connected_compon": 558, "topological_gener": 559, "topological_sort": 560, "transitive_reduct": 561, "transit": 562, "two_color": 563, "undirected_gnm_random_graph": 564, "undirected_gnp_random_graph": 565, "undirected_random_bipartite_graph": 566, "undirected_sbm_random_graph": 567, "union": 568, "unweighted_average_shortest_path_length": 569, "vf2_map": 570, "bfsvisitor": [571, 572, 573, 574, 575, 576, 577], "visit": [572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591], "black_target_edg": 572, "discover_vertex": [573, 580, 585], "finish_vertex": [574, 581, 589], "gray_target_edg": 575, "non_tree_edg": 576, "tree_edg": [577, 583], "dfsvisitor": [578, 579, 580, 581, 582, 583], "back_edg": 579, "forward_or_cross_edg": 582, "dijkstravisitor": [584, 585, 586, 587, 588, 589], "edge_not_relax": 586, "edge_relax": 587, "examine_edg": 588, "prunesearch": 590, "stopsearch": 591, "graphviz_draw": 592, "mpl_draw": 593, "weakly_connected_compon": 594, "comparison": 595, "benchmark": 595, "With": 595, "librari": 595, "creation": 595, "sourc": 595, "all": 595, "pair": 595, "citat": 595, "project": 596, "histori": 596, "get": 597, "start": 597, "instal": [597, 603], "platform": 597, "without": 597, "precompil": 597, "binari": 597, "support": 597, "tier": 597, "1": [597, 599], "2": [597, 599], "3": 597, "4": [597, 599], "us": [597, 603], "networkx": 598, "user": 598, "some": 598, "differ": 598, "data": [598, 603], "attribut": [598, 603], "examin": [598, 603], "element": [598, 603], "equival": 598, "constructor": 598, "modifi": [598, 603], "matrix": 598, "matplotlib": 598, "drawer": 598, "from": [598, 603], "gap": 598, "0": 599, "16": 599, "18": 599, "featur": 599, "upgrad": 599, "bug": 599, "fix": 599, "prelud": 599, "15": 599, "14": 599, "deprec": 599, "13": 599, "12": 599, "11": 599, "10": 599, "9": 599, "8": 599, "7": 599, "6": 599, "5": 599, "work": 600, "between": 600, "calcul": 600, "direct": [601, 603], "acycl": 601, "applic": 601, "task": 601, "schedul": 601, "qiskit": 601, "": 601, "compil": 601, "tutori": 602, "guid": 602, "introduct": 603, "how": 603, "import": 603, "creat": 603, "remov": 603, "what": 603, "payload": 603, "access": 603, "multigraph": 603, "analyz": 603, "draw": 603}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Contributing": [[0, "contributing"]], "Contributing to rustworkx": [[0, "contributing-to-rustworkx"]], "Making changes to the code": [[0, "making-changes-to-the-code"]], "Module exports in lib.rs": [[0, "module-exports-in-lib-rs"]], "Adding and changing functions in modules": [[0, "adding-and-changing-functions-in-modules"]], "Module directories: when a single file is not enough": [[0, "module-directories-when-a-single-file-is-not-enough"]], "rustworkx-core": [[0, "rustworkx-core"], [596, "rustworkx-core"]], "Tests": [[0, "tests"]], "Running tests with a specific Python version": [[0, "running-tests-with-a-specific-python-version"]], "Running subsets of tests": [[0, "running-subsets-of-tests"]], "Visualization Tests": [[0, "visualization-tests"]], "rustworkx-core tests": [[0, "rustworkx-core-tests"]], "Style": [[0, "style"]], "Rust": [[0, "rust"]], "Lint": [[0, "lint"]], "Python": [[0, "python"]], "Building documentation": [[0, "building-documentation"]], "rustworkx-core documentation": [[0, "rustworkx-core-documentation"]], "Type Annotations": [[0, "type-annotations"]], "Release Notes": [[0, "release-notes"], [599, "release-notes"]], "Adding a new release note": [[0, "adding-a-new-release-note"]], "Linking to issues": [[0, "linking-to-issues"]], "Generating the release notes": [[0, "generating-the-release-notes"]], "Building release notes locally": [[0, "building-release-notes-locally"]], "Pull request review, CI, and merge queue": [[0, "pull-request-review-ci-and-merge-queue"]], "Stable Branch Policy and Backporting": [[0, "stable-branch-policy-and-backporting"]], "Backporting procedure": [[0, "backporting-procedure"]], "Manual backport procedure": [[0, "manual-backport-procedure"]], "Centrality": [[1, "centrality"]], "Coloring": [[2, "coloring"]], "Connectivity and Cycles": [[3, "connectivity-and-cycles"]], "DAG Algorithms": [[4, "dag-algorithms"]], "Dominance": [[5, "dominance"]], "Graph Operations": [[6, "graph-operations"]], "Algorithm Functions": [[7, "algorithm-functions"]], "Isomorphism": [[8, "isomorphism"]], "Link Analysis": [[9, "link-analysis"]], "Matching": [[10, "matching"]], "Other Algorithm Functions": [[11, "other-algorithm-functions"]], "Shortest Paths": [[12, "shortest-paths"]], "Traversal": [[13, "traversal"]], "Tree": [[14, "tree"]], "Converters": [[15, "converters"]], "Custom Return Types": [[16, "custom-return-types"]], "Exceptions": [[17, "exceptions"]], "Generators": [[18, "generators"]], "Graph Classes": [[19, "graph-classes"]], "Rustworkx API Reference": [[20, "rustworkx-api-reference"]], "Layout Functions": [[21, "layout-functions"]], "API functions for PyDigraph": [[22, "api-functions-for-pydigraph"]], "API functions for PyGraph": [[23, "api-functions-for-pygraph"]], "Random Graph Generator Functions": [[24, "random-graph-generator-functions"]], "Serialization": [[25, "serialization"]], "AllPairsPathLengthMapping": [[26, "allpairspathlengthmapping"]], "rustworkx.AllPairsPathLengthMapping.items": [[27, "rustworkx-allpairspathlengthmapping-items"]], "rustworkx.AllPairsPathLengthMapping.keys": [[28, "rustworkx-allpairspathlengthmapping-keys"]], "rustworkx.AllPairsPathLengthMapping.values": [[29, "rustworkx-allpairspathlengthmapping-values"]], "AllPairsPathMapping": [[30, "allpairspathmapping"]], "rustworkx.AllPairsPathMapping.items": [[31, "rustworkx-allpairspathmapping-items"]], "rustworkx.AllPairsPathMapping.keys": [[32, "rustworkx-allpairspathmapping-keys"]], "rustworkx.AllPairsPathMapping.values": [[33, "rustworkx-allpairspathmapping-values"]], "BFSPredecessors": [[34, "bfspredecessors"]], "BFSSuccessors": [[35, "bfssuccessors"]], "BiconnectedComponents": [[36, "biconnectedcomponents"]], "rustworkx.BiconnectedComponents.items": [[37, "rustworkx-biconnectedcomponents-items"]], "rustworkx.BiconnectedComponents.keys": [[38, "rustworkx-biconnectedcomponents-keys"]], "rustworkx.BiconnectedComponents.values": [[39, "rustworkx-biconnectedcomponents-values"]], "CentralityMapping": [[40, "centralitymapping"]], "rustworkx.CentralityMapping.items": [[41, "rustworkx-centralitymapping-items"]], "rustworkx.CentralityMapping.keys": [[42, "rustworkx-centralitymapping-keys"]], "rustworkx.CentralityMapping.values": [[43, "rustworkx-centralitymapping-values"]], "Chains": [[44, "chains"]], "ColoringStrategy": [[45, "coloringstrategy"]], "Strategy description": [[45, "id1"]], "rustworkx.DAGHasCycle": [[46, "rustworkx-daghascycle"]], "rustworkx.DAGWouldCycle": [[47, "rustworkx-dagwouldcycle"]], "EdgeCentralityMapping": [[48, "edgecentralitymapping"]], "rustworkx.EdgeCentralityMapping.items": [[49, "rustworkx-edgecentralitymapping-items"]], "rustworkx.EdgeCentralityMapping.keys": [[50, "rustworkx-edgecentralitymapping-keys"]], "rustworkx.EdgeCentralityMapping.values": [[51, "rustworkx-edgecentralitymapping-values"]], "EdgeIndexMap": [[52, "edgeindexmap"]], "rustworkx.EdgeIndexMap.items": [[53, "rustworkx-edgeindexmap-items"]], "rustworkx.EdgeIndexMap.keys": [[54, "rustworkx-edgeindexmap-keys"]], "rustworkx.EdgeIndexMap.values": [[55, "rustworkx-edgeindexmap-values"]], "EdgeIndices": [[56, "edgeindices"]], "EdgeList": [[57, "edgelist"]], "rustworkx.GraphNotBipartite": [[58, "rustworkx-graphnotbipartite"]], "IndexPartitionBlock": [[59, "indexpartitionblock"]], "rustworkx.InvalidMapping": [[60, "rustworkx-invalidmapping"]], "rustworkx.InvalidNode": [[61, "rustworkx-invalidnode"]], "rustworkx.JSONSerializationError": [[62, "rustworkx-jsonserializationerror"]], "rustworkx.NegativeCycle": [[63, "rustworkx-negativecycle"]], "rustworkx.NoEdgeBetweenNodes": [[64, "rustworkx-noedgebetweennodes"]], "rustworkx.NoPathFound": [[65, "rustworkx-nopathfound"]], "rustworkx.NoSuitableNeighbors": [[66, "rustworkx-nosuitableneighbors"]], "NodeIndices": [[67, "nodeindices"]], "NodeMap": [[68, "nodemap"]], "rustworkx.NodeMap.items": [[69, "rustworkx-nodemap-items"]], "rustworkx.NodeMap.keys": [[70, "rustworkx-nodemap-keys"]], "rustworkx.NodeMap.values": [[71, "rustworkx-nodemap-values"]], "rustworkx.NullGraph": [[72, "rustworkx-nullgraph"]], "PathLengthMapping": [[73, "pathlengthmapping"]], "rustworkx.PathLengthMapping.items": [[74, "rustworkx-pathlengthmapping-items"]], "rustworkx.PathLengthMapping.keys": [[75, "rustworkx-pathlengthmapping-keys"]], "rustworkx.PathLengthMapping.values": [[76, "rustworkx-pathlengthmapping-values"]], "PathMapping": [[77, "pathmapping"]], "rustworkx.PathMapping.items": [[78, "rustworkx-pathmapping-items"]], "rustworkx.PathMapping.keys": [[79, "rustworkx-pathmapping-keys"]], "rustworkx.PathMapping.values": [[80, "rustworkx-pathmapping-values"]], "Pos2DMapping": [[81, "pos2dmapping"]], "rustworkx.Pos2DMapping.items": [[82, "rustworkx-pos2dmapping-items"]], "rustworkx.Pos2DMapping.keys": [[83, "rustworkx-pos2dmapping-keys"]], "rustworkx.Pos2DMapping.values": [[84, "rustworkx-pos2dmapping-values"]], "ProductNodeMap": [[85, "productnodemap"]], "rustworkx.ProductNodeMap.items": [[86, "rustworkx-productnodemap-items"]], "rustworkx.ProductNodeMap.keys": [[87, "rustworkx-productnodemap-keys"]], "rustworkx.ProductNodeMap.values": [[88, "rustworkx-productnodemap-values"]], "PyDAG": [[89, "pydag"]], "rustworkx.PyDAG.add_child": [[90, "rustworkx-pydag-add-child"]], "rustworkx.PyDAG.add_edge": [[91, "rustworkx-pydag-add-edge"]], "rustworkx.PyDAG.add_edges_from": [[92, "rustworkx-pydag-add-edges-from"]], "rustworkx.PyDAG.add_edges_from_no_data": [[93, "rustworkx-pydag-add-edges-from-no-data"]], "rustworkx.PyDAG.add_node": [[94, "rustworkx-pydag-add-node"]], "rustworkx.PyDAG.add_nodes_from": [[95, "rustworkx-pydag-add-nodes-from"]], "rustworkx.PyDAG.add_parent": [[96, "rustworkx-pydag-add-parent"]], "rustworkx.PyDAG.adj": [[97, "rustworkx-pydag-adj"]], "rustworkx.PyDAG.adj_direction": [[98, "rustworkx-pydag-adj-direction"]], "rustworkx.PyDAG.clear": [[99, "rustworkx-pydag-clear"]], "rustworkx.PyDAG.clear_edges": [[100, "rustworkx-pydag-clear-edges"]], "rustworkx.PyDAG.compose": [[101, "rustworkx-pydag-compose"]], "rustworkx.PyDAG.contract_nodes": [[102, "rustworkx-pydag-contract-nodes"]], "rustworkx.PyDAG.copy": [[103, "rustworkx-pydag-copy"]], "rustworkx.PyDAG.edge_index_map": [[104, "rustworkx-pydag-edge-index-map"]], "rustworkx.PyDAG.edge_indices": [[105, "rustworkx-pydag-edge-indices"]], "rustworkx.PyDAG.edge_indices_from_endpoints": [[106, "rustworkx-pydag-edge-indices-from-endpoints"]], "rustworkx.PyDAG.edge_list": [[107, "rustworkx-pydag-edge-list"]], "rustworkx.PyDAG.edge_subgraph": [[108, "rustworkx-pydag-edge-subgraph"]], "rustworkx.PyDAG.edges": [[109, "rustworkx-pydag-edges"]], "rustworkx.PyDAG.extend_from_edge_list": [[110, "rustworkx-pydag-extend-from-edge-list"]], "rustworkx.PyDAG.extend_from_weighted_edge_list": [[111, "rustworkx-pydag-extend-from-weighted-edge-list"]], "rustworkx.PyDAG.filter_edges": [[112, "rustworkx-pydag-filter-edges"]], "rustworkx.PyDAG.filter_nodes": [[113, "rustworkx-pydag-filter-nodes"]], "rustworkx.PyDAG.find_adjacent_node_by_edge": [[114, "rustworkx-pydag-find-adjacent-node-by-edge"]], "rustworkx.PyDAG.find_node_by_weight": [[115, "rustworkx-pydag-find-node-by-weight"]], "rustworkx.PyDAG.find_predecessor_node_by_edge": [[116, "rustworkx-pydag-find-predecessor-node-by-edge"]], "rustworkx.PyDAG.find_predecessors_by_edge": [[117, "rustworkx-pydag-find-predecessors-by-edge"]], "rustworkx.PyDAG.find_successor_node_by_edge": [[118, "rustworkx-pydag-find-successor-node-by-edge"]], "rustworkx.PyDAG.find_successors_by_edge": [[119, "rustworkx-pydag-find-successors-by-edge"]], "rustworkx.PyDAG.from_adjacency_matrix": [[120, "rustworkx-pydag-from-adjacency-matrix"]], "rustworkx.PyDAG.from_complex_adjacency_matrix": [[121, "rustworkx-pydag-from-complex-adjacency-matrix"]], "rustworkx.PyDAG.get_all_edge_data": [[122, "rustworkx-pydag-get-all-edge-data"]], "rustworkx.PyDAG.get_edge_data": [[123, "rustworkx-pydag-get-edge-data"]], "rustworkx.PyDAG.get_edge_data_by_index": [[124, "rustworkx-pydag-get-edge-data-by-index"]], "rustworkx.PyDAG.get_edge_endpoints_by_index": [[125, "rustworkx-pydag-get-edge-endpoints-by-index"]], "rustworkx.PyDAG.get_node_data": [[126, "rustworkx-pydag-get-node-data"]], "rustworkx.PyDAG.has_edge": [[127, "rustworkx-pydag-has-edge"]], "rustworkx.PyDAG.has_node": [[128, "rustworkx-pydag-has-node"]], "rustworkx.PyDAG.has_parallel_edges": [[129, "rustworkx-pydag-has-parallel-edges"]], "rustworkx.PyDAG.in_degree": [[130, "rustworkx-pydag-in-degree"]], "rustworkx.PyDAG.in_edge_indices": [[131, "rustworkx-pydag-in-edge-indices"]], "rustworkx.PyDAG.in_edges": [[132, "rustworkx-pydag-in-edges"]], "rustworkx.PyDAG.incident_edge_index_map": [[133, "rustworkx-pydag-incident-edge-index-map"]], "rustworkx.PyDAG.incident_edges": [[134, "rustworkx-pydag-incident-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges": [[135, "rustworkx-pydag-insert-node-on-in-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges_multiple": [[136, "rustworkx-pydag-insert-node-on-in-edges-multiple"]], "rustworkx.PyDAG.insert_node_on_out_edges": [[137, "rustworkx-pydag-insert-node-on-out-edges"]], "rustworkx.PyDAG.insert_node_on_out_edges_multiple": [[138, "rustworkx-pydag-insert-node-on-out-edges-multiple"]], "rustworkx.PyDAG.is_symmetric": [[139, "rustworkx-pydag-is-symmetric"]], "rustworkx.PyDAG.make_symmetric": [[140, "rustworkx-pydag-make-symmetric"]], "rustworkx.PyDAG.merge_nodes": [[141, "rustworkx-pydag-merge-nodes"]], "rustworkx.PyDAG.neighbors": [[142, "rustworkx-pydag-neighbors"]], "rustworkx.PyDAG.neighbors_undirected": [[143, "rustworkx-pydag-neighbors-undirected"]], "rustworkx.PyDAG.node_indexes": [[144, "rustworkx-pydag-node-indexes"]], "rustworkx.PyDAG.node_indices": [[145, "rustworkx-pydag-node-indices"]], "rustworkx.PyDAG.nodes": [[146, "rustworkx-pydag-nodes"]], "rustworkx.PyDAG.num_edges": [[147, "rustworkx-pydag-num-edges"]], "rustworkx.PyDAG.num_nodes": [[148, "rustworkx-pydag-num-nodes"]], "rustworkx.PyDAG.out_degree": [[149, "rustworkx-pydag-out-degree"]], "rustworkx.PyDAG.out_edge_indices": [[150, "rustworkx-pydag-out-edge-indices"]], "rustworkx.PyDAG.out_edges": [[151, "rustworkx-pydag-out-edges"]], "rustworkx.PyDAG.predecessor_indices": [[152, "rustworkx-pydag-predecessor-indices"]], "rustworkx.PyDAG.predecessors": [[153, "rustworkx-pydag-predecessors"]], "rustworkx.PyDAG.read_edge_list": [[154, "rustworkx-pydag-read-edge-list"]], "rustworkx.PyDAG.remove_edge": [[155, "rustworkx-pydag-remove-edge"]], "rustworkx.PyDAG.remove_edge_from_index": [[156, "rustworkx-pydag-remove-edge-from-index"]], "rustworkx.PyDAG.remove_edges_from": [[157, "rustworkx-pydag-remove-edges-from"]], "rustworkx.PyDAG.remove_node": [[158, "rustworkx-pydag-remove-node"]], "rustworkx.PyDAG.remove_node_retain_edges": [[159, "rustworkx-pydag-remove-node-retain-edges"]], "rustworkx.PyDAG.remove_node_retain_edges_by_id": [[160, "rustworkx-pydag-remove-node-retain-edges-by-id"]], "rustworkx.PyDAG.remove_node_retain_edges_by_key": [[161, "rustworkx-pydag-remove-node-retain-edges-by-key"]], "rustworkx.PyDAG.remove_nodes_from": [[162, "rustworkx-pydag-remove-nodes-from"]], "rustworkx.PyDAG.reverse": [[163, "rustworkx-pydag-reverse"]], "rustworkx.PyDAG.subgraph": [[164, "rustworkx-pydag-subgraph"]], "rustworkx.PyDAG.substitute_node_with_subgraph": [[165, "rustworkx-pydag-substitute-node-with-subgraph"]], "rustworkx.PyDAG.successor_indices": [[166, "rustworkx-pydag-successor-indices"]], "rustworkx.PyDAG.successors": [[167, "rustworkx-pydag-successors"]], "rustworkx.PyDAG.to_dot": [[168, "rustworkx-pydag-to-dot"]], "rustworkx.PyDAG.to_undirected": [[169, "rustworkx-pydag-to-undirected"]], "rustworkx.PyDAG.update_edge": [[170, "rustworkx-pydag-update-edge"]], "rustworkx.PyDAG.update_edge_by_index": [[171, "rustworkx-pydag-update-edge-by-index"]], "rustworkx.PyDAG.weighted_edge_list": [[172, "rustworkx-pydag-weighted-edge-list"]], "rustworkx.PyDAG.write_edge_list": [[173, "rustworkx-pydag-write-edge-list"]], "PyDiGraph": [[174, "pydigraph"]], "rustworkx.PyDiGraph.add_child": [[175, "rustworkx-pydigraph-add-child"]], "rustworkx.PyDiGraph.add_edge": [[176, "rustworkx-pydigraph-add-edge"]], "rustworkx.PyDiGraph.add_edges_from": [[177, "rustworkx-pydigraph-add-edges-from"]], "rustworkx.PyDiGraph.add_edges_from_no_data": [[178, "rustworkx-pydigraph-add-edges-from-no-data"]], "rustworkx.PyDiGraph.add_node": [[179, "rustworkx-pydigraph-add-node"]], "rustworkx.PyDiGraph.add_nodes_from": [[180, "rustworkx-pydigraph-add-nodes-from"]], "rustworkx.PyDiGraph.add_parent": [[181, "rustworkx-pydigraph-add-parent"]], "rustworkx.PyDiGraph.adj": [[182, "rustworkx-pydigraph-adj"]], "rustworkx.PyDiGraph.adj_direction": [[183, "rustworkx-pydigraph-adj-direction"]], "rustworkx.PyDiGraph.clear": [[184, "rustworkx-pydigraph-clear"]], "rustworkx.PyDiGraph.clear_edges": [[185, "rustworkx-pydigraph-clear-edges"]], "rustworkx.PyDiGraph.compose": [[186, "rustworkx-pydigraph-compose"]], "rustworkx.PyDiGraph.contract_nodes": [[187, "rustworkx-pydigraph-contract-nodes"]], "rustworkx.PyDiGraph.copy": [[188, "rustworkx-pydigraph-copy"]], "rustworkx.PyDiGraph.edge_index_map": [[189, "rustworkx-pydigraph-edge-index-map"]], "rustworkx.PyDiGraph.edge_indices": [[190, "rustworkx-pydigraph-edge-indices"]], "rustworkx.PyDiGraph.edge_indices_from_endpoints": [[191, "rustworkx-pydigraph-edge-indices-from-endpoints"]], "rustworkx.PyDiGraph.edge_list": [[192, "rustworkx-pydigraph-edge-list"]], "rustworkx.PyDiGraph.edge_subgraph": [[193, "rustworkx-pydigraph-edge-subgraph"]], "rustworkx.PyDiGraph.edges": [[194, "rustworkx-pydigraph-edges"]], "rustworkx.PyDiGraph.extend_from_edge_list": [[195, "rustworkx-pydigraph-extend-from-edge-list"]], "rustworkx.PyDiGraph.extend_from_weighted_edge_list": [[196, "rustworkx-pydigraph-extend-from-weighted-edge-list"]], "rustworkx.PyDiGraph.filter_edges": [[197, "rustworkx-pydigraph-filter-edges"]], "rustworkx.PyDiGraph.filter_nodes": [[198, "rustworkx-pydigraph-filter-nodes"]], "rustworkx.PyDiGraph.find_adjacent_node_by_edge": [[199, "rustworkx-pydigraph-find-adjacent-node-by-edge"]], "rustworkx.PyDiGraph.find_node_by_weight": [[200, "rustworkx-pydigraph-find-node-by-weight"]], "rustworkx.PyDiGraph.find_predecessor_node_by_edge": [[201, "rustworkx-pydigraph-find-predecessor-node-by-edge"]], "rustworkx.PyDiGraph.find_predecessors_by_edge": [[202, "rustworkx-pydigraph-find-predecessors-by-edge"]], "rustworkx.PyDiGraph.find_successor_node_by_edge": [[203, "rustworkx-pydigraph-find-successor-node-by-edge"]], "rustworkx.PyDiGraph.find_successors_by_edge": [[204, "rustworkx-pydigraph-find-successors-by-edge"]], "rustworkx.PyDiGraph.from_adjacency_matrix": [[205, "rustworkx-pydigraph-from-adjacency-matrix"]], "rustworkx.PyDiGraph.from_complex_adjacency_matrix": [[206, "rustworkx-pydigraph-from-complex-adjacency-matrix"]], "rustworkx.PyDiGraph.get_all_edge_data": [[207, "rustworkx-pydigraph-get-all-edge-data"]], "rustworkx.PyDiGraph.get_edge_data": [[208, "rustworkx-pydigraph-get-edge-data"]], "rustworkx.PyDiGraph.get_edge_data_by_index": [[209, "rustworkx-pydigraph-get-edge-data-by-index"]], "rustworkx.PyDiGraph.get_edge_endpoints_by_index": [[210, "rustworkx-pydigraph-get-edge-endpoints-by-index"]], "rustworkx.PyDiGraph.get_node_data": [[211, "rustworkx-pydigraph-get-node-data"]], "rustworkx.PyDiGraph.has_edge": [[212, "rustworkx-pydigraph-has-edge"]], "rustworkx.PyDiGraph.has_node": [[213, "rustworkx-pydigraph-has-node"]], "rustworkx.PyDiGraph.has_parallel_edges": [[214, "rustworkx-pydigraph-has-parallel-edges"]], "rustworkx.PyDiGraph.in_degree": [[215, "rustworkx-pydigraph-in-degree"]], "rustworkx.PyDiGraph.in_edge_indices": [[216, "rustworkx-pydigraph-in-edge-indices"]], "rustworkx.PyDiGraph.in_edges": [[217, "rustworkx-pydigraph-in-edges"]], "rustworkx.PyDiGraph.incident_edge_index_map": [[218, "rustworkx-pydigraph-incident-edge-index-map"]], "rustworkx.PyDiGraph.incident_edges": [[219, "rustworkx-pydigraph-incident-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges": [[220, "rustworkx-pydigraph-insert-node-on-in-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple": [[221, "rustworkx-pydigraph-insert-node-on-in-edges-multiple"]], "rustworkx.PyDiGraph.insert_node_on_out_edges": [[222, "rustworkx-pydigraph-insert-node-on-out-edges"]], "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple": [[223, "rustworkx-pydigraph-insert-node-on-out-edges-multiple"]], "rustworkx.PyDiGraph.is_symmetric": [[224, "rustworkx-pydigraph-is-symmetric"]], "rustworkx.PyDiGraph.make_symmetric": [[225, "rustworkx-pydigraph-make-symmetric"]], "rustworkx.PyDiGraph.merge_nodes": [[226, "rustworkx-pydigraph-merge-nodes"]], "rustworkx.PyDiGraph.neighbors": [[227, "rustworkx-pydigraph-neighbors"]], "rustworkx.PyDiGraph.neighbors_undirected": [[228, "rustworkx-pydigraph-neighbors-undirected"]], "rustworkx.PyDiGraph.node_indexes": [[229, "rustworkx-pydigraph-node-indexes"]], "rustworkx.PyDiGraph.node_indices": [[230, "rustworkx-pydigraph-node-indices"]], "rustworkx.PyDiGraph.nodes": [[231, "rustworkx-pydigraph-nodes"]], "rustworkx.PyDiGraph.num_edges": [[232, "rustworkx-pydigraph-num-edges"]], "rustworkx.PyDiGraph.num_nodes": [[233, "rustworkx-pydigraph-num-nodes"]], "rustworkx.PyDiGraph.out_degree": [[234, "rustworkx-pydigraph-out-degree"]], "rustworkx.PyDiGraph.out_edge_indices": [[235, "rustworkx-pydigraph-out-edge-indices"]], "rustworkx.PyDiGraph.out_edges": [[236, "rustworkx-pydigraph-out-edges"]], "rustworkx.PyDiGraph.predecessor_indices": [[237, "rustworkx-pydigraph-predecessor-indices"]], "rustworkx.PyDiGraph.predecessors": [[238, "rustworkx-pydigraph-predecessors"]], "rustworkx.PyDiGraph.read_edge_list": [[239, "rustworkx-pydigraph-read-edge-list"]], "rustworkx.PyDiGraph.remove_edge": [[240, "rustworkx-pydigraph-remove-edge"]], "rustworkx.PyDiGraph.remove_edge_from_index": [[241, "rustworkx-pydigraph-remove-edge-from-index"]], "rustworkx.PyDiGraph.remove_edges_from": [[242, "rustworkx-pydigraph-remove-edges-from"]], "rustworkx.PyDiGraph.remove_node": [[243, "rustworkx-pydigraph-remove-node"]], "rustworkx.PyDiGraph.remove_node_retain_edges": [[244, "rustworkx-pydigraph-remove-node-retain-edges"]], "rustworkx.PyDiGraph.remove_node_retain_edges_by_id": [[245, "rustworkx-pydigraph-remove-node-retain-edges-by-id"]], "rustworkx.PyDiGraph.remove_node_retain_edges_by_key": [[246, "rustworkx-pydigraph-remove-node-retain-edges-by-key"]], "rustworkx.PyDiGraph.remove_nodes_from": [[247, "rustworkx-pydigraph-remove-nodes-from"]], "rustworkx.PyDiGraph.reverse": [[248, "rustworkx-pydigraph-reverse"]], "rustworkx.PyDiGraph.subgraph": [[249, "rustworkx-pydigraph-subgraph"]], "rustworkx.PyDiGraph.substitute_node_with_subgraph": [[250, "rustworkx-pydigraph-substitute-node-with-subgraph"]], "rustworkx.PyDiGraph.successor_indices": [[251, "rustworkx-pydigraph-successor-indices"]], "rustworkx.PyDiGraph.successors": [[252, "rustworkx-pydigraph-successors"]], "rustworkx.PyDiGraph.to_dot": [[253, "rustworkx-pydigraph-to-dot"]], "rustworkx.PyDiGraph.to_undirected": [[254, "rustworkx-pydigraph-to-undirected"]], "rustworkx.PyDiGraph.update_edge": [[255, "rustworkx-pydigraph-update-edge"]], "rustworkx.PyDiGraph.update_edge_by_index": [[256, "rustworkx-pydigraph-update-edge-by-index"]], "rustworkx.PyDiGraph.weighted_edge_list": [[257, "rustworkx-pydigraph-weighted-edge-list"]], "rustworkx.PyDiGraph.write_edge_list": [[258, "rustworkx-pydigraph-write-edge-list"]], "PyGraph": [[259, "pygraph"]], "rustworkx.PyGraph.add_edge": [[260, "rustworkx-pygraph-add-edge"]], "rustworkx.PyGraph.add_edges_from": [[261, "rustworkx-pygraph-add-edges-from"]], "rustworkx.PyGraph.add_edges_from_no_data": [[262, "rustworkx-pygraph-add-edges-from-no-data"]], "rustworkx.PyGraph.add_node": [[263, "rustworkx-pygraph-add-node"]], "rustworkx.PyGraph.add_nodes_from": [[264, "rustworkx-pygraph-add-nodes-from"]], "rustworkx.PyGraph.adj": [[265, "rustworkx-pygraph-adj"]], "rustworkx.PyGraph.clear": [[266, "rustworkx-pygraph-clear"]], "rustworkx.PyGraph.clear_edges": [[267, "rustworkx-pygraph-clear-edges"]], "rustworkx.PyGraph.compose": [[268, "rustworkx-pygraph-compose"]], "rustworkx.PyGraph.contract_nodes": [[269, "rustworkx-pygraph-contract-nodes"]], "rustworkx.PyGraph.copy": [[270, "rustworkx-pygraph-copy"]], "rustworkx.PyGraph.degree": [[271, "rustworkx-pygraph-degree"]], "rustworkx.PyGraph.edge_index_map": [[272, "rustworkx-pygraph-edge-index-map"]], "rustworkx.PyGraph.edge_indices": [[273, "rustworkx-pygraph-edge-indices"]], "rustworkx.PyGraph.edge_indices_from_endpoints": [[274, "rustworkx-pygraph-edge-indices-from-endpoints"]], "rustworkx.PyGraph.edge_list": [[275, "rustworkx-pygraph-edge-list"]], "rustworkx.PyGraph.edge_subgraph": [[276, "rustworkx-pygraph-edge-subgraph"]], "rustworkx.PyGraph.edges": [[277, "rustworkx-pygraph-edges"]], "rustworkx.PyGraph.extend_from_edge_list": [[278, "rustworkx-pygraph-extend-from-edge-list"]], "rustworkx.PyGraph.extend_from_weighted_edge_list": [[279, "rustworkx-pygraph-extend-from-weighted-edge-list"]], "rustworkx.PyGraph.filter_edges": [[280, "rustworkx-pygraph-filter-edges"]], "rustworkx.PyGraph.filter_nodes": [[281, "rustworkx-pygraph-filter-nodes"]], "rustworkx.PyGraph.find_node_by_weight": [[282, "rustworkx-pygraph-find-node-by-weight"]], "rustworkx.PyGraph.from_adjacency_matrix": [[283, "rustworkx-pygraph-from-adjacency-matrix"]], "rustworkx.PyGraph.from_complex_adjacency_matrix": [[284, "rustworkx-pygraph-from-complex-adjacency-matrix"]], "rustworkx.PyGraph.get_all_edge_data": [[285, "rustworkx-pygraph-get-all-edge-data"]], "rustworkx.PyGraph.get_edge_data": [[286, "rustworkx-pygraph-get-edge-data"]], "rustworkx.PyGraph.get_edge_data_by_index": [[287, "rustworkx-pygraph-get-edge-data-by-index"]], "rustworkx.PyGraph.get_edge_endpoints_by_index": [[288, "rustworkx-pygraph-get-edge-endpoints-by-index"]], "rustworkx.PyGraph.get_node_data": [[289, "rustworkx-pygraph-get-node-data"]], "rustworkx.PyGraph.has_edge": [[290, "rustworkx-pygraph-has-edge"]], "rustworkx.PyGraph.has_node": [[291, "rustworkx-pygraph-has-node"]], "rustworkx.PyGraph.has_parallel_edges": [[292, "rustworkx-pygraph-has-parallel-edges"]], "rustworkx.PyGraph.in_edge_indices": [[293, "rustworkx-pygraph-in-edge-indices"]], "rustworkx.PyGraph.in_edges": [[294, "rustworkx-pygraph-in-edges"]], "rustworkx.PyGraph.incident_edge_index_map": [[295, "rustworkx-pygraph-incident-edge-index-map"]], "rustworkx.PyGraph.incident_edges": [[296, "rustworkx-pygraph-incident-edges"]], "rustworkx.PyGraph.neighbors": [[297, "rustworkx-pygraph-neighbors"]], "rustworkx.PyGraph.node_indexes": [[298, "rustworkx-pygraph-node-indexes"]], "rustworkx.PyGraph.node_indices": [[299, "rustworkx-pygraph-node-indices"]], "rustworkx.PyGraph.nodes": [[300, "rustworkx-pygraph-nodes"]], "rustworkx.PyGraph.num_edges": [[301, "rustworkx-pygraph-num-edges"]], "rustworkx.PyGraph.num_nodes": [[302, "rustworkx-pygraph-num-nodes"]], "rustworkx.PyGraph.out_edge_indices": [[303, "rustworkx-pygraph-out-edge-indices"]], "rustworkx.PyGraph.out_edges": [[304, "rustworkx-pygraph-out-edges"]], "rustworkx.PyGraph.read_edge_list": [[305, "rustworkx-pygraph-read-edge-list"]], "rustworkx.PyGraph.remove_edge": [[306, "rustworkx-pygraph-remove-edge"]], "rustworkx.PyGraph.remove_edge_from_index": [[307, "rustworkx-pygraph-remove-edge-from-index"]], "rustworkx.PyGraph.remove_edges_from": [[308, "rustworkx-pygraph-remove-edges-from"]], "rustworkx.PyGraph.remove_node": [[309, "rustworkx-pygraph-remove-node"]], "rustworkx.PyGraph.remove_nodes_from": [[310, "rustworkx-pygraph-remove-nodes-from"]], "rustworkx.PyGraph.subgraph": [[311, "rustworkx-pygraph-subgraph"]], "rustworkx.PyGraph.substitute_node_with_subgraph": [[312, "rustworkx-pygraph-substitute-node-with-subgraph"]], "rustworkx.PyGraph.to_directed": [[313, "rustworkx-pygraph-to-directed"]], "rustworkx.PyGraph.to_dot": [[314, "rustworkx-pygraph-to-dot"]], "rustworkx.PyGraph.update_edge": [[315, "rustworkx-pygraph-update-edge"]], "rustworkx.PyGraph.update_edge_by_index": [[316, "rustworkx-pygraph-update-edge-by-index"]], "rustworkx.PyGraph.weighted_edge_list": [[317, "rustworkx-pygraph-weighted-edge-list"]], "rustworkx.PyGraph.write_edge_list": [[318, "rustworkx-pygraph-write-edge-list"]], "RelationalCoarsestPartition": [[319, "relationalcoarsestpartition"]], "TopologicalSorter": [[320, "topologicalsorter"]], "rustworkx.TopologicalSorter.done": [[321, "rustworkx-topologicalsorter-done"]], "rustworkx.TopologicalSorter.get_ready": [[322, "rustworkx-topologicalsorter-get-ready"]], "rustworkx.TopologicalSorter.is_active": [[323, "rustworkx-topologicalsorter-is-active"]], "WeightedEdgeList": [[324, "weightededgelist"]], "rustworkx.adjacency_matrix": [[325, "rustworkx-adjacency-matrix"]], "rustworkx.all_pairs_all_simple_paths": [[326, "rustworkx-all-pairs-all-simple-paths"]], "rustworkx.all_pairs_bellman_ford_path_lengths": [[327, "rustworkx-all-pairs-bellman-ford-path-lengths"]], "rustworkx.all_pairs_bellman_ford_shortest_paths": [[328, "rustworkx-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.all_pairs_dijkstra_path_lengths": [[329, "rustworkx-all-pairs-dijkstra-path-lengths"]], "rustworkx.all_pairs_dijkstra_shortest_paths": [[330, "rustworkx-all-pairs-dijkstra-shortest-paths"]], "rustworkx.all_shortest_paths": [[331, "rustworkx-all-shortest-paths"]], "rustworkx.all_simple_paths": [[332, "rustworkx-all-simple-paths"]], "rustworkx.ancestors": [[333, "rustworkx-ancestors"]], "rustworkx.articulation_points": [[334, "rustworkx-articulation-points"]], "rustworkx.astar_shortest_path": [[335, "rustworkx-astar-shortest-path"]], "rustworkx.barabasi_albert_graph": [[336, "rustworkx-barabasi-albert-graph"]], "rustworkx.bellman_ford_shortest_path_lengths": [[337, "rustworkx-bellman-ford-shortest-path-lengths"]], "rustworkx.bellman_ford_shortest_paths": [[338, "rustworkx-bellman-ford-shortest-paths"]], "rustworkx.betweenness_centrality": [[339, "rustworkx-betweenness-centrality"]], "See Also": [[339, "see-also"], [375, "see-also"], [389, "see-also"], [423, "see-also"], [468, "see-also"], [483, "see-also"]], "rustworkx.bfs_predecessors": [[340, "rustworkx-bfs-predecessors"]], "rustworkx.bfs_search": [[341, "rustworkx-bfs-search"]], "rustworkx.bfs_successors": [[342, "rustworkx-bfs-successors"]], "rustworkx.biconnected_components": [[343, "rustworkx-biconnected-components"]], "rustworkx.bipartite_layout": [[344, "rustworkx-bipartite-layout"]], "rustworkx.bridges": [[345, "rustworkx-bridges"]], "rustworkx.cartesian_product": [[346, "rustworkx-cartesian-product"]], "rustworkx.chain_decomposition": [[347, "rustworkx-chain-decomposition"]], "rustworkx.circular_layout": [[348, "rustworkx-circular-layout"]], "rustworkx.closeness_centrality": [[349, "rustworkx-closeness-centrality"]], "rustworkx.collect_bicolor_runs": [[350, "rustworkx-collect-bicolor-runs"]], "rustworkx.collect_runs": [[351, "rustworkx-collect-runs"]], "rustworkx.complement": [[352, "rustworkx-complement"]], "rustworkx.connected_components": [[353, "rustworkx-connected-components"]], "rustworkx.connected_subgraphs": [[354, "rustworkx-connected-subgraphs"]], "rustworkx.core_number": [[355, "rustworkx-core-number"]], "rustworkx.cycle_basis": [[356, "rustworkx-cycle-basis"]], "rustworkx.dag_longest_path": [[357, "rustworkx-dag-longest-path"]], "rustworkx.dag_longest_path_length": [[358, "rustworkx-dag-longest-path-length"]], "rustworkx.dag_weighted_longest_path": [[359, "rustworkx-dag-weighted-longest-path"]], "rustworkx.dag_weighted_longest_path_length": [[360, "rustworkx-dag-weighted-longest-path-length"]], "rustworkx.degree_centrality": [[361, "rustworkx-degree-centrality"]], "rustworkx.descendants": [[362, "rustworkx-descendants"]], "rustworkx.dfs_edges": [[363, "rustworkx-dfs-edges"]], "rustworkx.dfs_search": [[364, "rustworkx-dfs-search"]], "rustworkx.digraph_adjacency_matrix": [[365, "rustworkx-digraph-adjacency-matrix"]], "rustworkx.digraph_all_pairs_all_simple_paths": [[366, "rustworkx-digraph-all-pairs-all-simple-paths"]], "rustworkx.digraph_all_pairs_bellman_ford_path_lengths": [[367, "rustworkx-digraph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths": [[368, "rustworkx-digraph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.digraph_all_pairs_dijkstra_path_lengths": [[369, "rustworkx-digraph-all-pairs-dijkstra-path-lengths"]], "rustworkx.digraph_all_pairs_dijkstra_shortest_paths": [[370, "rustworkx-digraph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.digraph_all_shortest_paths": [[371, "rustworkx-digraph-all-shortest-paths"]], "rustworkx.digraph_all_simple_paths": [[372, "rustworkx-digraph-all-simple-paths"]], "rustworkx.digraph_astar_shortest_path": [[373, "rustworkx-digraph-astar-shortest-path"]], "rustworkx.digraph_bellman_ford_shortest_path_lengths": [[374, "rustworkx-digraph-bellman-ford-shortest-path-lengths"]], "rustworkx.digraph_betweenness_centrality": [[375, "rustworkx-digraph-betweenness-centrality"]], "rustworkx.digraph_bfs_search": [[376, "rustworkx-digraph-bfs-search"]], "rustworkx.digraph_bipartite_layout": [[377, "rustworkx-digraph-bipartite-layout"]], "rustworkx.digraph_cartesian_product": [[378, "rustworkx-digraph-cartesian-product"]], "rustworkx.digraph_circular_layout": [[379, "rustworkx-digraph-circular-layout"]], "rustworkx.digraph_closeness_centrality": [[380, "rustworkx-digraph-closeness-centrality"]], "rustworkx.digraph_complement": [[381, "rustworkx-digraph-complement"]], "rustworkx.digraph_core_number": [[382, "rustworkx-digraph-core-number"]], "rustworkx.digraph_dfs_edges": [[383, "rustworkx-digraph-dfs-edges"]], "rustworkx.digraph_dfs_search": [[384, "rustworkx-digraph-dfs-search"]], "rustworkx.digraph_dijkstra_search": [[385, "rustworkx-digraph-dijkstra-search"]], "rustworkx.digraph_dijkstra_shortest_path_lengths": [[386, "rustworkx-digraph-dijkstra-shortest-path-lengths"]], "rustworkx.digraph_dijkstra_shortest_paths": [[387, "rustworkx-digraph-dijkstra-shortest-paths"]], "rustworkx.digraph_distance_matrix": [[388, "rustworkx-digraph-distance-matrix"]], "rustworkx.digraph_edge_betweenness_centrality": [[389, "rustworkx-digraph-edge-betweenness-centrality"]], "rustworkx.digraph_eigenvector_centrality": [[390, "rustworkx-digraph-eigenvector-centrality"]], "rustworkx.digraph_find_cycle": [[391, "rustworkx-digraph-find-cycle"]], "rustworkx.digraph_floyd_warshall": [[392, "rustworkx-digraph-floyd-warshall"]], "rustworkx.digraph_floyd_warshall_numpy": [[393, "rustworkx-digraph-floyd-warshall-numpy"]], "rustworkx.digraph_floyd_warshall_successor_and_distance": [[394, "rustworkx-digraph-floyd-warshall-successor-and-distance"]], "rustworkx.digraph_is_isomorphic": [[395, "rustworkx-digraph-is-isomorphic"]], "rustworkx.digraph_is_subgraph_isomorphic": [[396, "rustworkx-digraph-is-subgraph-isomorphic"]], "rustworkx.digraph_k_shortest_path_lengths": [[397, "rustworkx-digraph-k-shortest-path-lengths"]], "rustworkx.digraph_katz_centrality": [[398, "rustworkx-digraph-katz-centrality"]], "rustworkx.digraph_longest_simple_path": [[399, "rustworkx-digraph-longest-simple-path"]], "rustworkx.digraph_maximum_bisimulation": [[400, "rustworkx-digraph-maximum-bisimulation"]], "rustworkx.digraph_newman_weighted_closeness_centrality": [[401, "rustworkx-digraph-newman-weighted-closeness-centrality"]], "rustworkx.digraph_node_link_json": [[402, "rustworkx-digraph-node-link-json"]], "rustworkx.digraph_num_shortest_paths_unweighted": [[403, "rustworkx-digraph-num-shortest-paths-unweighted"]], "rustworkx.digraph_random_layout": [[404, "rustworkx-digraph-random-layout"]], "rustworkx.digraph_shell_layout": [[405, "rustworkx-digraph-shell-layout"]], "rustworkx.digraph_spiral_layout": [[406, "rustworkx-digraph-spiral-layout"]], "rustworkx.digraph_spring_layout": [[407, "rustworkx-digraph-spring-layout"]], "rustworkx.digraph_tensor_product": [[408, "rustworkx-digraph-tensor-product"]], "rustworkx.digraph_transitivity": [[409, "rustworkx-digraph-transitivity"]], "rustworkx.digraph_union": [[410, "rustworkx-digraph-union"]], "rustworkx.digraph_unweighted_average_shortest_path_length": [[411, "rustworkx-digraph-unweighted-average-shortest-path-length"]], "rustworkx.digraph_vf2_mapping": [[412, "rustworkx-digraph-vf2-mapping"]], "rustworkx.dijkstra_search": [[413, "rustworkx-dijkstra-search"]], "rustworkx.dijkstra_shortest_path_lengths": [[414, "rustworkx-dijkstra-shortest-path-lengths"]], "rustworkx.dijkstra_shortest_paths": [[415, "rustworkx-dijkstra-shortest-paths"]], "rustworkx.directed_barabasi_albert_graph": [[416, "rustworkx-directed-barabasi-albert-graph"]], "rustworkx.directed_gnm_random_graph": [[417, "rustworkx-directed-gnm-random-graph"]], "rustworkx.directed_gnp_random_graph": [[418, "rustworkx-directed-gnp-random-graph"]], "rustworkx.directed_random_bipartite_graph": [[419, "rustworkx-directed-random-bipartite-graph"]], "rustworkx.directed_sbm_random_graph": [[420, "rustworkx-directed-sbm-random-graph"]], "rustworkx.distance_matrix": [[421, "rustworkx-distance-matrix"]], "rustworkx.dominance_frontiers": [[422, "rustworkx-dominance-frontiers"]], "rustworkx.edge_betweenness_centrality": [[423, "rustworkx-edge-betweenness-centrality"]], "rustworkx.eigenvector_centrality": [[424, "rustworkx-eigenvector-centrality"]], "rustworkx.find_negative_cycle": [[425, "rustworkx-find-negative-cycle"]], "rustworkx.floyd_warshall": [[426, "rustworkx-floyd-warshall"]], "rustworkx.floyd_warshall_numpy": [[427, "rustworkx-floyd-warshall-numpy"]], "rustworkx.floyd_warshall_successor_and_distance": [[428, "rustworkx-floyd-warshall-successor-and-distance"]], "rustworkx.from_node_link_json_file": [[429, "rustworkx-from-node-link-json-file"]], "rustworkx.generators.barbell_graph": [[430, "rustworkx-generators-barbell-graph"]], "rustworkx.generators.binomial_tree_graph": [[431, "rustworkx-generators-binomial-tree-graph"]], "rustworkx.generators.complete_graph": [[432, "rustworkx-generators-complete-graph"]], "rustworkx.generators.cycle_graph": [[433, "rustworkx-generators-cycle-graph"]], "rustworkx.generators.directed_binomial_tree_graph": [[434, "rustworkx-generators-directed-binomial-tree-graph"]], "rustworkx.generators.directed_complete_graph": [[435, "rustworkx-generators-directed-complete-graph"]], "rustworkx.generators.directed_cycle_graph": [[436, "rustworkx-generators-directed-cycle-graph"]], "rustworkx.generators.directed_empty_graph": [[437, "rustworkx-generators-directed-empty-graph"]], "rustworkx.generators.directed_grid_graph": [[438, "rustworkx-generators-directed-grid-graph"]], "rustworkx.generators.directed_heavy_hex_graph": [[439, "rustworkx-generators-directed-heavy-hex-graph"]], "rustworkx.generators.directed_heavy_square_graph": [[440, "rustworkx-generators-directed-heavy-square-graph"]], "rustworkx.generators.directed_hexagonal_lattice_graph": [[441, "rustworkx-generators-directed-hexagonal-lattice-graph"]], "rustworkx.generators.directed_mesh_graph": [[442, "rustworkx-generators-directed-mesh-graph"]], "rustworkx.generators.directed_path_graph": [[443, "rustworkx-generators-directed-path-graph"]], "rustworkx.generators.directed_star_graph": [[444, "rustworkx-generators-directed-star-graph"]], "rustworkx.generators.dorogovtsev_goltsev_mendes_graph": [[445, "rustworkx-generators-dorogovtsev-goltsev-mendes-graph"]], "rustworkx.generators.empty_graph": [[446, "rustworkx-generators-empty-graph"]], "rustworkx.generators.full_rary_tree": [[447, "rustworkx-generators-full-rary-tree"]], "rustworkx.generators.generalized_petersen_graph": [[448, "rustworkx-generators-generalized-petersen-graph"]], "rustworkx.generators.grid_graph": [[449, "rustworkx-generators-grid-graph"]], "rustworkx.generators.heavy_hex_graph": [[450, "rustworkx-generators-heavy-hex-graph"]], "rustworkx.generators.heavy_square_graph": [[451, "rustworkx-generators-heavy-square-graph"]], "rustworkx.generators.hexagonal_lattice_graph": [[452, "rustworkx-generators-hexagonal-lattice-graph"]], "rustworkx.generators.karate_club_graph": [[453, "rustworkx-generators-karate-club-graph"]], "rustworkx.generators.lollipop_graph": [[454, "rustworkx-generators-lollipop-graph"]], "rustworkx.generators.mesh_graph": [[455, "rustworkx-generators-mesh-graph"]], "rustworkx.generators.path_graph": [[456, "rustworkx-generators-path-graph"]], "rustworkx.generators.star_graph": [[457, "rustworkx-generators-star-graph"]], "rustworkx.graph_adjacency_matrix": [[458, "rustworkx-graph-adjacency-matrix"]], "rustworkx.graph_all_pairs_all_simple_paths": [[459, "rustworkx-graph-all-pairs-all-simple-paths"]], "rustworkx.graph_all_pairs_bellman_ford_path_lengths": [[460, "rustworkx-graph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.graph_all_pairs_bellman_ford_shortest_paths": [[461, "rustworkx-graph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.graph_all_pairs_dijkstra_path_lengths": [[462, "rustworkx-graph-all-pairs-dijkstra-path-lengths"]], "rustworkx.graph_all_pairs_dijkstra_shortest_paths": [[463, "rustworkx-graph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.graph_all_shortest_paths": [[464, "rustworkx-graph-all-shortest-paths"]], "rustworkx.graph_all_simple_paths": [[465, "rustworkx-graph-all-simple-paths"]], "rustworkx.graph_astar_shortest_path": [[466, "rustworkx-graph-astar-shortest-path"]], "rustworkx.graph_bellman_ford_shortest_path_lengths": [[467, "rustworkx-graph-bellman-ford-shortest-path-lengths"]], "rustworkx.graph_betweenness_centrality": [[468, "rustworkx-graph-betweenness-centrality"]], "rustworkx.graph_bfs_search": [[469, "rustworkx-graph-bfs-search"]], "rustworkx.graph_bipartite_edge_color": [[470, "rustworkx-graph-bipartite-edge-color"]], "rustworkx.graph_bipartite_layout": [[471, "rustworkx-graph-bipartite-layout"]], "rustworkx.graph_cartesian_product": [[472, "rustworkx-graph-cartesian-product"]], "rustworkx.graph_circular_layout": [[473, "rustworkx-graph-circular-layout"]], "rustworkx.graph_closeness_centrality": [[474, "rustworkx-graph-closeness-centrality"]], "rustworkx.graph_complement": [[475, "rustworkx-graph-complement"]], "rustworkx.graph_core_number": [[476, "rustworkx-graph-core-number"]], "rustworkx.graph_dfs_edges": [[477, "rustworkx-graph-dfs-edges"]], "rustworkx.graph_dfs_search": [[478, "rustworkx-graph-dfs-search"]], "rustworkx.graph_dijkstra_search": [[479, "rustworkx-graph-dijkstra-search"]], "rustworkx.graph_dijkstra_shortest_path_lengths": [[480, "rustworkx-graph-dijkstra-shortest-path-lengths"]], "rustworkx.graph_dijkstra_shortest_paths": [[481, "rustworkx-graph-dijkstra-shortest-paths"]], "rustworkx.graph_distance_matrix": [[482, "rustworkx-graph-distance-matrix"]], "rustworkx.graph_edge_betweenness_centrality": [[483, "rustworkx-graph-edge-betweenness-centrality"]], "rustworkx.graph_eigenvector_centrality": [[484, "rustworkx-graph-eigenvector-centrality"]], "rustworkx.graph_floyd_warshall": [[485, "rustworkx-graph-floyd-warshall"]], "rustworkx.graph_floyd_warshall_numpy": [[486, "rustworkx-graph-floyd-warshall-numpy"]], "rustworkx.graph_floyd_warshall_successor_and_distance": [[487, "rustworkx-graph-floyd-warshall-successor-and-distance"]], "rustworkx.graph_greedy_color": [[488, "rustworkx-graph-greedy-color"]], "rustworkx.graph_greedy_edge_color": [[489, "rustworkx-graph-greedy-edge-color"]], "rustworkx.graph_is_isomorphic": [[490, "rustworkx-graph-is-isomorphic"]], "rustworkx.graph_is_subgraph_isomorphic": [[491, "rustworkx-graph-is-subgraph-isomorphic"]], "rustworkx.graph_k_shortest_path_lengths": [[492, "rustworkx-graph-k-shortest-path-lengths"]], "rustworkx.graph_katz_centrality": [[493, "rustworkx-graph-katz-centrality"]], "rustworkx.graph_line_graph": [[494, "rustworkx-graph-line-graph"]], "rustworkx.graph_longest_simple_path": [[495, "rustworkx-graph-longest-simple-path"]], "rustworkx.graph_misra_gries_edge_color": [[496, "rustworkx-graph-misra-gries-edge-color"]], "rustworkx.graph_newman_weighted_closeness_centrality": [[497, "rustworkx-graph-newman-weighted-closeness-centrality"]], "rustworkx.graph_node_link_json": [[498, "rustworkx-graph-node-link-json"]], "rustworkx.graph_num_shortest_paths_unweighted": [[499, "rustworkx-graph-num-shortest-paths-unweighted"]], "rustworkx.graph_random_layout": [[500, "rustworkx-graph-random-layout"]], "rustworkx.graph_shell_layout": [[501, "rustworkx-graph-shell-layout"]], "rustworkx.graph_spiral_layout": [[502, "rustworkx-graph-spiral-layout"]], "rustworkx.graph_spring_layout": [[503, "rustworkx-graph-spring-layout"]], "rustworkx.graph_tensor_product": [[504, "rustworkx-graph-tensor-product"]], "rustworkx.graph_token_swapper": [[505, "rustworkx-graph-token-swapper"]], "rustworkx.graph_transitivity": [[506, "rustworkx-graph-transitivity"]], "rustworkx.graph_union": [[507, "rustworkx-graph-union"]], "rustworkx.graph_unweighted_average_shortest_path_length": [[508, "rustworkx-graph-unweighted-average-shortest-path-length"]], "rustworkx.graph_vf2_mapping": [[509, "rustworkx-graph-vf2-mapping"]], "rustworkx.has_path": [[510, "rustworkx-has-path"]], "rustworkx.hits": [[511, "rustworkx-hits"]], "rustworkx.hyperbolic_random_graph": [[512, "rustworkx-hyperbolic-random-graph"]], "rustworkx.immediate_dominators": [[513, "rustworkx-immediate-dominators"]], "rustworkx.in_degree_centrality": [[514, "rustworkx-in-degree-centrality"]], "rustworkx.is_bipartite": [[515, "rustworkx-is-bipartite"]], "rustworkx.is_connected": [[516, "rustworkx-is-connected"]], "rustworkx.is_directed_acyclic_graph": [[517, "rustworkx-is-directed-acyclic-graph"]], "rustworkx.is_isomorphic": [[518, "rustworkx-is-isomorphic"]], "rustworkx.is_isomorphic_node_match": [[519, "rustworkx-is-isomorphic-node-match"]], "rustworkx.is_matching": [[520, "rustworkx-is-matching"]], "rustworkx.is_maximal_matching": [[521, "rustworkx-is-maximal-matching"]], "rustworkx.is_planar": [[522, "rustworkx-is-planar"]], "rustworkx.is_strongly_connected": [[523, "rustworkx-is-strongly-connected"]], "rustworkx.is_subgraph_isomorphic": [[524, "rustworkx-is-subgraph-isomorphic"]], "rustworkx.is_weakly_connected": [[525, "rustworkx-is-weakly-connected"]], "rustworkx.isolates": [[526, "rustworkx-isolates"]], "rustworkx.k_shortest_path_lengths": [[527, "rustworkx-k-shortest-path-lengths"]], "rustworkx.katz_centrality": [[528, "rustworkx-katz-centrality"]], "rustworkx.layers": [[529, "rustworkx-layers"]], "rustworkx.lexicographical_topological_sort": [[530, "rustworkx-lexicographical-topological-sort"]], "rustworkx.local_complement": [[531, "rustworkx-local-complement"]], "rustworkx.longest_simple_path": [[532, "rustworkx-longest-simple-path"]], "rustworkx.max_weight_matching": [[533, "rustworkx-max-weight-matching"]], "rustworkx.metric_closure": [[534, "rustworkx-metric-closure"]], "rustworkx.minimum_spanning_edges": [[535, "rustworkx-minimum-spanning-edges"]], "rustworkx.minimum_spanning_tree": [[536, "rustworkx-minimum-spanning-tree"]], "rustworkx.negative_edge_cycle": [[537, "rustworkx-negative-edge-cycle"]], "rustworkx.networkx_converter": [[538, "rustworkx-networkx-converter"]], "rustworkx.newman_weighted_closeness_centrality": [[539, "rustworkx-newman-weighted-closeness-centrality"]], "rustworkx.node_connected_component": [[540, "rustworkx-node-connected-component"]], "rustworkx.node_link_json": [[541, "rustworkx-node-link-json"]], "rustworkx.num_shortest_paths_unweighted": [[542, "rustworkx-num-shortest-paths-unweighted"]], "rustworkx.number_connected_components": [[543, "rustworkx-number-connected-components"]], "rustworkx.number_strongly_connected_components": [[544, "rustworkx-number-strongly-connected-components"]], "rustworkx.number_weakly_connected_components": [[545, "rustworkx-number-weakly-connected-components"]], "rustworkx.out_degree_centrality": [[546, "rustworkx-out-degree-centrality"]], "rustworkx.pagerank": [[547, "rustworkx-pagerank"]], "rustworkx.parse_node_link_json": [[548, "rustworkx-parse-node-link-json"]], "rustworkx.random_geometric_graph": [[549, "rustworkx-random-geometric-graph"]], "rustworkx.random_layout": [[550, "rustworkx-random-layout"]], "rustworkx.read_graphml": [[551, "rustworkx-read-graphml"]], "rustworkx.shell_layout": [[552, "rustworkx-shell-layout"]], "rustworkx.simple_cycles": [[553, "rustworkx-simple-cycles"]], "rustworkx.spiral_layout": [[554, "rustworkx-spiral-layout"]], "rustworkx.spring_layout": [[555, "rustworkx-spring-layout"]], "rustworkx.steiner_tree": [[556, "rustworkx-steiner-tree"]], "rustworkx.stoer_wagner_min_cut": [[557, "rustworkx-stoer-wagner-min-cut"]], "rustworkx.strongly_connected_components": [[558, "rustworkx-strongly-connected-components"]], "rustworkx.topological_generations": [[559, "rustworkx-topological-generations"]], "rustworkx.topological_sort": [[560, "rustworkx-topological-sort"]], "rustworkx.transitive_reduction": [[561, "rustworkx-transitive-reduction"]], "rustworkx.transitivity": [[562, "rustworkx-transitivity"]], "rustworkx.two_color": [[563, "rustworkx-two-color"]], "rustworkx.undirected_gnm_random_graph": [[564, "rustworkx-undirected-gnm-random-graph"]], "rustworkx.undirected_gnp_random_graph": [[565, "rustworkx-undirected-gnp-random-graph"]], "rustworkx.undirected_random_bipartite_graph": [[566, "rustworkx-undirected-random-bipartite-graph"]], "rustworkx.undirected_sbm_random_graph": [[567, "rustworkx-undirected-sbm-random-graph"]], "rustworkx.union": [[568, "rustworkx-union"]], "rustworkx.unweighted_average_shortest_path_length": [[569, "rustworkx-unweighted-average-shortest-path-length"]], "rustworkx.vf2_mapping": [[570, "rustworkx-vf2-mapping"]], "BFSVisitor": [[571, "bfsvisitor"]], "rustworkx.visit.BFSVisitor.black_target_edge": [[572, "rustworkx-visit-bfsvisitor-black-target-edge"]], "rustworkx.visit.BFSVisitor.discover_vertex": [[573, "rustworkx-visit-bfsvisitor-discover-vertex"]], "rustworkx.visit.BFSVisitor.finish_vertex": [[574, "rustworkx-visit-bfsvisitor-finish-vertex"]], "rustworkx.visit.BFSVisitor.gray_target_edge": [[575, "rustworkx-visit-bfsvisitor-gray-target-edge"]], "rustworkx.visit.BFSVisitor.non_tree_edge": [[576, "rustworkx-visit-bfsvisitor-non-tree-edge"]], "rustworkx.visit.BFSVisitor.tree_edge": [[577, "rustworkx-visit-bfsvisitor-tree-edge"]], "DFSVisitor": [[578, "dfsvisitor"]], "rustworkx.visit.DFSVisitor.back_edge": [[579, "rustworkx-visit-dfsvisitor-back-edge"]], "rustworkx.visit.DFSVisitor.discover_vertex": [[580, "rustworkx-visit-dfsvisitor-discover-vertex"]], "rustworkx.visit.DFSVisitor.finish_vertex": [[581, "rustworkx-visit-dfsvisitor-finish-vertex"]], "rustworkx.visit.DFSVisitor.forward_or_cross_edge": [[582, "rustworkx-visit-dfsvisitor-forward-or-cross-edge"]], "rustworkx.visit.DFSVisitor.tree_edge": [[583, "rustworkx-visit-dfsvisitor-tree-edge"]], "DijkstraVisitor": [[584, "dijkstravisitor"]], "rustworkx.visit.DijkstraVisitor.discover_vertex": [[585, "rustworkx-visit-dijkstravisitor-discover-vertex"]], "rustworkx.visit.DijkstraVisitor.edge_not_relaxed": [[586, "rustworkx-visit-dijkstravisitor-edge-not-relaxed"]], "rustworkx.visit.DijkstraVisitor.edge_relaxed": [[587, "rustworkx-visit-dijkstravisitor-edge-relaxed"]], "rustworkx.visit.DijkstraVisitor.examine_edge": [[588, "rustworkx-visit-dijkstravisitor-examine-edge"]], "rustworkx.visit.DijkstraVisitor.finish_vertex": [[589, "rustworkx-visit-dijkstravisitor-finish-vertex"]], "rustworkx.visit.PruneSearch": [[590, "rustworkx-visit-prunesearch"]], "rustworkx.visit.StopSearch": [[591, "rustworkx-visit-stopsearch"]], "rustworkx.visualization.graphviz_draw": [[592, "rustworkx-visualization-graphviz-draw"]], "rustworkx.visualization.mpl_draw": [[593, "rustworkx-visualization-mpl-draw"]], "rustworkx.weakly_connected_components": [[594, "rustworkx-weakly-connected-components"]], "Rustworkx Comparison Benchmarks With Other Libraries": [[595, "rustworkx-comparison-benchmarks-with-other-libraries"]], "Graph Creation": [[595, "graph-creation"]], "Single Source Shortest Path": [[595, "single-source-shortest-path"]], "All-Pairs Shortest Path": [[595, "all-pairs-shortest-path"]], "Subgraph Isomorphism": [[595, "subgraph-isomorphism"]], "Citation": [[595, "citation"]], "rustworkx Documentation": [[596, "rustworkx-documentation"]], "Project history": [[596, "project-history"]], "Getting Started": [[597, "getting-started"]], "Installing Rustworkx": [[597, "installing-rustworkx"]], "Installing on a platform without precompiled binaries": [[597, "installing-on-a-platform-without-precompiled-binaries"]], "Platform Support": [[597, "platform-support"], [597, "id7"]], "Tier 1": [[597, "tier-1"]], "Tier 2": [[597, "tier-2"]], "Tier 3": [[597, "tier-3"]], "Tier 4": [[597, "tier-4"]], "Using rustworkx": [[597, "using-rustworkx"]], "rustworkx for NetworkX users": [[598, "rustworkx-for-networkx-users"]], "Some Key Differences": [[598, "some-key-differences"]], "Graph Data and Attributes": [[598, "graph-data-and-attributes"]], "Nodes": [[598, "nodes"], [603, "nodes"]], "Edges": [[598, "edges"], [603, "edges"]], "Attributes": [[598, "attributes"]], "Examining elements of a graph": [[598, "examining-elements-of-a-graph"], [603, "examining-elements-of-a-graph"]], "API Equivalents": [[598, "api-equivalents"]], "Class Constructors": [[598, "class-constructors"]], "Graph Modifiers": [[598, "graph-modifiers"]], "Matrix Converter Functions": [[598, "matrix-converter-functions"]], "Visualization Functions": [[598, "visualization-functions"]], "Matplotlib Drawers": [[598, "matplotlib-drawers"]], "Converting from a networkx graph": [[598, "converting-from-a-networkx-graph"]], "Functionality Gaps": [[598, "functionality-gaps"]], "0.16.0-18": [[599, "relnotes-0-16-0-18"]], "New Features": [[599, "new-features"], [599, "relnotes-0-16-0-new-features"], [599, "relnotes-0-15-0-new-features"], [599, "relnotes-0-14-0-new-features"], [599, "relnotes-0-13-0-new-features"], [599, "relnotes-0-12-0-new-features"], [599, "relnotes-0-11-0-new-features"], [599, "relnotes-0-10-2-new-features"], [599, "relnotes-0-10-0-new-features"], [599, "relnotes-0-9-0-new-features"], [599, "relnotes-0-8-0-new-features"], [599, "id60"], [599, "id63"], [599, "id67"], [599, "id70"]], "Upgrade Notes": [[599, "upgrade-notes"], [599, "relnotes-0-16-0-upgrade-notes"], [599, "relnotes-0-15-0-upgrade-notes"], [599, "relnotes-0-14-0-upgrade-notes"], [599, "relnotes-0-13-0-upgrade-notes"], [599, "relnotes-0-12-0-upgrade-notes"], [599, "relnotes-0-11-0-upgrade-notes"], [599, "relnotes-0-10-0-upgrade-notes"], [599, "relnotes-0-9-0-upgrade-notes"], [599, "relnotes-0-8-0-upgrade-notes"], [599, "id61"], [599, "id64"], [599, "id71"]], "Bug Fixes": [[599, "bug-fixes"], [599, "relnotes-0-16-0-bug-fixes"], [599, "relnotes-0-15-1-bug-fixes"], [599, "relnotes-0-15-0-bug-fixes"], [599, "relnotes-0-14-0-bug-fixes"], [599, "relnotes-0-13-0-bug-fixes"], [599, "relnotes-0-12-0-bug-fixes"], [599, "relnotes-0-11-0-bug-fixes"], [599, "relnotes-0-10-2-bug-fixes"], [599, "relnotes-0-10-0-bug-fixes"], [599, "relnotes-0-9-0-bug-fixes"], [599, "relnotes-0-8-0-bug-fixes"]], "0.16.0": [[599, "relnotes-0-16-0"]], "Prelude": [[599, "prelude"], [599, "relnotes-0-15-1-prelude"], [599, "relnotes-0-15-0-prelude"], [599, "relnotes-0-14-0-prelude"], [599, "relnotes-0-13-0-prelude"], [599, "relnotes-0-12-0-prelude"], [599, "relnotes-0-11-0-prelude"], [599, "relnotes-0-10-2-prelude"], [599, "relnotes-0-10-1-prelude"], [599, "relnotes-0-10-0-prelude"], [599, "relnotes-0-9-0-prelude"], [599, "relnotes-0-8-0-prelude"]], "0.15.1": [[599, "relnotes-0-15-1"]], "0.15.0": [[599, "relnotes-0-15-0"]], "Other Notes": [[599, "other-notes"], [599, "relnotes-0-14-0-other-notes"]], "0.14.0": [[599, "relnotes-0-14-0"]], "Deprecation Notes": [[599, "deprecation-notes"]], "0.13.0": [[599, "relnotes-0-13-0"]], "0.12.0": [[599, "relnotes-0-12-0"]], "0.11.0": [[599, "relnotes-0-11-0"]], "0.10.2": [[599, "relnotes-0-10-2"]], "0.10.1": [[599, "relnotes-0-10-1"]], "0.10.0": [[599, "relnotes-0-10-0"]], "0.9.0": [[599, "relnotes-0-9-0"]], "0.8.0": [[599, "relnotes-0-8-0"]], "0.7.1": [[599, "id58"]], "0.7.0": [[599, "id59"]], "Fixes": [[599, "fixes"], [599, "id65"], [599, "id68"], [599, "id72"]], "0.6.0": [[599, "id62"]], "0.5.0": [[599, "id66"]], "0.4.0": [[599, "id69"]], "Working with Betweenness Centrality": [[600, "working-with-betweenness-centrality"]], "Generate a Graph": [[600, "generate-a-graph"]], "Calculate the Betweenness Centrality": [[600, "calculate-the-betweenness-centrality"]], "Visualize the Betweenness Centrality": [[600, "visualize-the-betweenness-centrality"]], "Directed Acyclic Graphs": [[601, "directed-acyclic-graphs"], [601, "id1"]], "Directed Graph": [[601, "directed-graph"]], "Applications of DAGs": [[601, "applications-of-dags"]], "Task Scheduling": [[601, "task-scheduling"]], "Qiskit\u2019s Compiler": [[601, "qiskit-s-compiler"]], "rustworkx Tutorials and Guides": [[602, "rustworkx-tutorials-and-guides"]], "Introduction to rustworkx": [[603, "introduction-to-rustworkx"]], "Installing rustworkx": [[603, "installing-rustworkx"]], "How to import rustworkx": [[603, "how-to-import-rustworkx"]], "Creating a Graph": [[603, "creating-a-graph"]], "Removing elements from a graph": [[603, "removing-elements-from-a-graph"]], "Modifying elements of a graph": [[603, "modifying-elements-of-a-graph"]], "What to use for node and edge data payload": [[603, "what-to-use-for-node-and-edge-data-payload"]], "Accessing edges and neighbors": [[603, "accessing-edges-and-neighbors"]], "Graph Attributes": [[603, "graph-attributes"]], "Directed Graphs": [[603, "directed-graphs"]], "Multigraphs": [[603, "multigraphs"]], "Graph Generators and operations": [[603, "graph-generators-and-operations"]], "Analyzing graphs": [[603, "analyzing-graphs"]], "Drawing graphs": [[603, "drawing-graphs"]], "Visualization": [[604, "visualization"]], "Visualization API": [[604, "visualization-api"]]}, "indexentries": {"allpairspathlengthmapping (class in rustworkx)": [[26, "rustworkx.AllPairsPathLengthMapping"]], "items() (allpairspathlengthmapping method)": [[27, "rustworkx.AllPairsPathLengthMapping.items"]], "keys() (allpairspathlengthmapping method)": [[28, "rustworkx.AllPairsPathLengthMapping.keys"]], "values() (allpairspathlengthmapping method)": [[29, "rustworkx.AllPairsPathLengthMapping.values"]], "allpairspathmapping (class in rustworkx)": [[30, "rustworkx.AllPairsPathMapping"]], "items() (allpairspathmapping method)": [[31, "rustworkx.AllPairsPathMapping.items"]], "keys() (allpairspathmapping method)": [[32, "rustworkx.AllPairsPathMapping.keys"]], "values() (allpairspathmapping method)": [[33, "rustworkx.AllPairsPathMapping.values"]], "bfspredecessors (class in rustworkx)": [[34, "rustworkx.BFSPredecessors"]], "bfssuccessors (class in rustworkx)": [[35, "rustworkx.BFSSuccessors"]], "biconnectedcomponents (class in rustworkx)": [[36, "rustworkx.BiconnectedComponents"]], "items() (biconnectedcomponents method)": [[37, "rustworkx.BiconnectedComponents.items"]], "keys() (biconnectedcomponents method)": [[38, "rustworkx.BiconnectedComponents.keys"]], "values() (biconnectedcomponents method)": [[39, "rustworkx.BiconnectedComponents.values"]], "centralitymapping (class in rustworkx)": [[40, "rustworkx.CentralityMapping"]], "items() (centralitymapping method)": [[41, "rustworkx.CentralityMapping.items"]], "keys() (centralitymapping method)": [[42, "rustworkx.CentralityMapping.keys"]], "values() (centralitymapping method)": [[43, "rustworkx.CentralityMapping.values"]], "chains (class in rustworkx)": [[44, "rustworkx.Chains"]], "coloringstrategy (class in rustworkx)": [[45, "rustworkx.ColoringStrategy"]], "degree (coloringstrategy attribute)": [[45, "rustworkx.ColoringStrategy.Degree"]], "independentset (coloringstrategy attribute)": [[45, "rustworkx.ColoringStrategy.IndependentSet"]], "saturation (coloringstrategy attribute)": [[45, "rustworkx.ColoringStrategy.Saturation"]], "daghascycle": [[46, "rustworkx.DAGHasCycle"]], "dagwouldcycle": [[47, "rustworkx.DAGWouldCycle"]], "edgecentralitymapping (class in rustworkx)": [[48, "rustworkx.EdgeCentralityMapping"]], "items() (edgecentralitymapping method)": [[49, "rustworkx.EdgeCentralityMapping.items"]], "keys() (edgecentralitymapping method)": [[50, "rustworkx.EdgeCentralityMapping.keys"]], "values() (edgecentralitymapping method)": [[51, "rustworkx.EdgeCentralityMapping.values"]], "edgeindexmap (class in rustworkx)": [[52, "rustworkx.EdgeIndexMap"]], "items() (edgeindexmap method)": [[53, "rustworkx.EdgeIndexMap.items"]], "keys() (edgeindexmap method)": [[54, "rustworkx.EdgeIndexMap.keys"]], "values() (edgeindexmap method)": [[55, "rustworkx.EdgeIndexMap.values"]], "edgeindices (class in rustworkx)": [[56, "rustworkx.EdgeIndices"]], "edgelist (class in rustworkx)": [[57, "rustworkx.EdgeList"]], "graphnotbipartite": [[58, "rustworkx.GraphNotBipartite"]], "indexpartitionblock (class in rustworkx)": [[59, "rustworkx.IndexPartitionBlock"]], "invalidmapping": [[60, "rustworkx.InvalidMapping"]], "invalidnode": [[61, "rustworkx.InvalidNode"]], "jsonserializationerror": [[62, "rustworkx.JSONSerializationError"]], "negativecycle": [[63, "rustworkx.NegativeCycle"]], "noedgebetweennodes": [[64, "rustworkx.NoEdgeBetweenNodes"]], "nopathfound": [[65, "rustworkx.NoPathFound"]], "nosuitableneighbors": [[66, "rustworkx.NoSuitableNeighbors"]], "nodeindices (class in rustworkx)": [[67, "rustworkx.NodeIndices"]], "nodemap (class in rustworkx)": [[68, "rustworkx.NodeMap"]], "items() (nodemap method)": [[69, "rustworkx.NodeMap.items"]], "keys() (nodemap method)": [[70, "rustworkx.NodeMap.keys"]], "values() (nodemap method)": [[71, "rustworkx.NodeMap.values"]], "nullgraph": [[72, "rustworkx.NullGraph"]], "pathlengthmapping (class in rustworkx)": [[73, "rustworkx.PathLengthMapping"]], "items() (pathlengthmapping method)": [[74, "rustworkx.PathLengthMapping.items"]], "keys() (pathlengthmapping method)": [[75, "rustworkx.PathLengthMapping.keys"]], "values() (pathlengthmapping method)": [[76, "rustworkx.PathLengthMapping.values"]], "pathmapping (class in rustworkx)": [[77, "rustworkx.PathMapping"]], "items() (pathmapping method)": [[78, "rustworkx.PathMapping.items"]], "keys() (pathmapping method)": [[79, "rustworkx.PathMapping.keys"]], "values() (pathmapping method)": [[80, "rustworkx.PathMapping.values"]], "pos2dmapping (class in rustworkx)": [[81, "rustworkx.Pos2DMapping"]], "items() (pos2dmapping method)": [[82, "rustworkx.Pos2DMapping.items"]], "keys() (pos2dmapping method)": [[83, "rustworkx.Pos2DMapping.keys"]], "values() (pos2dmapping method)": [[84, "rustworkx.Pos2DMapping.values"]], "productnodemap (class in rustworkx)": [[85, "rustworkx.ProductNodeMap"]], "items() (productnodemap method)": [[86, "rustworkx.ProductNodeMap.items"]], "keys() (productnodemap method)": [[87, "rustworkx.ProductNodeMap.keys"]], "values() (productnodemap method)": [[88, "rustworkx.ProductNodeMap.values"]], "pydag (class in rustworkx)": [[89, "rustworkx.PyDAG"]], "attrs (pydag attribute)": [[89, "rustworkx.PyDAG.attrs"]], "check_cycle (pydag attribute)": [[89, "rustworkx.PyDAG.check_cycle"]], "multigraph (pydag attribute)": [[89, "rustworkx.PyDAG.multigraph"]], "add_child() (pydag method)": [[90, "rustworkx.PyDAG.add_child"]], "add_edge() (pydag method)": [[91, "rustworkx.PyDAG.add_edge"]], "add_edges_from() (pydag method)": [[92, "rustworkx.PyDAG.add_edges_from"]], "add_edges_from_no_data() (pydag method)": [[93, "rustworkx.PyDAG.add_edges_from_no_data"]], "add_node() (pydag method)": [[94, "rustworkx.PyDAG.add_node"]], "add_nodes_from() (pydag method)": [[95, "rustworkx.PyDAG.add_nodes_from"]], "add_parent() (pydag method)": [[96, "rustworkx.PyDAG.add_parent"]], "adj() (pydag method)": [[97, "rustworkx.PyDAG.adj"]], "adj_direction() (pydag method)": [[98, "rustworkx.PyDAG.adj_direction"]], "clear() (pydag method)": [[99, "rustworkx.PyDAG.clear"]], "clear_edges() (pydag method)": [[100, "rustworkx.PyDAG.clear_edges"]], "compose() (pydag method)": [[101, "rustworkx.PyDAG.compose"]], "contract_nodes() (pydag method)": [[102, "rustworkx.PyDAG.contract_nodes"]], "copy() (pydag method)": [[103, "rustworkx.PyDAG.copy"]], "edge_index_map() (pydag method)": [[104, "rustworkx.PyDAG.edge_index_map"]], "edge_indices() (pydag method)": [[105, "rustworkx.PyDAG.edge_indices"]], "edge_indices_from_endpoints() (pydag method)": [[106, "rustworkx.PyDAG.edge_indices_from_endpoints"]], "edge_list() (pydag method)": [[107, "rustworkx.PyDAG.edge_list"]], "edge_subgraph() (pydag method)": [[108, "rustworkx.PyDAG.edge_subgraph"]], "edges() (pydag method)": [[109, "rustworkx.PyDAG.edges"]], "extend_from_edge_list() (pydag method)": [[110, "rustworkx.PyDAG.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydag method)": [[111, "rustworkx.PyDAG.extend_from_weighted_edge_list"]], "filter_edges() (pydag method)": [[112, "rustworkx.PyDAG.filter_edges"]], "filter_nodes() (pydag method)": [[113, "rustworkx.PyDAG.filter_nodes"]], "find_adjacent_node_by_edge() (pydag method)": [[114, "rustworkx.PyDAG.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydag method)": [[115, "rustworkx.PyDAG.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydag method)": [[116, "rustworkx.PyDAG.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydag method)": [[117, "rustworkx.PyDAG.find_predecessors_by_edge"]], "find_successor_node_by_edge() (pydag method)": [[118, "rustworkx.PyDAG.find_successor_node_by_edge"]], "find_successors_by_edge() (pydag method)": [[119, "rustworkx.PyDAG.find_successors_by_edge"]], "from_adjacency_matrix() (pydag static method)": [[120, "rustworkx.PyDAG.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydag static method)": [[121, "rustworkx.PyDAG.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydag method)": [[122, "rustworkx.PyDAG.get_all_edge_data"]], "get_edge_data() (pydag method)": [[123, "rustworkx.PyDAG.get_edge_data"]], "get_edge_data_by_index() (pydag method)": [[124, "rustworkx.PyDAG.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydag method)": [[125, "rustworkx.PyDAG.get_edge_endpoints_by_index"]], "get_node_data() (pydag method)": [[126, "rustworkx.PyDAG.get_node_data"]], "has_edge() (pydag method)": [[127, "rustworkx.PyDAG.has_edge"]], "has_node() (pydag method)": [[128, "rustworkx.PyDAG.has_node"]], "has_parallel_edges() (pydag method)": [[129, "rustworkx.PyDAG.has_parallel_edges"]], "in_degree() (pydag method)": [[130, "rustworkx.PyDAG.in_degree"]], "in_edge_indices() (pydag method)": [[131, "rustworkx.PyDAG.in_edge_indices"]], "in_edges() (pydag method)": [[132, "rustworkx.PyDAG.in_edges"]], "incident_edge_index_map() (pydag method)": [[133, "rustworkx.PyDAG.incident_edge_index_map"]], "incident_edges() (pydag method)": [[134, "rustworkx.PyDAG.incident_edges"]], "insert_node_on_in_edges() (pydag method)": [[135, "rustworkx.PyDAG.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydag method)": [[136, "rustworkx.PyDAG.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydag method)": [[137, "rustworkx.PyDAG.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydag method)": [[138, "rustworkx.PyDAG.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydag method)": [[139, "rustworkx.PyDAG.is_symmetric"]], "make_symmetric() (pydag method)": [[140, "rustworkx.PyDAG.make_symmetric"]], "merge_nodes() (pydag method)": [[141, "rustworkx.PyDAG.merge_nodes"]], "neighbors() (pydag method)": [[142, "rustworkx.PyDAG.neighbors"]], "neighbors_undirected() (pydag method)": [[143, "rustworkx.PyDAG.neighbors_undirected"]], "node_indexes() (pydag method)": [[144, "rustworkx.PyDAG.node_indexes"]], "node_indices() (pydag method)": [[145, "rustworkx.PyDAG.node_indices"]], "nodes() (pydag method)": [[146, "rustworkx.PyDAG.nodes"]], "num_edges() (pydag method)": [[147, "rustworkx.PyDAG.num_edges"]], "num_nodes() (pydag method)": [[148, "rustworkx.PyDAG.num_nodes"]], "out_degree() (pydag method)": [[149, "rustworkx.PyDAG.out_degree"]], "out_edge_indices() (pydag method)": [[150, "rustworkx.PyDAG.out_edge_indices"]], "out_edges() (pydag method)": [[151, "rustworkx.PyDAG.out_edges"]], "predecessor_indices() (pydag method)": [[152, "rustworkx.PyDAG.predecessor_indices"]], "predecessors() (pydag method)": [[153, "rustworkx.PyDAG.predecessors"]], "read_edge_list() (pydag static method)": [[154, "rustworkx.PyDAG.read_edge_list"]], "remove_edge() (pydag method)": [[155, "rustworkx.PyDAG.remove_edge"]], "remove_edge_from_index() (pydag method)": [[156, "rustworkx.PyDAG.remove_edge_from_index"]], "remove_edges_from() (pydag method)": [[157, "rustworkx.PyDAG.remove_edges_from"]], "remove_node() (pydag method)": [[158, "rustworkx.PyDAG.remove_node"]], "remove_node_retain_edges() (pydag method)": [[159, "rustworkx.PyDAG.remove_node_retain_edges"]], "remove_node_retain_edges_by_id() (pydag method)": [[160, "rustworkx.PyDAG.remove_node_retain_edges_by_id"]], "remove_node_retain_edges_by_key() (pydag method)": [[161, "rustworkx.PyDAG.remove_node_retain_edges_by_key"]], "remove_nodes_from() (pydag method)": [[162, "rustworkx.PyDAG.remove_nodes_from"]], "reverse() (pydag method)": [[163, "rustworkx.PyDAG.reverse"]], "subgraph() (pydag method)": [[164, "rustworkx.PyDAG.subgraph"]], "substitute_node_with_subgraph() (pydag method)": [[165, "rustworkx.PyDAG.substitute_node_with_subgraph"]], "successor_indices() (pydag method)": [[166, "rustworkx.PyDAG.successor_indices"]], "successors() (pydag method)": [[167, "rustworkx.PyDAG.successors"]], "to_dot() (pydag method)": [[168, "rustworkx.PyDAG.to_dot"]], "to_undirected() (pydag method)": [[169, "rustworkx.PyDAG.to_undirected"]], "update_edge() (pydag method)": [[170, "rustworkx.PyDAG.update_edge"]], "update_edge_by_index() (pydag method)": [[171, "rustworkx.PyDAG.update_edge_by_index"]], "weighted_edge_list() (pydag method)": [[172, "rustworkx.PyDAG.weighted_edge_list"]], "write_edge_list() (pydag method)": [[173, "rustworkx.PyDAG.write_edge_list"]], "pydigraph (class in rustworkx)": [[174, "rustworkx.PyDiGraph"]], "attrs (pydigraph attribute)": [[174, "rustworkx.PyDiGraph.attrs"]], "check_cycle (pydigraph attribute)": [[174, "rustworkx.PyDiGraph.check_cycle"]], "multigraph (pydigraph attribute)": [[174, "rustworkx.PyDiGraph.multigraph"]], "add_child() (pydigraph method)": [[175, "rustworkx.PyDiGraph.add_child"]], "add_edge() (pydigraph method)": [[176, "rustworkx.PyDiGraph.add_edge"]], "add_edges_from() (pydigraph method)": [[177, "rustworkx.PyDiGraph.add_edges_from"]], "add_edges_from_no_data() (pydigraph method)": [[178, "rustworkx.PyDiGraph.add_edges_from_no_data"]], "add_node() (pydigraph method)": [[179, "rustworkx.PyDiGraph.add_node"]], "add_nodes_from() (pydigraph method)": [[180, "rustworkx.PyDiGraph.add_nodes_from"]], "add_parent() (pydigraph method)": [[181, "rustworkx.PyDiGraph.add_parent"]], "adj() (pydigraph method)": [[182, "rustworkx.PyDiGraph.adj"]], "adj_direction() (pydigraph method)": [[183, "rustworkx.PyDiGraph.adj_direction"]], "clear() (pydigraph method)": [[184, "rustworkx.PyDiGraph.clear"]], "clear_edges() (pydigraph method)": [[185, "rustworkx.PyDiGraph.clear_edges"]], "compose() (pydigraph method)": [[186, "rustworkx.PyDiGraph.compose"]], "contract_nodes() (pydigraph method)": [[187, "rustworkx.PyDiGraph.contract_nodes"]], "copy() (pydigraph method)": [[188, "rustworkx.PyDiGraph.copy"]], "edge_index_map() (pydigraph method)": [[189, "rustworkx.PyDiGraph.edge_index_map"]], "edge_indices() (pydigraph method)": [[190, "rustworkx.PyDiGraph.edge_indices"]], "edge_indices_from_endpoints() (pydigraph method)": [[191, "rustworkx.PyDiGraph.edge_indices_from_endpoints"]], "edge_list() (pydigraph method)": [[192, "rustworkx.PyDiGraph.edge_list"]], "edge_subgraph() (pydigraph method)": [[193, "rustworkx.PyDiGraph.edge_subgraph"]], "edges() (pydigraph method)": [[194, "rustworkx.PyDiGraph.edges"]], "extend_from_edge_list() (pydigraph method)": [[195, "rustworkx.PyDiGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydigraph method)": [[196, "rustworkx.PyDiGraph.extend_from_weighted_edge_list"]], "filter_edges() (pydigraph method)": [[197, "rustworkx.PyDiGraph.filter_edges"]], "filter_nodes() (pydigraph method)": [[198, "rustworkx.PyDiGraph.filter_nodes"]], "find_adjacent_node_by_edge() (pydigraph method)": [[199, "rustworkx.PyDiGraph.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydigraph method)": [[200, "rustworkx.PyDiGraph.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydigraph method)": [[201, "rustworkx.PyDiGraph.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydigraph method)": [[202, "rustworkx.PyDiGraph.find_predecessors_by_edge"]], "find_successor_node_by_edge() (pydigraph method)": [[203, "rustworkx.PyDiGraph.find_successor_node_by_edge"]], "find_successors_by_edge() (pydigraph method)": [[204, "rustworkx.PyDiGraph.find_successors_by_edge"]], "from_adjacency_matrix() (pydigraph static method)": [[205, "rustworkx.PyDiGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydigraph static method)": [[206, "rustworkx.PyDiGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydigraph method)": [[207, "rustworkx.PyDiGraph.get_all_edge_data"]], "get_edge_data() (pydigraph method)": [[208, "rustworkx.PyDiGraph.get_edge_data"]], "get_edge_data_by_index() (pydigraph method)": [[209, "rustworkx.PyDiGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydigraph method)": [[210, "rustworkx.PyDiGraph.get_edge_endpoints_by_index"]], "get_node_data() (pydigraph method)": [[211, "rustworkx.PyDiGraph.get_node_data"]], "has_edge() (pydigraph method)": [[212, "rustworkx.PyDiGraph.has_edge"]], "has_node() (pydigraph method)": [[213, "rustworkx.PyDiGraph.has_node"]], "has_parallel_edges() (pydigraph method)": [[214, "rustworkx.PyDiGraph.has_parallel_edges"]], "in_degree() (pydigraph method)": [[215, "rustworkx.PyDiGraph.in_degree"]], "in_edge_indices() (pydigraph method)": [[216, "rustworkx.PyDiGraph.in_edge_indices"]], "in_edges() (pydigraph method)": [[217, "rustworkx.PyDiGraph.in_edges"]], "incident_edge_index_map() (pydigraph method)": [[218, "rustworkx.PyDiGraph.incident_edge_index_map"]], "incident_edges() (pydigraph method)": [[219, "rustworkx.PyDiGraph.incident_edges"]], "insert_node_on_in_edges() (pydigraph method)": [[220, "rustworkx.PyDiGraph.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydigraph method)": [[221, "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydigraph method)": [[222, "rustworkx.PyDiGraph.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydigraph method)": [[223, "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydigraph method)": [[224, "rustworkx.PyDiGraph.is_symmetric"]], "make_symmetric() (pydigraph method)": [[225, "rustworkx.PyDiGraph.make_symmetric"]], "merge_nodes() (pydigraph method)": [[226, "rustworkx.PyDiGraph.merge_nodes"]], "neighbors() (pydigraph method)": [[227, "rustworkx.PyDiGraph.neighbors"]], "neighbors_undirected() (pydigraph method)": [[228, "rustworkx.PyDiGraph.neighbors_undirected"]], "node_indexes() (pydigraph method)": [[229, "rustworkx.PyDiGraph.node_indexes"]], "node_indices() (pydigraph method)": [[230, "rustworkx.PyDiGraph.node_indices"]], "nodes() (pydigraph method)": [[231, "rustworkx.PyDiGraph.nodes"]], "num_edges() (pydigraph method)": [[232, "rustworkx.PyDiGraph.num_edges"]], "num_nodes() (pydigraph method)": [[233, "rustworkx.PyDiGraph.num_nodes"]], "out_degree() (pydigraph method)": [[234, "rustworkx.PyDiGraph.out_degree"]], "out_edge_indices() (pydigraph method)": [[235, "rustworkx.PyDiGraph.out_edge_indices"]], "out_edges() (pydigraph method)": [[236, "rustworkx.PyDiGraph.out_edges"]], "predecessor_indices() (pydigraph method)": [[237, "rustworkx.PyDiGraph.predecessor_indices"]], "predecessors() (pydigraph method)": [[238, "rustworkx.PyDiGraph.predecessors"]], "read_edge_list() (pydigraph static method)": [[239, "rustworkx.PyDiGraph.read_edge_list"]], "remove_edge() (pydigraph method)": [[240, "rustworkx.PyDiGraph.remove_edge"]], "remove_edge_from_index() (pydigraph method)": [[241, "rustworkx.PyDiGraph.remove_edge_from_index"]], "remove_edges_from() (pydigraph method)": [[242, "rustworkx.PyDiGraph.remove_edges_from"]], "remove_node() (pydigraph method)": [[243, "rustworkx.PyDiGraph.remove_node"]], "remove_node_retain_edges() (pydigraph method)": [[244, "rustworkx.PyDiGraph.remove_node_retain_edges"]], "remove_node_retain_edges_by_id() (pydigraph method)": [[245, "rustworkx.PyDiGraph.remove_node_retain_edges_by_id"]], "remove_node_retain_edges_by_key() (pydigraph method)": [[246, "rustworkx.PyDiGraph.remove_node_retain_edges_by_key"]], "remove_nodes_from() (pydigraph method)": [[247, "rustworkx.PyDiGraph.remove_nodes_from"]], "reverse() (pydigraph method)": [[248, "rustworkx.PyDiGraph.reverse"]], "subgraph() (pydigraph method)": [[249, "rustworkx.PyDiGraph.subgraph"]], "substitute_node_with_subgraph() (pydigraph method)": [[250, "rustworkx.PyDiGraph.substitute_node_with_subgraph"]], "successor_indices() (pydigraph method)": [[251, "rustworkx.PyDiGraph.successor_indices"]], "successors() (pydigraph method)": [[252, "rustworkx.PyDiGraph.successors"]], "to_dot() (pydigraph method)": [[253, "rustworkx.PyDiGraph.to_dot"]], "to_undirected() (pydigraph method)": [[254, "rustworkx.PyDiGraph.to_undirected"]], "update_edge() (pydigraph method)": [[255, "rustworkx.PyDiGraph.update_edge"]], "update_edge_by_index() (pydigraph method)": [[256, "rustworkx.PyDiGraph.update_edge_by_index"]], "weighted_edge_list() (pydigraph method)": [[257, "rustworkx.PyDiGraph.weighted_edge_list"]], "write_edge_list() (pydigraph method)": [[258, "rustworkx.PyDiGraph.write_edge_list"]], "pygraph (class in rustworkx)": [[259, "rustworkx.PyGraph"]], "attrs (pygraph attribute)": [[259, "rustworkx.PyGraph.attrs"]], "multigraph (pygraph attribute)": [[259, "rustworkx.PyGraph.multigraph"]], "add_edge() (pygraph method)": [[260, "rustworkx.PyGraph.add_edge"]], "add_edges_from() (pygraph method)": [[261, "rustworkx.PyGraph.add_edges_from"]], "add_edges_from_no_data() (pygraph method)": [[262, "rustworkx.PyGraph.add_edges_from_no_data"]], "add_node() (pygraph method)": [[263, "rustworkx.PyGraph.add_node"]], "add_nodes_from() (pygraph method)": [[264, "rustworkx.PyGraph.add_nodes_from"]], "adj() (pygraph method)": [[265, "rustworkx.PyGraph.adj"]], "clear() (pygraph method)": [[266, "rustworkx.PyGraph.clear"]], "clear_edges() (pygraph method)": [[267, "rustworkx.PyGraph.clear_edges"]], "compose() (pygraph method)": [[268, "rustworkx.PyGraph.compose"]], "contract_nodes() (pygraph method)": [[269, "rustworkx.PyGraph.contract_nodes"]], "copy() (pygraph method)": [[270, "rustworkx.PyGraph.copy"]], "degree() (pygraph method)": [[271, "rustworkx.PyGraph.degree"]], "edge_index_map() (pygraph method)": [[272, "rustworkx.PyGraph.edge_index_map"]], "edge_indices() (pygraph method)": [[273, "rustworkx.PyGraph.edge_indices"]], "edge_indices_from_endpoints() (pygraph method)": [[274, "rustworkx.PyGraph.edge_indices_from_endpoints"]], "edge_list() (pygraph method)": [[275, "rustworkx.PyGraph.edge_list"]], "edge_subgraph() (pygraph method)": [[276, "rustworkx.PyGraph.edge_subgraph"]], "edges() (pygraph method)": [[277, "rustworkx.PyGraph.edges"]], "extend_from_edge_list() (pygraph method)": [[278, "rustworkx.PyGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pygraph method)": [[279, "rustworkx.PyGraph.extend_from_weighted_edge_list"]], "filter_edges() (pygraph method)": [[280, "rustworkx.PyGraph.filter_edges"]], "filter_nodes() (pygraph method)": [[281, "rustworkx.PyGraph.filter_nodes"]], "find_node_by_weight() (pygraph method)": [[282, "rustworkx.PyGraph.find_node_by_weight"]], "from_adjacency_matrix() (pygraph static method)": [[283, "rustworkx.PyGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pygraph static method)": [[284, "rustworkx.PyGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pygraph method)": [[285, "rustworkx.PyGraph.get_all_edge_data"]], "get_edge_data() (pygraph method)": [[286, "rustworkx.PyGraph.get_edge_data"]], "get_edge_data_by_index() (pygraph method)": [[287, "rustworkx.PyGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pygraph method)": [[288, "rustworkx.PyGraph.get_edge_endpoints_by_index"]], "get_node_data() (pygraph method)": [[289, "rustworkx.PyGraph.get_node_data"]], "has_edge() (pygraph method)": [[290, "rustworkx.PyGraph.has_edge"]], "has_node() (pygraph method)": [[291, "rustworkx.PyGraph.has_node"]], "has_parallel_edges() (pygraph method)": [[292, "rustworkx.PyGraph.has_parallel_edges"]], "in_edge_indices() (pygraph method)": [[293, "rustworkx.PyGraph.in_edge_indices"]], "in_edges() (pygraph method)": [[294, "rustworkx.PyGraph.in_edges"]], "incident_edge_index_map() (pygraph method)": [[295, "rustworkx.PyGraph.incident_edge_index_map"]], "incident_edges() (pygraph method)": [[296, "rustworkx.PyGraph.incident_edges"]], "neighbors() (pygraph method)": [[297, "rustworkx.PyGraph.neighbors"]], "node_indexes() (pygraph method)": [[298, "rustworkx.PyGraph.node_indexes"]], "node_indices() (pygraph method)": [[299, "rustworkx.PyGraph.node_indices"]], "nodes() (pygraph method)": [[300, "rustworkx.PyGraph.nodes"]], "num_edges() (pygraph method)": [[301, "rustworkx.PyGraph.num_edges"]], "num_nodes() (pygraph method)": [[302, "rustworkx.PyGraph.num_nodes"]], "out_edge_indices() (pygraph method)": [[303, "rustworkx.PyGraph.out_edge_indices"]], "out_edges() (pygraph method)": [[304, "rustworkx.PyGraph.out_edges"]], "read_edge_list() (pygraph static method)": [[305, "rustworkx.PyGraph.read_edge_list"]], "remove_edge() (pygraph method)": [[306, "rustworkx.PyGraph.remove_edge"]], "remove_edge_from_index() (pygraph method)": [[307, "rustworkx.PyGraph.remove_edge_from_index"]], "remove_edges_from() (pygraph method)": [[308, "rustworkx.PyGraph.remove_edges_from"]], "remove_node() (pygraph method)": [[309, "rustworkx.PyGraph.remove_node"]], "remove_nodes_from() (pygraph method)": [[310, "rustworkx.PyGraph.remove_nodes_from"]], "subgraph() (pygraph method)": [[311, "rustworkx.PyGraph.subgraph"]], "substitute_node_with_subgraph() (pygraph method)": [[312, "rustworkx.PyGraph.substitute_node_with_subgraph"]], "to_directed() (pygraph method)": [[313, "rustworkx.PyGraph.to_directed"]], "to_dot() (pygraph method)": [[314, "rustworkx.PyGraph.to_dot"]], "update_edge() (pygraph method)": [[315, "rustworkx.PyGraph.update_edge"]], "update_edge_by_index() (pygraph method)": [[316, "rustworkx.PyGraph.update_edge_by_index"]], "weighted_edge_list() (pygraph method)": [[317, "rustworkx.PyGraph.weighted_edge_list"]], "write_edge_list() (pygraph method)": [[318, "rustworkx.PyGraph.write_edge_list"]], "relationalcoarsestpartition (class in rustworkx)": [[319, "rustworkx.RelationalCoarsestPartition"]], "topologicalsorter (class in rustworkx)": [[320, "rustworkx.TopologicalSorter"]], "done() (topologicalsorter method)": [[321, "rustworkx.TopologicalSorter.done"]], "get_ready() (topologicalsorter method)": [[322, "rustworkx.TopologicalSorter.get_ready"]], "is_active() (topologicalsorter method)": [[323, "rustworkx.TopologicalSorter.is_active"]], "weightededgelist (class in rustworkx)": [[324, "rustworkx.WeightedEdgeList"]], "adjacency_matrix() (in module rustworkx)": [[325, "rustworkx.adjacency_matrix"]], "all_pairs_all_simple_paths() (in module rustworkx)": [[326, "rustworkx.all_pairs_all_simple_paths"]], "all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[327, "rustworkx.all_pairs_bellman_ford_path_lengths"]], "all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[328, "rustworkx.all_pairs_bellman_ford_shortest_paths"]], "all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[329, "rustworkx.all_pairs_dijkstra_path_lengths"]], "all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[330, "rustworkx.all_pairs_dijkstra_shortest_paths"]], "all_shortest_paths() (in module rustworkx)": [[331, "rustworkx.all_shortest_paths"]], "all_simple_paths() (in module rustworkx)": [[332, "rustworkx.all_simple_paths"]], "ancestors() (in module rustworkx)": [[333, "rustworkx.ancestors"]], "articulation_points() (in module rustworkx)": [[334, "rustworkx.articulation_points"]], "astar_shortest_path() (in module rustworkx)": [[335, "rustworkx.astar_shortest_path"]], "barabasi_albert_graph() (in module rustworkx)": [[336, "rustworkx.barabasi_albert_graph"]], "bellman_ford_shortest_path_lengths() (in module rustworkx)": [[337, "rustworkx.bellman_ford_shortest_path_lengths"]], "bellman_ford_shortest_paths() (in module rustworkx)": [[338, "rustworkx.bellman_ford_shortest_paths"]], "betweenness_centrality() (in module rustworkx)": [[339, "rustworkx.betweenness_centrality"]], "bfs_predecessors() (in module rustworkx)": [[340, "rustworkx.bfs_predecessors"]], "bfs_search() (in module rustworkx)": [[341, "rustworkx.bfs_search"]], "bfs_successors() (in module rustworkx)": [[342, "rustworkx.bfs_successors"]], "biconnected_components() (in module rustworkx)": [[343, "rustworkx.biconnected_components"]], "bipartite_layout() (in module rustworkx)": [[344, "rustworkx.bipartite_layout"]], "bridges() (in module rustworkx)": [[345, "rustworkx.bridges"]], "cartesian_product() (in module rustworkx)": [[346, "rustworkx.cartesian_product"]], "chain_decomposition() (in module rustworkx)": [[347, "rustworkx.chain_decomposition"]], "circular_layout() (in module rustworkx)": [[348, "rustworkx.circular_layout"]], "closeness_centrality() (in module rustworkx)": [[349, "rustworkx.closeness_centrality"]], "collect_bicolor_runs() (in module rustworkx)": [[350, "rustworkx.collect_bicolor_runs"]], "collect_runs() (in module rustworkx)": [[351, "rustworkx.collect_runs"]], "complement() (in module rustworkx)": [[352, "rustworkx.complement"]], "connected_components() (in module rustworkx)": [[353, "rustworkx.connected_components"]], "connected_subgraphs() (in module rustworkx)": [[354, "rustworkx.connected_subgraphs"]], "core_number() (in module rustworkx)": [[355, "rustworkx.core_number"]], "cycle_basis() (in module rustworkx)": [[356, "rustworkx.cycle_basis"]], "dag_longest_path() (in module rustworkx)": [[357, "rustworkx.dag_longest_path"]], "dag_longest_path_length() (in module rustworkx)": [[358, "rustworkx.dag_longest_path_length"]], "dag_weighted_longest_path() (in module rustworkx)": [[359, "rustworkx.dag_weighted_longest_path"]], "dag_weighted_longest_path_length() (in module rustworkx)": [[360, "rustworkx.dag_weighted_longest_path_length"]], "degree_centrality() (in module rustworkx)": [[361, "rustworkx.degree_centrality"]], "descendants() (in module rustworkx)": [[362, "rustworkx.descendants"]], "dfs_edges() (in module rustworkx)": [[363, "rustworkx.dfs_edges"]], "dfs_search() (in module rustworkx)": [[364, "rustworkx.dfs_search"]], "digraph_adjacency_matrix() (in module rustworkx)": [[365, "rustworkx.digraph_adjacency_matrix"]], "digraph_all_pairs_all_simple_paths() (in module rustworkx)": [[366, "rustworkx.digraph_all_pairs_all_simple_paths"]], "digraph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[367, "rustworkx.digraph_all_pairs_bellman_ford_path_lengths"]], "digraph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[368, "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths"]], "digraph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[369, "rustworkx.digraph_all_pairs_dijkstra_path_lengths"]], "digraph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[370, "rustworkx.digraph_all_pairs_dijkstra_shortest_paths"]], "digraph_all_shortest_paths() (in module rustworkx)": [[371, "rustworkx.digraph_all_shortest_paths"]], "digraph_all_simple_paths() (in module rustworkx)": [[372, "rustworkx.digraph_all_simple_paths"]], "digraph_astar_shortest_path() (in module rustworkx)": [[373, "rustworkx.digraph_astar_shortest_path"]], "digraph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[374, "rustworkx.digraph_bellman_ford_shortest_path_lengths"]], "digraph_betweenness_centrality() (in module rustworkx)": [[375, "rustworkx.digraph_betweenness_centrality"]], "digraph_bfs_search() (in module rustworkx)": [[376, "rustworkx.digraph_bfs_search"]], "digraph_bipartite_layout() (in module rustworkx)": [[377, "rustworkx.digraph_bipartite_layout"]], "digraph_cartesian_product() (in module rustworkx)": [[378, "rustworkx.digraph_cartesian_product"]], "digraph_circular_layout() (in module rustworkx)": [[379, "rustworkx.digraph_circular_layout"]], "digraph_closeness_centrality() (in module rustworkx)": [[380, "rustworkx.digraph_closeness_centrality"]], "digraph_complement() (in module rustworkx)": [[381, "rustworkx.digraph_complement"]], "digraph_core_number() (in module rustworkx)": [[382, "rustworkx.digraph_core_number"]], "digraph_dfs_edges() (in module rustworkx)": [[383, "rustworkx.digraph_dfs_edges"]], "digraph_dfs_search() (in module rustworkx)": [[384, "rustworkx.digraph_dfs_search"]], "digraph_dijkstra_search() (in module rustworkx)": [[385, "rustworkx.digraph_dijkstra_search"]], "digraph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[386, "rustworkx.digraph_dijkstra_shortest_path_lengths"]], "digraph_dijkstra_shortest_paths() (in module rustworkx)": [[387, "rustworkx.digraph_dijkstra_shortest_paths"]], "digraph_distance_matrix() (in module rustworkx)": [[388, "rustworkx.digraph_distance_matrix"]], "digraph_edge_betweenness_centrality() (in module rustworkx)": [[389, "rustworkx.digraph_edge_betweenness_centrality"]], "digraph_eigenvector_centrality() (in module rustworkx)": [[390, "rustworkx.digraph_eigenvector_centrality"]], "digraph_find_cycle() (in module rustworkx)": [[391, "rustworkx.digraph_find_cycle"]], "digraph_floyd_warshall() (in module rustworkx)": [[392, "rustworkx.digraph_floyd_warshall"]], "digraph_floyd_warshall_numpy() (in module rustworkx)": [[393, "rustworkx.digraph_floyd_warshall_numpy"]], "digraph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[394, "rustworkx.digraph_floyd_warshall_successor_and_distance"]], "digraph_is_isomorphic() (in module rustworkx)": [[395, "rustworkx.digraph_is_isomorphic"]], "digraph_is_subgraph_isomorphic() (in module rustworkx)": [[396, "rustworkx.digraph_is_subgraph_isomorphic"]], "digraph_k_shortest_path_lengths() (in module rustworkx)": [[397, "rustworkx.digraph_k_shortest_path_lengths"]], "digraph_katz_centrality() (in module rustworkx)": [[398, "rustworkx.digraph_katz_centrality"]], "digraph_longest_simple_path() (in module rustworkx)": [[399, "rustworkx.digraph_longest_simple_path"]], "digraph_maximum_bisimulation() (in module rustworkx)": [[400, "rustworkx.digraph_maximum_bisimulation"]], "digraph_newman_weighted_closeness_centrality() (in module rustworkx)": [[401, "rustworkx.digraph_newman_weighted_closeness_centrality"]], "digraph_node_link_json() (in module rustworkx)": [[402, "rustworkx.digraph_node_link_json"]], "digraph_num_shortest_paths_unweighted() (in module rustworkx)": [[403, "rustworkx.digraph_num_shortest_paths_unweighted"]], "digraph_random_layout() (in module rustworkx)": [[404, "rustworkx.digraph_random_layout"]], "digraph_shell_layout() (in module rustworkx)": [[405, "rustworkx.digraph_shell_layout"]], "digraph_spiral_layout() (in module rustworkx)": [[406, "rustworkx.digraph_spiral_layout"]], "digraph_spring_layout() (in module rustworkx)": [[407, "rustworkx.digraph_spring_layout"]], "digraph_tensor_product() (in module rustworkx)": [[408, "rustworkx.digraph_tensor_product"]], "digraph_transitivity() (in module rustworkx)": [[409, "rustworkx.digraph_transitivity"]], "digraph_union() (in module rustworkx)": [[410, "rustworkx.digraph_union"]], "digraph_unweighted_average_shortest_path_length() (in module rustworkx)": [[411, "rustworkx.digraph_unweighted_average_shortest_path_length"]], "digraph_vf2_mapping() (in module rustworkx)": [[412, "rustworkx.digraph_vf2_mapping"]], "dijkstra_search() (in module rustworkx)": [[413, "rustworkx.dijkstra_search"]], "dijkstra_shortest_path_lengths() (in module rustworkx)": [[414, "rustworkx.dijkstra_shortest_path_lengths"]], "dijkstra_shortest_paths() (in module rustworkx)": [[415, "rustworkx.dijkstra_shortest_paths"]], "directed_barabasi_albert_graph() (in module rustworkx)": [[416, "rustworkx.directed_barabasi_albert_graph"]], "directed_gnm_random_graph() (in module rustworkx)": [[417, "rustworkx.directed_gnm_random_graph"]], "directed_gnp_random_graph() (in module rustworkx)": [[418, "rustworkx.directed_gnp_random_graph"]], "directed_random_bipartite_graph() (in module rustworkx)": [[419, "rustworkx.directed_random_bipartite_graph"]], "directed_sbm_random_graph() (in module rustworkx)": [[420, "rustworkx.directed_sbm_random_graph"]], "distance_matrix() (in module rustworkx)": [[421, "rustworkx.distance_matrix"]], "dominance_frontiers() (in module rustworkx)": [[422, "rustworkx.dominance_frontiers"]], "edge_betweenness_centrality() (in module rustworkx)": [[423, "rustworkx.edge_betweenness_centrality"]], "eigenvector_centrality() (in module rustworkx)": [[424, "rustworkx.eigenvector_centrality"]], "find_negative_cycle() (in module rustworkx)": [[425, "rustworkx.find_negative_cycle"]], "floyd_warshall() (in module rustworkx)": [[426, "rustworkx.floyd_warshall"]], "floyd_warshall_numpy() (in module rustworkx)": [[427, "rustworkx.floyd_warshall_numpy"]], "floyd_warshall_successor_and_distance() (in module rustworkx)": [[428, "rustworkx.floyd_warshall_successor_and_distance"]], "from_node_link_json_file() (in module rustworkx)": [[429, "rustworkx.from_node_link_json_file"]], "barbell_graph() (in module rustworkx.generators)": [[430, "rustworkx.generators.barbell_graph"]], "binomial_tree_graph() (in module rustworkx.generators)": [[431, "rustworkx.generators.binomial_tree_graph"]], "complete_graph() (in module rustworkx.generators)": [[432, "rustworkx.generators.complete_graph"]], "cycle_graph() (in module rustworkx.generators)": [[433, "rustworkx.generators.cycle_graph"]], "directed_binomial_tree_graph() (in module rustworkx.generators)": [[434, "rustworkx.generators.directed_binomial_tree_graph"]], "directed_complete_graph() (in module rustworkx.generators)": [[435, "rustworkx.generators.directed_complete_graph"]], "directed_cycle_graph() (in module rustworkx.generators)": [[436, "rustworkx.generators.directed_cycle_graph"]], "directed_empty_graph() (in module rustworkx.generators)": [[437, "rustworkx.generators.directed_empty_graph"]], "directed_grid_graph() (in module rustworkx.generators)": [[438, "rustworkx.generators.directed_grid_graph"]], "directed_heavy_hex_graph() (in module rustworkx.generators)": [[439, "rustworkx.generators.directed_heavy_hex_graph"]], "directed_heavy_square_graph() (in module rustworkx.generators)": [[440, "rustworkx.generators.directed_heavy_square_graph"]], "directed_hexagonal_lattice_graph() (in module rustworkx.generators)": [[441, "rustworkx.generators.directed_hexagonal_lattice_graph"]], "directed_mesh_graph() (in module rustworkx.generators)": [[442, "rustworkx.generators.directed_mesh_graph"]], "directed_path_graph() (in module rustworkx.generators)": [[443, "rustworkx.generators.directed_path_graph"]], "directed_star_graph() (in module rustworkx.generators)": [[444, "rustworkx.generators.directed_star_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module rustworkx.generators)": [[445, "rustworkx.generators.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module rustworkx.generators)": [[446, "rustworkx.generators.empty_graph"]], "full_rary_tree() (in module rustworkx.generators)": [[447, "rustworkx.generators.full_rary_tree"]], "generalized_petersen_graph() (in module rustworkx.generators)": [[448, "rustworkx.generators.generalized_petersen_graph"]], "grid_graph() (in module rustworkx.generators)": [[449, "rustworkx.generators.grid_graph"]], "heavy_hex_graph() (in module rustworkx.generators)": [[450, "rustworkx.generators.heavy_hex_graph"]], "heavy_square_graph() (in module rustworkx.generators)": [[451, "rustworkx.generators.heavy_square_graph"]], "hexagonal_lattice_graph() (in module rustworkx.generators)": [[452, "rustworkx.generators.hexagonal_lattice_graph"]], "karate_club_graph() (in module rustworkx.generators)": [[453, "rustworkx.generators.karate_club_graph"]], "lollipop_graph() (in module rustworkx.generators)": [[454, "rustworkx.generators.lollipop_graph"]], "mesh_graph() (in module rustworkx.generators)": [[455, "rustworkx.generators.mesh_graph"]], "path_graph() (in module rustworkx.generators)": [[456, "rustworkx.generators.path_graph"]], "star_graph() (in module rustworkx.generators)": [[457, "rustworkx.generators.star_graph"]], "graph_adjacency_matrix() (in module rustworkx)": [[458, "rustworkx.graph_adjacency_matrix"]], "graph_all_pairs_all_simple_paths() (in module rustworkx)": [[459, "rustworkx.graph_all_pairs_all_simple_paths"]], "graph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[460, "rustworkx.graph_all_pairs_bellman_ford_path_lengths"]], "graph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[461, "rustworkx.graph_all_pairs_bellman_ford_shortest_paths"]], "graph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[462, "rustworkx.graph_all_pairs_dijkstra_path_lengths"]], "graph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[463, "rustworkx.graph_all_pairs_dijkstra_shortest_paths"]], "graph_all_shortest_paths() (in module rustworkx)": [[464, "rustworkx.graph_all_shortest_paths"]], "graph_all_simple_paths() (in module rustworkx)": [[465, "rustworkx.graph_all_simple_paths"]], "graph_astar_shortest_path() (in module rustworkx)": [[466, "rustworkx.graph_astar_shortest_path"]], "graph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[467, "rustworkx.graph_bellman_ford_shortest_path_lengths"]], "graph_betweenness_centrality() (in module rustworkx)": [[468, "rustworkx.graph_betweenness_centrality"]], "graph_bfs_search() (in module rustworkx)": [[469, "rustworkx.graph_bfs_search"]], "graph_bipartite_edge_color() (in module rustworkx)": [[470, "rustworkx.graph_bipartite_edge_color"]], "graph_bipartite_layout() (in module rustworkx)": [[471, "rustworkx.graph_bipartite_layout"]], "graph_cartesian_product() (in module rustworkx)": [[472, "rustworkx.graph_cartesian_product"]], "graph_circular_layout() (in module rustworkx)": [[473, "rustworkx.graph_circular_layout"]], "graph_closeness_centrality() (in module rustworkx)": [[474, "rustworkx.graph_closeness_centrality"]], "graph_complement() (in module rustworkx)": [[475, "rustworkx.graph_complement"]], "graph_core_number() (in module rustworkx)": [[476, "rustworkx.graph_core_number"]], "graph_dfs_edges() (in module rustworkx)": [[477, "rustworkx.graph_dfs_edges"]], "graph_dfs_search() (in module rustworkx)": [[478, "rustworkx.graph_dfs_search"]], "graph_dijkstra_search() (in module rustworkx)": [[479, "rustworkx.graph_dijkstra_search"]], "graph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[480, "rustworkx.graph_dijkstra_shortest_path_lengths"]], "graph_dijkstra_shortest_paths() (in module rustworkx)": [[481, "rustworkx.graph_dijkstra_shortest_paths"]], "graph_distance_matrix() (in module rustworkx)": [[482, "rustworkx.graph_distance_matrix"]], "graph_edge_betweenness_centrality() (in module rustworkx)": [[483, "rustworkx.graph_edge_betweenness_centrality"]], "graph_eigenvector_centrality() (in module rustworkx)": [[484, "rustworkx.graph_eigenvector_centrality"]], "graph_floyd_warshall() (in module rustworkx)": [[485, "rustworkx.graph_floyd_warshall"]], "graph_floyd_warshall_numpy() (in module rustworkx)": [[486, "rustworkx.graph_floyd_warshall_numpy"]], "graph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[487, "rustworkx.graph_floyd_warshall_successor_and_distance"]], "graph_greedy_color() (in module rustworkx)": [[488, "rustworkx.graph_greedy_color"]], "graph_greedy_edge_color() (in module rustworkx)": [[489, "rustworkx.graph_greedy_edge_color"]], "graph_is_isomorphic() (in module rustworkx)": [[490, "rustworkx.graph_is_isomorphic"]], "graph_is_subgraph_isomorphic() (in module rustworkx)": [[491, "rustworkx.graph_is_subgraph_isomorphic"]], "graph_k_shortest_path_lengths() (in module rustworkx)": [[492, "rustworkx.graph_k_shortest_path_lengths"]], "graph_katz_centrality() (in module rustworkx)": [[493, "rustworkx.graph_katz_centrality"]], "graph_line_graph() (in module rustworkx)": [[494, "rustworkx.graph_line_graph"]], "graph_longest_simple_path() (in module rustworkx)": [[495, "rustworkx.graph_longest_simple_path"]], "graph_misra_gries_edge_color() (in module rustworkx)": [[496, "rustworkx.graph_misra_gries_edge_color"]], "graph_newman_weighted_closeness_centrality() (in module rustworkx)": [[497, "rustworkx.graph_newman_weighted_closeness_centrality"]], "graph_node_link_json() (in module rustworkx)": [[498, "rustworkx.graph_node_link_json"]], "graph_num_shortest_paths_unweighted() (in module rustworkx)": [[499, "rustworkx.graph_num_shortest_paths_unweighted"]], "graph_random_layout() (in module rustworkx)": [[500, "rustworkx.graph_random_layout"]], "graph_shell_layout() (in module rustworkx)": [[501, "rustworkx.graph_shell_layout"]], "graph_spiral_layout() (in module rustworkx)": [[502, "rustworkx.graph_spiral_layout"]], "graph_spring_layout() (in module rustworkx)": [[503, "rustworkx.graph_spring_layout"]], "graph_tensor_product() (in module rustworkx)": [[504, "rustworkx.graph_tensor_product"]], "graph_token_swapper() (in module rustworkx)": [[505, "rustworkx.graph_token_swapper"]], "graph_transitivity() (in module rustworkx)": [[506, "rustworkx.graph_transitivity"]], "graph_union() (in module rustworkx)": [[507, "rustworkx.graph_union"]], "graph_unweighted_average_shortest_path_length() (in module rustworkx)": [[508, "rustworkx.graph_unweighted_average_shortest_path_length"]], "graph_vf2_mapping() (in module rustworkx)": [[509, "rustworkx.graph_vf2_mapping"]], "has_path() (in module rustworkx)": [[510, "rustworkx.has_path"]], "hits() (in module rustworkx)": [[511, "rustworkx.hits"]], "hyperbolic_random_graph() (in module rustworkx)": [[512, "rustworkx.hyperbolic_random_graph"]], "immediate_dominators() (in module rustworkx)": [[513, "rustworkx.immediate_dominators"]], "in_degree_centrality() (in module rustworkx)": [[514, "rustworkx.in_degree_centrality"]], "is_bipartite() (in module rustworkx)": [[515, "rustworkx.is_bipartite"]], "is_connected() (in module rustworkx)": [[516, "rustworkx.is_connected"]], "is_directed_acyclic_graph() (in module rustworkx)": [[517, "rustworkx.is_directed_acyclic_graph"]], "is_isomorphic() (in module rustworkx)": [[518, "rustworkx.is_isomorphic"]], "is_isomorphic_node_match() (in module rustworkx)": [[519, "rustworkx.is_isomorphic_node_match"]], "is_matching() (in module rustworkx)": [[520, "rustworkx.is_matching"]], "is_maximal_matching() (in module rustworkx)": [[521, "rustworkx.is_maximal_matching"]], "is_planar() (in module rustworkx)": [[522, "rustworkx.is_planar"]], "is_strongly_connected() (in module rustworkx)": [[523, "rustworkx.is_strongly_connected"]], "is_subgraph_isomorphic() (in module rustworkx)": [[524, "rustworkx.is_subgraph_isomorphic"]], "is_weakly_connected() (in module rustworkx)": [[525, "rustworkx.is_weakly_connected"]], "isolates() (in module rustworkx)": [[526, "rustworkx.isolates"]], "k_shortest_path_lengths() (in module rustworkx)": [[527, "rustworkx.k_shortest_path_lengths"]], "katz_centrality() (in module rustworkx)": [[528, "rustworkx.katz_centrality"]], "layers() (in module rustworkx)": [[529, "rustworkx.layers"]], "lexicographical_topological_sort() (in module rustworkx)": [[530, "rustworkx.lexicographical_topological_sort"]], "local_complement() (in module rustworkx)": [[531, "rustworkx.local_complement"]], "longest_simple_path() (in module rustworkx)": [[532, "rustworkx.longest_simple_path"]], "max_weight_matching() (in module rustworkx)": [[533, "rustworkx.max_weight_matching"]], "metric_closure() (in module rustworkx)": [[534, "rustworkx.metric_closure"]], "minimum_spanning_edges() (in module rustworkx)": [[535, "rustworkx.minimum_spanning_edges"]], "minimum_spanning_tree() (in module rustworkx)": [[536, "rustworkx.minimum_spanning_tree"]], "negative_edge_cycle() (in module rustworkx)": [[537, "rustworkx.negative_edge_cycle"]], "networkx_converter() (in module rustworkx)": [[538, "rustworkx.networkx_converter"]], "newman_weighted_closeness_centrality() (in module rustworkx)": [[539, "rustworkx.newman_weighted_closeness_centrality"]], "node_connected_component() (in module rustworkx)": [[540, "rustworkx.node_connected_component"]], "node_link_json() (in module rustworkx)": [[541, "rustworkx.node_link_json"]], "num_shortest_paths_unweighted() (in module rustworkx)": [[542, "rustworkx.num_shortest_paths_unweighted"]], "number_connected_components() (in module rustworkx)": [[543, "rustworkx.number_connected_components"]], "number_strongly_connected_components() (in module rustworkx)": [[544, "rustworkx.number_strongly_connected_components"]], "number_weakly_connected_components() (in module rustworkx)": [[545, "rustworkx.number_weakly_connected_components"]], "out_degree_centrality() (in module rustworkx)": [[546, "rustworkx.out_degree_centrality"]], "pagerank() (in module rustworkx)": [[547, "rustworkx.pagerank"]], "parse_node_link_json() (in module rustworkx)": [[548, "rustworkx.parse_node_link_json"]], "random_geometric_graph() (in module rustworkx)": [[549, "rustworkx.random_geometric_graph"]], "random_layout() (in module rustworkx)": [[550, "rustworkx.random_layout"]], "read_graphml() (in module rustworkx)": [[551, "rustworkx.read_graphml"]], "shell_layout() (in module rustworkx)": [[552, "rustworkx.shell_layout"]], "simple_cycles() (in module rustworkx)": [[553, "rustworkx.simple_cycles"]], "spiral_layout() (in module rustworkx)": [[554, "rustworkx.spiral_layout"]], "spring_layout() (in module rustworkx)": [[555, "rustworkx.spring_layout"]], "steiner_tree() (in module rustworkx)": [[556, "rustworkx.steiner_tree"]], "stoer_wagner_min_cut() (in module rustworkx)": [[557, "rustworkx.stoer_wagner_min_cut"]], "strongly_connected_components() (in module rustworkx)": [[558, "rustworkx.strongly_connected_components"]], "topological_generations() (in module rustworkx)": [[559, "rustworkx.topological_generations"]], "topological_sort() (in module rustworkx)": [[560, "rustworkx.topological_sort"]], "transitive_reduction() (in module rustworkx)": [[561, "rustworkx.transitive_reduction"]], "transitivity() (in module rustworkx)": [[562, "rustworkx.transitivity"]], "two_color() (in module rustworkx)": [[563, "rustworkx.two_color"]], "undirected_gnm_random_graph() (in module rustworkx)": [[564, "rustworkx.undirected_gnm_random_graph"]], "undirected_gnp_random_graph() (in module rustworkx)": [[565, "rustworkx.undirected_gnp_random_graph"]], "undirected_random_bipartite_graph() (in module rustworkx)": [[566, "rustworkx.undirected_random_bipartite_graph"]], "undirected_sbm_random_graph() (in module rustworkx)": [[567, "rustworkx.undirected_sbm_random_graph"]], "union() (in module rustworkx)": [[568, "rustworkx.union"]], "unweighted_average_shortest_path_length() (in module rustworkx)": [[569, "rustworkx.unweighted_average_shortest_path_length"]], "vf2_mapping() (in module rustworkx)": [[570, "rustworkx.vf2_mapping"]], "bfsvisitor (class in rustworkx.visit)": [[571, "rustworkx.visit.BFSVisitor"]], "black_target_edge() (bfsvisitor method)": [[572, "rustworkx.visit.BFSVisitor.black_target_edge"]], "discover_vertex() (bfsvisitor method)": [[573, "rustworkx.visit.BFSVisitor.discover_vertex"]], "finish_vertex() (bfsvisitor method)": [[574, "rustworkx.visit.BFSVisitor.finish_vertex"]], "gray_target_edge() (bfsvisitor method)": [[575, "rustworkx.visit.BFSVisitor.gray_target_edge"]], "non_tree_edge() (bfsvisitor method)": [[576, "rustworkx.visit.BFSVisitor.non_tree_edge"]], "tree_edge() (bfsvisitor method)": [[577, "rustworkx.visit.BFSVisitor.tree_edge"]], "dfsvisitor (class in rustworkx.visit)": [[578, "rustworkx.visit.DFSVisitor"]], "back_edge() (dfsvisitor method)": [[579, "rustworkx.visit.DFSVisitor.back_edge"]], "discover_vertex() (dfsvisitor method)": [[580, "rustworkx.visit.DFSVisitor.discover_vertex"]], "finish_vertex() (dfsvisitor method)": [[581, "rustworkx.visit.DFSVisitor.finish_vertex"]], "forward_or_cross_edge() (dfsvisitor method)": [[582, "rustworkx.visit.DFSVisitor.forward_or_cross_edge"]], "tree_edge() (dfsvisitor method)": [[583, "rustworkx.visit.DFSVisitor.tree_edge"]], "dijkstravisitor (class in rustworkx.visit)": [[584, "rustworkx.visit.DijkstraVisitor"]], "discover_vertex() (dijkstravisitor method)": [[585, "rustworkx.visit.DijkstraVisitor.discover_vertex"]], "edge_not_relaxed() (dijkstravisitor method)": [[586, "rustworkx.visit.DijkstraVisitor.edge_not_relaxed"]], "edge_relaxed() (dijkstravisitor method)": [[587, "rustworkx.visit.DijkstraVisitor.edge_relaxed"]], "examine_edge() (dijkstravisitor method)": [[588, "rustworkx.visit.DijkstraVisitor.examine_edge"]], "finish_vertex() (dijkstravisitor method)": [[589, "rustworkx.visit.DijkstraVisitor.finish_vertex"]], "prunesearch": [[590, "rustworkx.visit.PruneSearch"]], "stopsearch": [[591, "rustworkx.visit.StopSearch"]], "graphviz_draw() (in module rustworkx.visualization)": [[592, "rustworkx.visualization.graphviz_draw"]], "mpl_draw() (in module rustworkx.visualization)": [[593, "rustworkx.visualization.mpl_draw"]], "weakly_connected_components() (in module rustworkx)": [[594, "rustworkx.weakly_connected_components"]]}})